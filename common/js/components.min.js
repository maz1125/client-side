/**
 * common/js/components以下の拡張子がjsのファイルを自動結合したファイルです。
 * jQueryのwidgetだけでなく、シンプルな共通関数なども部品としてファイルを分けて管理できます。
 * なお、このファイルは自動生成されているので、編集しても上書きされてしまいます。
 * ここに加えたい場合はcommon/js/components以下にjsファイルを作成してください。
 * 処理の詳細を確認したい場合はGruntfile.jsを参照してください
*/
(function($) {
  $.widget('wap.abstractWidget', {

    _create: function() {
      this._updateOptionsByDomAttributes();
    },

    _updateOptionsByDomAttributes: function() {
      var attrs = this.element[0].attributes;
      for (var i = 0; i < attrs.length; i++) {
        if (attrs[i].nodeName.indexOf('data-') != 0) continue;
        var name = attrs[i].nodeName.replace('data-','');
        this.options[$.camelCase(name)] = this.element.data(name);
      };
    }

  });

  $.widget('wap.sampleWidget', $.wap.abstractWidget, {
    _create: function() {
      this._super();
      console.log(JSON.stringify(this.options));
    }
  });

}(jQuery));



(function monkeyPatchJQueryWidget($){
  var original = $.widget;
  $.widget = proxiedWidgetFunction;
  function proxiedWidgetFunction(widgetName, two, three, retry){
    if (retry > 100) {
      console.log('widget内の依存性の解決ができませんでした：' + widgetName);
      return;
    }
    var sTwo = undefined;
    if (typeof two == 'string') {
      sTwo = two;
      two = eval(two);
    } else if (!two) {
      console.log(widgetName + 'に実装エラーがあります。widgetの継承元の記述は「$.wap.XXX || \'$.wap.XXX\'」のように記述してください。');
      return;
    };

    if (!two && three) {//継承元がundefinedな場合
      if (retry) {
        setTimeout(function(){
          console.log('依存性の解決に少し苦戦しています。document.readyで参照エラーが出た場合は佐藤廣までどうぞ。');
          proxiedWidgetFunction(widgetName, two || sTwo, three, retry ? ++retry : 1);
        },0);
      } else {
        //リトライではないときは他のdocument.readyの時点で使えるようにするために1回だけ頑張る。
        $(function(){
          proxiedWidgetFunction(widgetName, two || sTwo, three, retry ? ++retry : 1);
        });
      }
      return;
    }
    if (retry) {
      console.log(widgetName + 'は無事に依存性が解決されました。')
    }
    return original(widgetName, two, three);
  }
  $.extend(proxiedWidgetFunction, original);
})(jQuery);

/*
 * 各ページで作るアプリケーションのタイプ別に継承元を選んで作ることで、統一された動きを簡単に実装できます。
 */

(function($) {
  $.widget('wap.abstractApp', {
    options: {
    },

    _create: function() {
      var that = this;
      var init = function() {
        that._buildPageInternal();
        that._buildPage();
        that._bindEventInternal();
        that._bindEvent();
      }
      console.log(document.readyState);
      if (document.readyState == 'complete') init();
      else $(init);
    },

    _destroy: function() {
    },

    _buildPage: function() {
      console.log('_buildPageメソッドを定義して、そこで画面要素の構築をしてください。');
    },

    _bindEvent: function() {
      console.log('_bindEventメソッドを定義して、そこで各種イベントを設定してください。');
    },

    _buildPageInternal: function() {
    },

    _bindEventInternal: function() {
    }

  });

  $(function() {
    //アプリケーションに対応するクラスがapplicationという名前であると仮定してインスタンス化
    if (!$.wap.application) return;
    $(document).application();
    window.app = $(document).data('wapApplication');//デバッグ用
  });

}(jQuery));

(function($) {
  $.widget('wap.inputApp', $.wap.abstractApp, {

    options: {
    },

    _create: function() {
      this._super();
    },

    _buildPageInternal: function() {
      $(document.body).form({});
      this.formController = $(document.body).data('wapForm');
    },

    _bindEventInternal: function() {
    }
  });

}(jQuery));

var AutocompleteSetting = AutocompleteSetting || {};

AutocompleteSetting = function(nameArg, dataArg , key) {
  this.colNames = [];
  this.name = nameArg;
  this.data = dataArg;
  this.key = key ? key : 'value';

  this.hira2KataColumns_ = [];
  this.hira2RomanColumns_ = [];

  this.bloodhoundOptions = {
    datumTokenizer : AutocompleteSetting.getColWordsTokenizer(this.colNames),
    queryTokenizer : Bloodhound.tokenizers.whitespace,
    // limit : 4,
    local : AutocompleteSetting.getLocal(this.data),
    vacantQueryLimit : 0,
    localFilter : null  // expand get method
  };

  this.bloodhound = {};

};

AutocompleteSetting.getLocal = function(data) {
  var tmpLocal = data;

  if (typeof data[0] == 'string') {
    tmpLocal = $.map(data, function(val) {
      return {
        value : val
      };
    });
  }

  return tmpLocal;
};

AutocompleteSetting.getColWordsTokenizer = function(colNames) {
  var recursivelyTokenize = function(data, result) {
    if (data instanceof Object) {
      $.each(data, function(key, val) {
        recursivelyTokenize(val, result);
      });
    } else {
      Array.prototype.push.apply(result, Bloodhound.tokenizers.whitespace(data));
    }
  };
  return function(data) {
    var res = [];
    if (colNames.length == 0) {
      for ( var col in data) {
        colNames.push(col);
      }
    }
    for (var i = 0; i < colNames.length; i++) {
      var key = colNames[i];
      if (!!data[key]) {
        recursivelyTokenize(data[key], res);
      }
    }
    return res;
  };
};

AutocompleteSetting.prototype.convertAndAddColumns = function() {
  if (this.hira2KataColumns_.length + this.hira2RomanColumns_.length == 0) {
    return;
  }

  var functions = [];
  if (!!this.hira2KataColumns_) {
    functions.push(function(datum) {
      for (var j = 0; j < this.hira2KataColumns_.length; j++) {
        var hirakatacols = this.hira2KataColumns_[j];
        datum[hirakatacols + "_autoCompleteConverted%kata"] = hira2Kata(datum[hirakatacols]);
      }
    }.bind(this));
  }

  if (!!this.hira2RomanColumns_) {
    functions.push(function(datum) {
      for (var j = 0; j < this.hira2RomanColumns_.length; j++) {
        var hiraromancols = this.hira2RomanColumns_[j];
        datum[hiraromancols + "_autoCompleteConverted%hebon"] = hira2Roman.hebon(datum[hiraromancols]);
        datum[hiraromancols + "_autoCompleteConverted%kunrei"] = hira2Roman.kunrei(datum[hiraromancols]);
      }
    }.bind(this));
  }
  if (functions.length > 0) {
    for (var i = 0; i < this.bloodhoundOptions["local"].length; i++) {
      var datum = this.bloodhoundOptions["local"][i];
      for (var j = 0; j < functions.length; j++) {
        functions[j](datum);
      }
    }
  }
};

AutocompleteSetting.prototype.getOptions = function() {
  this.convertAndAddColumns();
  this.bloodhound = new Bloodhound(this.bloodhoundOptions);
  this.bloodhound.initialize();
  this.options = {
    name : this.name,
    displayKey : this.displayKey ? this.displayKey : function(stocks) {
      var rst = $.map(stocks, function(val, key) {
        return val;
      }).join(' ');
      return rst;
    },
    templates : this.templates,
    source : this.bloodhound.ttAdapter()
  };

  return this.options;
};

AutocompleteSetting.prototype.reinitSettingBloodhound = function() {
  this.convertAndAddColumns();
  this.bloodhound.clear();
  this.bloodhound.initialize(true);
};

AutocompleteSetting.prototype.setLimit = function(limit) {
  return this.bloodhoundOptions.limit = limit;
};

AutocompleteSetting.prototype.setQueryTokenizer = function(queryTokenizer) {
  return this.bloodhoundOptions.queryTokenizer = queryTokenizer;
};

AutocompleteSetting.prototype.setDatumTokenizer = function(datumTokenizer) {
  return this.bloodhoundOptions.datumTokenizer = datumTokenizer;
};

AutocompleteSetting.prototype.setLocal = function(local) {
  return this.bloodhoundOptions.setLocal = local;
};

AutocompleteSetting.prototype.setDisplayKey = function(displayKey) {
  return this.displayKey = displayKey;
};

AutocompleteSetting.prototype.setTemplates = function(templates) {
  return this.templates = templates;
};

AutocompleteSetting.prototype.setColNames = function(colNames) {
  return this.colNames = colNames;
};

AutocompleteSetting.prototype.setHira2KataColumns = function(colNames) {
  return this.hira2KataColumns_ = colNames;
};

AutocompleteSetting.prototype.setHira2RomanColumns = function(colNames) {
  return this.hira2RomanColumns_ = colNames;
};

AutocompleteSetting.prototype.setVacantQueryLimit = function(vacantQueryLimit) {
  return this.bloodhoundOptions.vacantQueryLimit = vacantQueryLimit;
};

AutocompleteSetting.prototype.setHistoryFilter = function(historyData) {

  var key = this.key;
  var history = historyData.getHistory();
  this.bloodhound.localFilter = function(matches) {
    var array = [];
    for (var i = 0; i < matches.length; i++) {
      var value = matches[i][key];
      if (history[value]) {
        continue;
      }
      array.push(matches[i]);
    }
    return array;
  };
};

(function($) {
  $.widget('wap.autocomplete', $.wap.abstractWidget, {

    options : {
      settingParamList : null,
      autoInitialize : true,
      autocompleteSettings : null,
      historyData : null,
      typeaheadOptions : null,
      typeaheadSettings : null,
      hint : false
    },

    _create : function() {
      this._super();

      if (!this.options.settingParamList) {
        this.options.settingParamList = [];
      }
      if (!this.options.autocompleteSettings) {
        this.options.autocompleteSettings = {};
      }
      if (!this.options.historyData) {
        this.options.historyData = [];
      }
      if (!this.options.typeaheadSettings) {
        this.options.typeaheadSettings = {};
      }
      if (!this.options.typeaheadOptions) {
        this.options.typeaheadOptions = [];
      }

      for (var i = 0; i < this.options.settingParamList.length; i++) {
        var tmpObj = this.options.settingParamList[i];
        var setting = new AutocompleteSetting(tmpObj['name'], tmpObj['data'], tmpObj['key']);
        this.options.autocompleteSettings[tmpObj['name']] = setting;
      }
      var that = this;
      if(Array.isArray(this.options.limit)){
        this.options.limit.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setLimit(arr.limit);
        })
      }else if(this.options.limit){
        this.options.autocompleteSettings[this.options.limit.name].setLimit(this.options.limit.limit);
      };
      if(Array.isArray(this.options.datumTokenizer)){
        this.options.datumTokenizer.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setDatumTokenizer(arr.func);
        })
      }else if(this.options.datumTokenizer){
        this.options.autocompleteSettings[this.options.datumTokenizer.name].setDatumTokenizer(this.options.datumTokenizer.func);
      };
      if(Array.isArray(this.options.queryTokenizer)){
        this.options.queryTokenizer.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setQueryTokenizer(arr.func);
        })
      }else if(this.options.queryTokenizer){
        this.options.autocompleteSettings[this.options.queryTokenizer.name].setQueryTokenizer(this.options.queryTokenizer.func);
      };
      if(Array.isArray(this.options.displayKey)){
        this.options.displayKey.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setDisplayKey(arr.key);
        })
      }else if(this.options.displayKey){
        this.options.autocompleteSettings[this.options.displayKey.name].setDisplayKey(this.options.displayKey.key);
      };
      if(Array.isArray(this.options.template)){
        this.options.template.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setTemplates(arr.func);
        })
      }else if(this.options.template){
        this.options.autocompleteSettings[this.options.template.name].setTemplates(this.options.template.func);
      };
      if(Array.isArray(this.options.colNames)){
        this.options.colNames.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setColNames(arr.colNames);
        })
      }else if(this.options.colNames){
        this.options.autocompleteSettings[this.options.colNames.name].setColNames(this.options.colNames.colNames);
      };
      if(Array.isArray(this.options.hira2KataColumns)){
        this.options.hira2KataColumns.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setHira2KataColumns(arr.colNames);
        })
      }else if(this.options.hira2KataColumns){
        this.options.autocompleteSettings[this.options.hira2KataColumns.name].setHira2KataColumns(this.options.hira2KataColumns.colNames);
      };
      if(Array.isArray(this.options.hira2RomanColumns)){
        this.options.hira2RomanColumns.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setHira2RomanColumns(arr.colNames);
        })
      }else if(this.options.hira2RomanColumns){
        this.options.autocompleteSettings[this.options.hira2RomanColumns.name].setHira2RomanColumns(this.options.hira2RomanColumns.colNames);
      };
      if(Array.isArray(this.options.vacantQueryLimit)){
        this.options.vacantQueryLimit.forEach(function(arr){
          that.options.autocompleteSettings[arr.name].setVacantQueryLimit(arr.limit);
        })
      }else if(this.options.vacantQueryLimit){
        this.options.autocompleteSettings[this.options.vacantQueryLimit.name].setVacantQueryLimit(this.options.vacantQueryLimit.limit);
      };

      if (this.options.autoInitialize) {
        this.autocompleteInitialize();
      }

      if (this.options.focusFirstItem){
        this.element.eq(0).on('click focus keydown keyup',function(e){
          if(e.keyCode && (e.keyCode === 38 || e.keyCode === 40 || e.keyCode === 13 || e.keyCode === 9)){
            return;
          };
          var $parent = $(this).parent();
          var $suggests = $parent.find('.tt-suggestion');
          if($suggests && $suggests.length > 0){
            if($parent.find('.tt-cursor').length === 0){
              $suggests.eq(0).addClass('tt-cursor');
            };
          };
        });       
      };
    },

    _destroy : function() {
    },

    getAutocompleteSettings : function() {
      return this.options.autocompleteSettings;
    },

    // 最初に追加したデータの変更は可能だが、途中から新規の検索ソースの追加には未対応。
    // モックでは検索に必要になるものは最初に渡しておいてください
    setParamList : function(settingParamList) {
      for (var i = 0; i < settingParamList.length; i++) {
        var tmpObj = settingParamList[i];
        var setting = new AutocompleteSetting(tmpObj['name'], tmpObj['data'], tmpObj['key']);

        if (this.options.autocompleteSettings[tmpObj['name']]) {
          this.options.autocompleteSettings[tmpObj['name']].bloodhoundOptions.local = setting.bloodhoundOptions.local;
          this.options.autocompleteSettings[tmpObj['name']].bloodhound.local = setting.bloodhoundOptions.local;
          this.options.autocompleteSettings[tmpObj['name']].data = setting.bloodhoundOptions.local;
          this.options.autocompleteSettings[tmpObj['name']].reinitSettingBloodhound();
          if (this.options.historyData.length > 0) {
            this.options.autocompleteSettings[tmpObj['name']].setHistoryFilter(this.options.historyData);
          }
        } else {
          // ※途中からの新規検索データの追加は未対応
          this.options.autocompleteSettings[tmpObj['name']] = setting;
          this.options.typeaheadOptions.push(this.options.autocompleteSettings[tmpObj['name']].getOptions());
        }
      }
    },

    setLimit : function(name, limit) {
      this.options.autocompleteSettings[name].setLimit(limit);
    },

    setDatumTokenizer : function(name, datumTokenizer) {
      this.options.autocompleteSettings[name].setDatumTokenizer(datumTokenizer);
    },

    setQueryTokenizer : function(name, queryTokenizer) {
      this.options.autocompleteSettings[name].setQueryTokenizer(queryTokenizer);
    },

    setDisplayKey : function(name, displayKey) {
      this.options.autocompleteSettings[name].setDisplayKey(displayKey);
    },

    setTemplates : function(name, templates) {
      this.options.autocompleteSettings[name].setTemplates(templates);
    },

    setColNames : function(name, colNames) {
      this.options.autocompleteSettings[name].setColNames(colNames);
    },

    setHira2KataColumns : function(name, colNames) {
      this.options.autocompleteSettings[name].setHira2KataColumns(colNames);
    },

    setHira2RomanColumns : function(name, colNames) {
      this.options.autocompleteSettings[name].setHira2RomanColumns(colNames);
    },

    setVacantQueryLimit : function(name, vacantQueryLimit) {
      this.options.autocompleteSettings[name].setVacantQueryLimit(vacantQueryLimit);
    },

    getHistoryData : function() {
      return this.options.historyData;
    },

    _setHistoryFilter : function(historyData) {
      for ( var optionName in this.options.autocompleteSettings) {
        this.options.autocompleteSettings[optionName].setHistoryFilter(historyData);
      }
    },

    _removeHistoryEventBind : function() {
      this.element.parents().find('.tt-dropdown-menu .tt-dataset-history').on('click', '.remove-history-button', {
        autocomplete : this,
        history : this.options.historyData
      }, function(e) {
        e.preventDefault();
        e.stopPropagation();
        var button = this;

        var historyValue = $(button).parents('.tt-suggestion').data().ttValue;

        var history = e.data.history;
        history.removeHistory(historyValue);
        history.refreshHistory();

        e.data.autocomplete._setHistoryFilter(history);
        $(button).parents('.tt-suggestion').remove();
      });
    },

    getBasicSetting : function() {
      var typeaheadBasicSetting = {
        hint : false,
        highlight : true,
        minLength : 0,
        autosuggest : false
      };
      if (this.options.hint == true) {
        typeaheadBasicSetting.hint = true;
      }
      if (this.options.autosuggest == true) {
        typeaheadBasicSetting.autosuggest = true;
      }
      if (this.options.typeaheadSettings) {
        $.extend(typeaheadBasicSetting, this.options.typeaheadSettings);
      }
      return typeaheadBasicSetting;
    },

    autocompleteInitialize : function() {
      var typeaheadBasicSetting = this.getBasicSetting();

      if (Object.keys(this.options.historyData).length !== 0) {
        this.options.typeaheadOptions.push(this.options.historyData.getTypeaheadOptions());
      }

      for ( var optionName in this.options.autocompleteSettings) {
        this.options.typeaheadOptions.push(this.options.autocompleteSettings[optionName].getOptions());
        if (Object.keys(this.options.historyData).length !== 0) {
          this._setHistoryFilter(this.options.historyData);
        }
      }

      var typeaheadObj = this.element.typeahead(typeaheadBasicSetting, this.options.typeaheadOptions);

      // bind input history event
      if (Object.keys(this.options.historyData).length !== 0) {
        typeaheadObj.bind('keydown', {
          autocomplete : this,
          historyData : this.options.historyData
        }, function(e) {
          var keyCode = e.keyCode;
          switch (keyCode) {
          case 39: // right
            break;
          case 37: // left
            break;
          case 9: // tab
            enterAction(this, e);
            break;
          case 38: // up
            break;
          case 40: // down
            break;
          case 27: // escape
            break;
          case 13: // enter
            enterAction(this, e);
            break;
          default:
            break;
          }

          function enterAction(typeahead, event) {
            if (event.data.historyData.isAutoSave == true) {
              event.data.historyData.addHistory($.trim(typeahead.value));
              event.data.historyData.refreshHistory();
              event.data.autocomplete._setHistoryFilter(event.data.historyData);
            }
          }
        });

        this._removeHistoryEventBind();
      }
    },

    val : function(value) {
      this.element.typeahead('val', value);
    }
  });

  // クラス名を使った自動インスタンス化はdocument.readyで行うこと。
  $(function() {
    // ready 初期化
    // console.log("autocomplete");
  });

}(jQuery));
/**
 * バッジ
 */
(function($) {

  $.widget('wap.badge', $.wap.abstractWidget, {

    options : {
      colorType : '',
      iconClass : '',
      iconSize : '',
      roundingCount : true,
      value : '',
    },
    _colorType : {
      'default' : 'badge-default',
      'primary' : 'badge-primary',
      'secondary' : 'badge-secondary',
      'success' : 'badge-success',
      'info' : 'badge-info',
      'warning' : 'badge-warning',
      'danger' : 'badge-danger'
    },
    _iconColorType : {
      'default' : '#ec5956',
      'primary' : '#303641',
      'secondary' : '#ec5956',
      'success' : '#00a651',
      'info' : '#21a9e1',
      'warning' : '#fad839',
      'danger' : '#cc2424'
    },
    _iconClass : {
      'face-sad' : 'wap-icon-sad',
      'face-smiley' : 'wap-icon-smiley',
      'face-happy' : 'wap-icon-happy',
      'check' : 'wap-icon-checkmark-circle',
      'exclamation' : 'wap-icon-exclamation-sign',
      'question' : 'wap-icon-question-sign',
      'info' : 'wap-icon-info-sign'
    },
    _iconSize : {
      'size-tree' : 'font-size-l',
      'size-list' : 'font-size-ll',
      'size-info' : 'font-size-xl'
    },
    _type : {
      'number' : 'number',
      'text' : 'text',
      'icon' : 'icon'
    },

    _create : function() {
      this._super();
      var $elem = this.element;
      var opt = this.options;
      this._setDefaultValue(opt, $elem);
      this._setStaticSettings(opt, $elem);

      this._refresh(opt, $elem);
    },

    incrementCount : function() {
      var $elem = this.element;
      var opt = this.options;
      if (this.type != 'number') {
        return;
      }
      if (opt.value == '99+') {
        return;
      }
      opt.value = opt.value + 1;
      this._refresh(opt, $elem);
    },
    setColorType : function(colorType) {
      var $elem = this.element;
      var opt = this.options;
      opt.colorType = colorType;
      this._refresh(opt, $elem);
    },
    setIconClass : function(iconClass) {
      var $elem = this.element;
      var opt = this.options;
      opt.iconClass = iconClass;
      this._refresh(opt, $elem);
    },
    setIconSize : function(iconSize) {
      var $elem = this.element;
      var opt = this.options;
      opt.iconSize = iconSize;
      this._refresh(opt, $elem);
    },
    setRoundingCount : function(roundingCount) {
      var $elem = this.element;
      var opt = this.options;
      opt.roundingCount = roundingCount;
      this._refresh(opt, $elem);
    },
    setValue : function(value) {
      var $elem = this.element;
      var opt = this.options;
      if (this.type == 'icon') {
        return;
      }
      opt.value = value;
      if (this.type == 'number') {
        opt.value = parseInt(opt.value, 10);
        if (isNaN(opt.value)) {
          opt.value = 0;
        }
      }
      this._refresh(opt, $elem);
    },
    _getChangedOverThreeDigit : function(count) {
      if (count >= 100) {
        return '99+';
      }
      return count;
    },
    _destroy : function() {
    },
    _setDefaultValue : function(opt, $elem) {
      opt.value = $elem.text();
    },
    _setStaticSettings : function(opt, $elem) {
      this.overlap = $elem.data('overlap') != undefined ? $elem.data('overlap') : false;
      this.roundless = $elem.data('roundless') != undefined ? $elem.data('roundless') : false;
      this.type = $elem.data('type') ? $elem.data('type') : 'number';
    },
    _refresh : function(opt, $elem) {
      // 初期化処理
      $elem.text('');
      $elem.removeClass('badge');
      $elem.removeClass('badge-roundless');
      for ( var key in this._iconClass) {
        $elem.removeClass(this._iconClass[key]);
      }
      for ( var key in this._colorType) {
        $elem.removeClass(this._colorType[key]);
      }
      for ( var key in this._iconColorType) {
        $elem.removeClass(this._iconColorType[key]);
      }
      for ( var key in this._iconSize) {
        $elem.removeClass(this._iconSize[key]);
      }

      // 表示変更
      var type = this._type[this.type];
      $elem.addClass('badge');
      if (this.roundless) {
        $elem.addClass('badge-roundless');
      }
      if (type == 'icon') {
        opt.value = '';
        $elem.removeClass('badge');
        $elem.removeClass('badge-roundless');
        var iconClass = this._iconClass[opt.iconClass];
        if (iconClass) {
          $elem.addClass(iconClass);
        }
        var iconSize = this._iconSize[opt.iconSize];
        if (iconSize) {
          $elem.addClass(iconSize);
        } else {
          $elem.addClass(this._iconSize['size-list']);
        }
        var colorType = this._iconColorType[opt.colorType];
        if (colorType) {
          $elem.css('color', colorType);
        } else {
          $elem.css('color', this._iconColorType['default']);
        }
        $elem.text(opt.value);
      } else {
        opt.iconClass = '';
        opt.iconSize = '';
        var colorType = this._colorType[opt.colorType];
        if (colorType) {
          $elem.addClass(colorType);
        } else {
          $elem.addClass(this._colorType['default']);
        }
        if (type == 'number') {
          opt.value = parseInt(opt.value, 10);
          if (isNaN(opt.value)) {
            opt.value = 0;
          }
          $elem.text(opt.value);
          if (opt.roundingCount) {
            $elem.text(this._getChangedOverThreeDigit(opt.value));
          }
        } else {
          $elem.text(opt.value);
        }
      }

      // 位置変更
      if (this.overlap) {
        var $target = $elem.prev();
        if (!$target) {
          return;
        }
        $elem.addClass('badge-overlap');
        var targetPosition = $target.position();
        var targetWidth = $target.width();
        var targetHeightHalf = $target.height() / 2;
        $elem.css('top', targetPosition.top - targetHeightHalf);
        $elem.css('left', targetPosition.left + targetWidth);
      }
    }
  });

  // クラス名を使った自動インスタンス化はdocument.readyで行うこと。
  $(function() {
    $('.' + $.wap.badge.prototype.widgetFullName).badge();
  });

}(jQuery));
// 単純なボタンの基底クラス
(function($) {
  $.widget('wap.abstractButton', $.wap.abstractWidget, {
    options : {
      iconClass : undefined,
      iconPosition : 'head'
    },

    // コンストラクタ
    _create : function() {
      this._super();
      this.element.addClass('btn');
      if ($(this.element).attr('data-icon-class')) {
        this.options.iconClass = $(this.element).attr('data-icon-class');
      }
      if ($(this.element).attr('data-icon-position')) {
        this.options.iconPosition = $(this.element).attr('data-icon-position');
      }
      if (this.options.iconClass) {
        var iconDom = $('<i></i>').addClass(this.options.iconClass);
        if (this.options.iconPosition === 'tail') {
          $(this.element).append(iconDom);
        } else {
          $(this.element).prepend(iconDom);
        }

      }
    },
  });
}(jQuery));
(function($) {
  $.widget('wap.changeFontSizeButton', $.wap.abstractWidget, {
    options : {
      captions : [
        'S', 'M', 'L'
      ]
    },

    // コンストラクタ
    _create : function() {
      this._super();
      if (this.element.attr('data-captions')) {
        this.options.captions = this.element.attr('data-captions').split(',');
      }

      var $small = $('<button />').html(this.options.captions[0]).addClass('btn');
      var $middle = $('<button />').html(this.options.captions[1]).addClass('btn');
      var $large = $('<button />').html(this.options.captions[2]).addClass('btn');
      this.element.addClass('btn-group');
      this.element.append($small).append($middle).append($large);

      $small.on('click', function() {
        // TODO define outer css file
        $('body').css('font-size', '');
      });
      $middle.on('click', function() {
        // TODO implements
        $('body').css('font-size', '150%');
      });
      $large.on('click', function() {
        // TODO implements
        $('body').css('font-size', '180%');
      });
    },

    // デストラクタ
    _destroy : function() {
      this.element.html('');
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.changeFontSizeButton.prototype.widgetFullName;
    $('.' + autoInstantiationClass).changeFontSizeButton({});
  });

}(jQuery));

(function($) {
  $.widget('wap.dataCursorButton', $.wap.abstractWidget, {
    options : {
      // 次のデータボタンを表示
      useNext : true,
      // 前のデータボタンを表示
      usePrev : true,
      // ボタンのキャプション
      captions : [
        '前の書類へ', '次の書類へ'
      ],
      // データ読込関数
      prepareData : function(index) {
      },
      // データ表示関数（デフォルトの動作は受け取ったデータを走査して、データのキーと一致するid属性を持つ要素に値を入れる）
      // TODO フィールドコントローラを使うように修正
      showData : function(index, data) {
        for (key in data) {
          var $target = $('#' + key);
          if ($target.size() > 0) {
            $target.val(data[key]);
          }
        }
      }
    },

    // コンストラクタ
    _create : function() {
      this._super();
      if (this.element.attr('data-captions')) {
        this.options.captions = this.element.attr('data-captions').split(',');
      }
      if (this.element.attr('prepareData')) {
        this.options.prepareData = new Function('data', this.element.attr('prepareData'));
      }
      if (this.element.attr('showData')) {
        this.options.showData = new Function('data', this.element.attr('showData'));
      }
      this.resetIndex();

      var $prev = $('<button />').html(this.options.captions[0]).addClass('btn');
      var $next = $('<button />').html(this.options.captions[1]).addClass('btn').css("margin-left", "3px");
      this.element.append($prev).append($next);

      var that = this;
      $prev.on('click', function(ev) {
        var i = 0;
        if (that.index > 0) {
          i = --that.index;
        }
        var data = that.options.prepareData(i);
        that.options.showData(i, data);
      });
      $next.on('click', function(ev) {
        var i = ++that.index;
        var data = that.options.prepareData(i);
        that.options.showData(i, data);
      });
    },

    // デストラクタ
    _destroy : function() {
      this.element.html("");
    },

    // データカーソルのポジションを初期化します
    resetIndex : function() {
      this.index = 0;
    }

  });

  $(function() {
    var autoInstantiationClass = $.wap.dataCursorButton.prototype.widgetFullName;
    $('.' + autoInstantiationClass).dataCursorButton({});
  });

}(jQuery));

;/*
* 専用ボタン
* 基本的な挙動をまとめて定義したいボタンに関してこのファイルでまとめます。
* sato_hi
*/

(function($,global){

  /*
   * 上に戻るボタン
   * 開発者から完全に隠すので、クラス化まではしない。Closure化するときもApplicationの基底クラス等の1機能レベルになるはず。
   */
  function _initPageTopButton(){
    //page-topの要素をわざわざ画面に足している場合は、古いコードとみなして処理はしない。
    if ($('#page-top,.btn-page-top').length > 0) return;

    //var $button = $('<div class="btn-page-top"><i class="wap-icon-arrow-up"></i></div>');
    var $button = $('<div class="btn-page-top"><i class="wap-icon-page-up"></i></div>');
    $(document.body).append($button);

    $(document).scroll(function() {
      var that = $(this);
      if (that.scrollTop() > that.height() / 4 || that.scrollTop() > 1000) {
        $button.fadeIn();
      } else {
        $button.fadeOut();
      }
    }).on('click', '.btn-page-top', function goPageTop(e) {
      $('html,body').animate({
        scrollTop : 0
      }, 'fast');
    });
  }

  $(function() {
    _init();
  });

  function _init() {
    _initPageTopButton();
  }


})(jQuery, window);




(function($) {

  // jQuery plugin definition
  $.fn.reverseText = function(params) {

    // merge default and user parameters
    params = $.extend( {minlength: 0, maxlength: 99999}, params);

    // traverse all nodes
    this.each(function() {

      // express a single node as a jQuery object
      var $t = $(this);

      // find text
      var origText = $t.text(), newText = '';

      // text length within defined limits?
      if (origText.length >= params.minlength &&  origText.length <= params.maxlength) {

        // reverse text
        for (var i = origText.length-1; i >= 0; i--) newText += origText.substr(i, 1);
        $t.text(newText);

      }

    });

    // allow jQuery chaining
    return this;
  };

})(jQuery);
(function($) {
  $.widget('wap.fileDownloadButton', $.wap.abstractButton, {
    options : {
      fileName : undefined,
      fileBody : undefined,
      iconClass : 'wap-icon-download'
    },

    // コンストラクタ
    _create : function() {
      this._super();
      var that = this;
      $(this.element).on('click', function() {
        $this = $(this);
        that._downloadFile(that.options.fileBody || '', that.options.fileName);
      });
    },

    // デストラクタ
    _destroy : function() {
    },

    _downloadFile : function(fileBody, fileName) {
      // ファイルを作成
      var blob = new Blob([
        fileBody
      ], {
        type : "text/plain"
      });
      var a = document.createElement('a');
      a.download = fileName;
      a.href = window.URL.createObjectURL(blob);
      var ev = document.createEvent('MouseEvent');
      ev.initEvent("click", true, true);
      a.dispatchEvent(ev);
    },

    setFileName : function(fileName) {
      this.options.fileName = fileName;
    },

    setFileBody : function(fileBody) {
      this.options.fileBody = fileBody;
    }

  });

  $(function() {
    var autoInstantiationClass = $.wap.fileDownloadButton.prototype.widgetFullName;
    $('.' + autoInstantiationClass).fileDownloadButton({});
  });

}(jQuery));

(function($) {
  $.widget('wap.fileUploadButton', $.wap.abstractButton, {
    options : {
      encType : "UTF-8",
      accept : undefined,
      onUpload : function(data) {
        alert(data.target.result);
      },
      failUpload : function(file) {
      },
      size : 0,
      permitTypes : [],
      forbidTypes : [],
      iconClass : 'wap-icon-upload'
    },

    // コンストラクタ
    _create : function() {
      this._super();
      if (this.element.attr('onUpload')) {
        this.options.onUpload = new Function('data', this.element.attr('onUpload'));
      }
      this.options.forbidTypes = $.map(this.options.forbidTypes, function(forbidtype, index) {
        return forbidtype.toUpperCase();
      });
      this.options.permitTypes = $.map(this.options.permitTypes, function(permittype, index) {
        return permittype.toUpperCase();
      });
      this.$real = $('<input type="file" style="display:none;">');
      if (this.options.accept) {
        this.$real.attr('accept', this.options.accept);
      }
      $(document.body).append(this.$real);

      var self = this;

      this.$real.get(0).addEventListener("change", function(ev) {
        // File オブジェクトを取得
        var file = ev.target.files[0];
        var compare = new fileUploadRestrict.compareFile();
        var loadPermited = compare.permitLoad(file, self.options.size, self.options.permitTypes, self.options.forbidTypes);
        
        if (loadPermited) {
          var reader = new FileReader();
          // ファイルリーダー生成
          // イベントハンドラにディスパッチ
          reader.onload = self.options.onUpload;
          // 読み込み
          reader.readAsText(file, self.options.encType);
        } else {
          self.options.failUpload(file);
        } 
      }, false);

      $(this.element).on('click', function() {
        self.$real.click();
      });
    },

    // デストラクタ
    _destroy : function() {
      this.$real.remove();
    },

    setEncType : function(encType) {
      this.options.encType = encType;
    }

  });

  $(function() {
    var autoInstantiationClass = $.wap.fileUploadButton.prototype.widgetFullName;
    $('.' + autoInstantiationClass).fileUploadButton({});
  });

}(jQuery));

/*
 * @fileoverview conditions for restricting uploading files
 */
var fileUploadRestrict = fileUploadRestrict || {};

/**
* @constructor compareFile
*/
fileUploadRestrict.compareFile = function() {
	/**
    * @const {number} basic number between bytes and kb
    */
	this.SIZE_BASE = 1024;
};

/**
* check if file is legal to upload by given arguments.
* @param  {{lastModifiedDate: Date, size: number, name: string, type: string}} information of file, including lastModifiedDate, size, name and accept type
* @param  {number}  permitted max-size, if not larger than 0, means any size is ok
* @param  {Array.<string>}  file types that accepts
* @param  {Array.<string>}  file types that rejects
* @return {boolean} true: file is legal, false: file is illegal
*/
fileUploadRestrict.compareFile.prototype.permitLoad = function(file, size, permitTypes, forbidTypes) {
	var name = file.name.split('.');
    var fileType = name[name.length - 1].toUpperCase();
    var loadPermited = (size > 0 && file.size <= size * this.SIZE_BASE) || size <= 0;
    if (!loadPermited) {
    	return loadPermited;
    }
    loadPermited = loadPermited && ($.inArray(fileType, forbidTypes) === -1) && ($.inArray(fileType, permitTypes) !== -1 || permitTypes.length === 0);
    return loadPermited;
};
(function($) {
  $
      .widget(
          'wap.mailButton',
          $.wap.abstractButton,
          {
            options : {
              target : undefined,
              imageUrl : undefined,
              address : undefined,
              subject : undefined,
              mailBody : undefined,
              attachFiles : [],
              iconClass : 'wap-icon-envelope'
            },

            // コンストラクタ
            _create : function() {
              this._super();

              if (this.element.attr('data-attach-files')) {
                options.attachFiles = this.element.attr('data-attach-files').sprit(',');
              }

              this.$dialog = $('<div class="modal fade">'
                  + '<div class="modal-dialog">'
                  + '  <div class="modal-content">'
                  + '    <div class="modal-header">'
                  + '      <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>'
                  + '      <h4 class="modal-title">メール送信</h4>'
                  + '    </div>'
                  + '    <div class="modal-body">'
                  + '      <div style="float:left;">'
                  + '        <img id="target-image" src="#"></img>'
                  + '      </div>'
                  + '      <div style="float:left; margin-left:10px;">'
                  + '        <div id="target" style="margin-bottom:20px; font-size:120%;"></div>'
                  + '        <div id="target-section">製品開発本部　デザインDiv.　StadioA</div>'
                  + '        <div id="target-ext-phone">内線番号：3849</div>'
                  + '      </div>'
                  + '      <div style="clear:both; margin-bottom:20px;"></div>'
                  + '      <input type="text" id="subject" placeholder="件名を入力" style="width:100%; height:30px; margin-bottom:10px;"></input>'
                  + '      <textarea rows="10" id="mail-body" placeholder="本文を入力" style="width:100%; margin:auto; resize: vertical;"></textarea>'
                  + '    </div>'
                  + '    <div class="modal-footer">'
                  + '      <button type="button" class="btn btn-gray" data-dismiss="modal">キャンセル</button>'
                  + '      <button type="button" class="btn btn-info" data-dismiss="modal">送信</button>'
                  + '    </div>'
                  + '  </div>'
                  + '</div>'
                  + '</div>');
              $(document.body).append(this.$dialog);

              var that = this;
              $(this.element).on("click", function() {
                that._prepareMailData();
                that.$dialog.modal('show');
              });
            },

            // デストラクタ
            _destroy : function() {
              this.$dialog.remove();
            },

            _prepareMailData : function() {
              this.$dialog.find("#target").text(this.options.target);
              this.$dialog.find("#target-image").attr("src", this.options.imageUrl);
              this.$dialog.find("#subject").val(this.options.subject);
              this.$dialog.find("#mail-body").val(this.options.mailBody);
            },

            setTarget : function(target) {
              this.options.target = target;
            },

            setImageUrl : function(imageUrl) {
              this.options.imageUrl = imageUrl;
            },

            setAddress : function(address) {
              this.options.address = address;
            },

            setSubject : function(subject) {
              this.options.subject = subject;
            },

            setMailBody : function(mailBody) {
              this.options.mailBody = mailBody;
            },

            setAttachFiles : function(files) {
              this.options.attachFiles = failse;
            }
          });

  $(function() {
    var autoInstantiationClass = $.wap.mailButton.prototype.widgetFullName;
    $('.' + autoInstantiationClass).mailButton({});
  });

}(jQuery));

(function($) {
  $.widget('wap.printButton', $.wap.abstractButton, {
    options : {
      target : undefined,
      iconClass : 'wap-icon-print'
    },

    // コンストラクタ
    _create : function() {
      this._super();
      var that = this;
      $(this.element).on("click", function() {
        if (that.options.target) {
          var $target = $(that.options.target);
          // TODO 指定されたDOMのみプリントする @see jq-print
        } else {
          // ウインドウ全体をプリントする
          window.print();
        }
      });
    },

    // デストラクタ
    _destroy : function() {
    },

    setTarget : function(target) {
      this.options.target = target;
    }

  });

  $(function() {
    var autoInstantiationClass = $.wap.printButton.prototype.widgetFullName;
    $('.' + autoInstantiationClass).printButton({});
  });

}(jQuery));

/**
 * wap.pulldownButton
 * 
 * @author murata_d
 *
 */

(function($) {
  $.widget("wap.pulldownButton", $.wap.field || '$.wap.field', {

    options : {
      buttonHinttext : null,
      buttonHintarea : 'right',
      liShowhint : false,
      liHintarea : 'right',
      pulldownType : 'normal'
    },

    _create : function() {
      this._super({setRequired : this._setRequired});
      var that = this;
      this.buttonElement = this.element.find('button:first');
      this.actionBtn = this.element.find('button[data-activebtn="true"]');
      this.ulElement = this.element.find('ul:first');
      this.liElement = this.element.find('ul li');

      this._addBasicClass();
      if (this.options.buttonHinttext != null) {
        that._buttonFocusHint();
      }
      if (this.options.liShowhint) {
        that._liFocusHint();
      }
    },

    _destroy : function() {
      this.contentElement.remove();
    },

    _addBasicClass : function() {
      this.ulElement.addClass('dropdown-menu').attr('role','menu');
      if (this.options.pulldownType == "normal"){
        this.buttonElement.addClass('dropdown-toggle').attr('data-toggle','dropdown');
      }else if (this.options.pulldownType == "right"){
        this.actionBtn.addClass('dropdown-toggle').attr('data-toggle','dropdown');
      }else if (this.options.pulldownType == "left"){
        this.element.addClass('left-dropdown');
        this.actionBtn.addClass('dropdown-toggle').attr('data-toggle','dropdown');
      }
    },

    _buttonFocusHint : function() {
      this.buttonElement.attr('data-content', this.options.buttonHinttext).popover({
        delay : {
          show : 500,
          hide : 0
        },
        trigger : 'hover',
        placement : this.options.buttonHintarea
      });
    },

    _liFocusHint : function() {
      var li = this.liElement;
      var area = this.options.liHintarea;
      for (var i = 0; i < li.length; i++) {
        var hint = li.eq(i).attr('data-li-hint');
        li.eq(i).attr('data-content', hint).popover({
          delay : {
            show : 500,
            hide : 0
          },
          trigger : 'hover',
          placement : area
        });
      };
    },

    showHint : function() {
      var options = {
        trigger : 'manual',
        placement : this.options.hintarea
      };
      this.inputElement.popover(options).popover('show');
    },

    hideHint : function() {
      var options = {
        content : this.options.hinttext,
        trigger : 'manual',
        placement : this.options.hintarea
      };
      this.inputElement.popover(options).popover('hide');
    }
  });
}(jQuery));
/**
 * CheckBoxGroup
 * 
 * div要素を1Groupとして中の要素に対して操作します。
 * 
 * @author Hajime Kurakata
 */

(function($) {
  $.widget("wap.checkboxGroup", $.wap.abstractWidget, {

    // default-option
    options : {
      caption : "wap-checkboxGroup",
      checked : false, // initialize checked status
      id : {},
      value : {}
    },

    _create : function() {

      this._super();
      if (this.options.checked) {
        this.checked();
      }
      if (this.options.id.length > 0) {
        this.setCheckIdList(this.options.id);
      }
      if (this.options.value.length > 0) {
        this.setCheckValueList(this.options.value);
      }
      if (this.options.disabled) {
        this.disabled();
      }
    },

    clearAll : function() {
      this._checked(false);
    },

    checkAll : function() {
      this._checked(true);
    },

    _checked : function(checked) {
      this.element.find(":checkbox").prop("checked", checked);
      // expended CSS checkbox
      if (this.element.find(".wap-checkbox").length > 0) {
        this.element.find(".wap-checkbox").checkbox("checked", checked);
      }
    },

    isAllChecked : function(checked) {

      // all status = nothing checked property
      if (this.isContain(!checked)) {
        return false;
      }
      return true;
    },

    isContain : function(checked) {

      var ret = _isCheckboxContain(this.element.find(":checkbox"), checked);
      if (!ret) {
        ret = _isCheckboxCssContain(this.element.find(".wap-checkbox"), checked);
      }
      return ret;

      function _isCheckboxContain(items, checked) {

        var ret = false;
        for (var i = 0; i < items.length; i++) {
          if ($(items[i]).prop('checked') == checked) {
            ret = true;
            break;
          }
        }
        return ret;
      }

      function _isCheckboxCssContain(items, checked) {

        var ret = false;
        for (var i = 0; i < items.length; i++) {
          // TODO to property
          if ($(items[i]).checkbox("isChecked") == checked) {
            ret = true;
            break;
          }
        }
        return ret;
      }
    },

    getCheckedIdList : function() {
      return this.getCheckedList("id");
    },

    getCheckedValueList : function() {
      return this.getCheckedList("value");
    },

    getCheckedList : function(tag) {

      var boxList = _getCheckedBoxList(this.element.find(":checkbox"), tag);
      var grpList = _getCheckedCssList(this.element.find(".wap-checkbox"), tag);
      var list = boxList.concat(grpList);
      return list;

      function _getCheckedBoxList(items, tag) {

        var list = new Array();
        for (var i = 0; i < items.length; i++) {
          if ($(items[i]).prop('checked')) {
            list.push($(items[i]).attr(tag));
          }
        }
        return list;
      }

      function _getCheckedCssList(items, tag) {

        var list = new Array();
        for (var i = 0; i < items.length; i++) {
          if ($(items[i]).checkbox("isChecked")) {
            list.push($(items[i]).attr(tag));
          }
        }
        return list;
      }
    },

    setCheckIdList : function(list) {
      this.setPropertyIdList("checked", list);
    },

    setDisableIdList : function(list) {
      this.setPropertyIdList("disabled", list);
    },

    setPropertyIdList : function(property, list) {
      for (var i = 0; i < list.length; i++) {
        var item = $("#" + list[i]);
        if (item.hasClass("wap-checkbox")) {
          item.checkbox(property, true);
        } else {
          item.prop(property, true);
        }
      }
    },

    focus : function(value) {
      var selectorString;
      if (null != value) {
        selectorString = '[value=' + value + ']';
      } else {
        selectorString = ':first';
      }
      this.element.find(":checkbox" + selectorString).focus();
      // expended CSS checkbox
      if (this.element.find(".wap-checkbox" + selectorString).length > 0) {
        this.element.find(".wap-checkbox" + selectorString).focus();
        ;
      }
    },

    setCheckValueList : function(list) {
      this.setPropertyValueList("checked", list);
    },

    setDisableValueList : function(list) {
      this.setPropertyValueList("disabled", list);
    },

    setPropertyValueList : function(property, list) {

      for (var i = 0; i < list.length; i++) {

        var items = this.element.find(":checkbox");
        for (var j = 0; j < items.length; j++) {
          if ($(items[j]).attr("value") == list[i]) {
            $(items[j]).prop(property, true);
          }
        }
        var items = this.element.find(".wap-checkbox");
        for (var j = 0; j < items.length; j++) {
          if ($(items[j]).attr("value") == list[i]) {
            $(items[j]).checkbox(property, true);
          }
        }
      }
    },

    disabled : function(disabled) {
      this.element.find(":checkbox").prop("disabled", disabled);
      if (this.element.find(".wap-checkbox").length > 0) {
        this.element.find(".wap-checkbox").checkbox("disabled", disabled);
      }
    },
  });

  $(function() {
    var autoInstantiationClass = $.wap.checkboxGroup.prototype.widgetFullName;
    $('.' + autoInstantiationClass).checkboxGroup();
  });
}(jQuery));

/**
 * CheckBox
 * 
 * @author Hajime Kurakata
 */

(function($) {
  $.widget("wap.checkbox", $.wap.abstractWidget, {

    // default-option
    options : {
      caption : 'wap-checkbox',
      on : "wap-icon-check",
      off : "wap-icon-check-empty",
      checked : "false"
    },

    _create : function() {

      this._super();

      var element = $(this.element);
      this._setCheckeActiveClass(element, this.options);
      this._setOnClickFunction(element, this.options);
      this._setTabIndex();
    },

    _setCheckeActiveClass : function(element, options) {

      if (options.checked == true) {
        element.addClass(options.on);
      } else {
        element.addClass(options.off);
      }
    },

    _setOnClickFunction : function(element, options) {
      var that = this;
      element.on('click keyup', function(ev) {
        if (ev.type === 'keyup' && ev.keyCode !== 32) {
          return;
        }
        var tag = $(ev.target);
        if (!options.disabled) {
          if (tag.hasClass(options.on)) {
            tag.addClass(options.off).removeClass(options.on);
          } else {
            tag.addClass(options.on).removeClass(options.off);
          }
          that._trigger('click');
        }
      });
    },

    _setTabIndex : function() {
      if (!this.element.attr('tabindex')) {
        this.element.attr('tabindex', 0);
      }
    },

    isChecked : function() {

      var ret = false;
      if (this.element.hasClass(this.options.on)) {
        ret = true;
      }
      return ret;
    },

    checked : function(checked) {
      if (checked) {
        if (this.element.hasClass(this.options.off)) {
          this.element.addClass(this.options.on).removeClass(this.options.off);
        }
      } else {
        if (this.element.hasClass(this.options.on)) {
          this.element.addClass(this.options.off).removeClass(this.options.on);
        }
      }
    },

    disabled : function(disabled) {
      if (disabled) {
        this.element.checkbox("disable");
      } else {
        this.element.checkbox("enable");
      }
    },
  });

  $(function() {
    var autoInstantiationClass = $.wap.checkbox.prototype.widgetFullName;
    $('.' + autoInstantiationClass).checkbox();
  });
}(jQuery));

/**
 * @fileoverview Color Swatch Component.
 * @author tsujii_n
 * 
 * Copyright (C) 2014 Works Applications Co., Ltd. All rights reserved.
 * 
 * Inspired from Very simple jQuery Color Picker https://github.com/tkrotoff/jquery-simplecolorpicker Copyright (C)
 * 2012-2013 Tanguy Krotoff <tkrotoff@gmail.com>
 */

(function($) {
  // ------------------------------------------------------------------------
  // constants
  // ------------------------------------------------------------------------
  var TYPE = 'wap.colorSwatch', //
  TYPE_BOOLEAN = 'boolean', //
  TYPE_STRING = 'string', //

  CLS_COLOR = '.color', //
  CLS_ICON = '.icon', //
  CLS_PICKER = '.picker', //

  RAWCLS_SELECTED = 'selected', //
  ATTR_DATA_COLOR_CLASS = 'data-color-class', //

  EVENT_CLICK_ = 'click.', //
  EVENT_MOUSEDOWN_ = 'mousedown.', //
  EVENT_CHANGE = 'change', //

  OPTION_KEYS = [
    'selectedColorClass', 'selectedIconClass'
  ]; //

  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  $.widget(TYPE, $.wap.abstractWidget, {

    /**
     * options.
     */
    options : {
      /** @type {String} Selected background-color class. */
      selectedColorClass : '',

      /** @type {String} Selected icon class. */
      selectedIconClass : ''
    },

    /**
     * @constructor
     */
    _create : function() {
      var self = this; //

      this._readOptionsFromAttribute();
      this.$iconElement = this.element.children(CLS_ICON);
      this.$pickerElement = this.element.children(CLS_PICKER);

      this.selectedClass = RAWCLS_SELECTED + ' ' + this.options.selectedIconClass;

      if (this.$iconElement.length > 0 && this.$pickerElement.length > 0) {
        this.$iconElement.on(EVENT_CLICK_ + TYPE, $.proxy(this._showPicker, this));
        $(document).on(EVENT_MOUSEDOWN_ + TYPE, $.proxy(this._hidePicker, this));
        this.$pickerElement.on(EVENT_MOUSEDOWN_ + TYPE, $.proxy(this._pickerMousedown, this));
      }

      if ('' !== this.options.selectedColorClass) {
        this.selectedColorClass(this.options.selectedColorClass, true);
      }
      this.element.find(CLS_COLOR).each(function() {
        var $colorElement = $(this), //
        colorClass = $colorElement.attr(ATTR_DATA_COLOR_CLASS); //

        $colorElement.addClass(colorClass);
        $colorElement.on(EVENT_CLICK_ + TYPE, $.proxy(self._colorSpanClicked, self));
      });

    },

    // ----------------------------------------------------------------------
    // public methods
    // ----------------------------------------------------------------------
    /**
     * (accessor) Get/Set selected color class name.
     * 
     * @param {String} opt_className Set selected color class if specified.
     * @param {boolean} opt_dontTriggerChange If specfied and true, 'change' event is not triggered.
     * @returns {String} Selected color class name
     */
    selectedColorClass : function(opt_className, opt_isTriggerChange) {
      if (undefined !== opt_className) {
        var $colorElement = this.element.find(CLS_COLOR + '[' + ATTR_DATA_COLOR_CLASS + '="' + opt_className + '"]');
        if ($colorElement.length > 0) {
          this._selectColor($colorElement);
          if (!opt_isTriggerChange) {
            this.element.trigger(EVENT_CHANGE);
          }
        }
      }

      return this.options.selectedColorClass;
    },

    // ----------------------------------------------------------------------
    // private methods
    // ----------------------------------------------------------------------
    /**
     * destructor.
     */
    _destroy : function() {
      var typeEvent = '.' + TYPE;

      this.element.find(CLS_COLOR).off(typeEvent);
      this.$iconElement.off(typeEvent);
      $(document).off(typeEvent);
    },

    /**
     * Selects the given color class.
     * 
     * @private
     */
    _selectColor : function($colorElement) {
      var oldColorClass = this.options.selectedColorClass, //
      newColorClass = $colorElement.attr(ATTR_DATA_COLOR_CLASS); //

      this.options.selectedColorClass = newColorClass;

      // Mark this element as the selected one
      $colorElement.siblings().removeClass(this.selectedClass);
      $colorElement.addClass(this.selectedClass);

      this.element.attr(ATTR_DATA_COLOR_CLASS, newColorClass);

      if (this.$iconElement.length > 0) {
        this.$iconElement.removeClass(oldColorClass).addClass(newColorClass);
        this._hidePicker();
      }
    },

    /**
     * (action) Color is clicked.
     * 
     * @param {jQuery.Event} event
     * @private
     */
    _colorSpanClicked : function(event) {
      this._selectColor($(event.target));
      this.element.trigger(EVENT_CHANGE);
    },

    // ----------------------------------------------------------------------
    // private methods (picker)
    // ----------------------------------------------------------------------
    /**
     * (action) Show picker.
     * 
     * @param {jQuery.Event} event
     */
    _showPicker : function(event) {
      this.$pickerElement.show();
    },

    /**
     * (action) Hide picker.
     * 
     * @param {jQuery.Event} event
     */
    _hidePicker : function(event) {
      this.$pickerElement.hide();
    },

    /**
     * (action) Mouse down on picker element
     * 
     * @param {jQuery.Event} event
     */
    _pickerMousedown : function(event) {
      // stop propagation to avoid to hide picker.
      event.stopPropagation();
      event.preventDefault();
    },

    // ----------------------------------------------------------------------
    // private methods (for options)
    // ----------------------------------------------------------------------
    /**
     * Read options from DOM attributes.
     * 
     * @private
     */
    _readOptionsFromAttribute : function() {
      var self = this;
      $.each(OPTION_KEYS, function(index, value) {
        var dataKey = 'data-' + OPTION_KEYS[index], //
        attr = self.element.attr(dataKey); //

        if (attr) {
          if (self._isBooleanLike(attr)) {
            attr = self._toBoolean(attr);
          }
          self.options[OPTION_KEYS[index]] = attr;
        }
      });
    },

    /**
     * (predicate) Check if value is like boolean.
     * 
     * @param {Any} value
     * @returns {boolean} true if value is boolean or like boolean string.
     * @private
     */
    _isBooleanLike : function(value) {
      var type = typeof (value);

      if (TYPE_BOOLEAN === type) {
        return true;
      }

      if (TYPE_STRING === type) {
        value = value.toLowerCase();
        return 'true' === value || 'false' === value;
      }

      return false;
    },

    /**
     * Convert value to boolean.
     * 
     * @param {Any} value.
     * @returns {boolean} converted value.
     * @private
     */
    _toBoolean : function(value) {
      var type = typeof (value);

      if (TYPE_BOOLEAN === type) {
        return value;
      }

      if (TYPE_STRING === type) {
        return 'false' !== value.toLowerCase();
      }

      return !!value;
    }

  });

  // ------------------------------------------------------------------------
  // automatically initialize widget.
  // ------------------------------------------------------------------------
  $(function() {
    var autoInstantiationClass = $.wap.colorSwatch.prototype.widgetFullName;
    $('.' + autoInstantiationClass).colorSwatch();
  });

})(jQuery);

/**
 * @fileoverview Context Menu Component.
 * @author tsujii_n
 * 
 * Copyright (C) 2014 Works Applications Co., Ltd. All rights reserved.
 */

(function($) {
  // ------------------------------------------------------------------------
  // constants
  // ------------------------------------------------------------------------
  var TYPE = 'wap.contextMenu', //
  EVENT_CLICK_ = 'click.', //
  EVENT_MENU_SELECTED_ = 'menu-selected.', //

  TAG_LI = 'li', //

  RAWCLS_DISABLED = 'disabled'; //

  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  $.widget(TYPE, $.wap.abstractWidget, {

    /**
     * options.
     */
    options : {
      /** @type {String} Menu triggering event. */
      eventOn : 'contextmenu',

      /** @type {String} Selector to context menu element. */
      menuSelector : '',
    },

    /**
     * @constructor
     */
    _create : function() {
      this._enterDocument();
    },

    // ----------------------------------------------------------------------
    // public methods
    // ----------------------------------------------------------------------
    /**
     * (action) Show menu on event at mouse cursor position.
     * 
     * @param {jQuery.Event} event
     */
    showMenuOnEvent : function(event) {
      var self = this;
      var $menuElement = $(this.options.menuSelector);
      var menuParentOffset = $menuElement.parent().offset();

      // show menu
      $menuElement.css({
        position : 'absolute',
        left : this._getLeftLocation(event) - menuParentOffset.left,
        top : this._getTopLocation(event) - menuParentOffset.top
      }).show();
      
      // make sure menu closes on any click
      setTimeout(function(){
        $(document).on(EVENT_CLICK_ + TYPE, function() {
          console.log('hide:'+event.target.id+' type:'+event.type);
          $(self.options.menuSelector).hide();
          $(this).off(EVENT_CLICK_ + TYPE);
        });        
      }, 1);// immediate bind causes mousedwon(mouseup) not to show context-menu

      // bind menu selected event
      $menuElement.off(EVENT_CLICK_ + TYPE).on(EVENT_CLICK_ + TYPE, function(event2) {
        var isDisabledMenuItem = $(event2.target).closest(TAG_LI).hasClass(RAWCLS_DISABLED);
        if (isDisabledMenuItem) {
          return false;
        }

        $menuElement.hide();

        self.element.trigger(EVENT_MENU_SELECTED_ + TYPE, [
          event.target, event2.target
        ]);
      });

      return false;
    },

    // ----------------------------------------------------------------------
    // private methods
    // ----------------------------------------------------------------------
    /**
     * Bind events.
     * 
     * @private
     */
    _enterDocument : function() {
//      var self = this;
      this.element.on(this.options.eventOn, $.proxy(this.showMenuOnEvent, this));

      // make sure menu closes on any click
//      $(document).on(EVENT_CLICK_ + TYPE, function() {
//        $(self.options.menuSelector).hide();
//      });
    },

    /**
     * destructor.
     * 
     * @private
     */
    _destroy : function() {
      $(document).off('.' + TYPE);
    },

    /**
     * Get left location of which menu should show.
     * 
     * @return {Number} left location.
     * @private
     */
    _getLeftLocation : function(event) {
      var mouseClientX = event.clientX, //
      pageWidth = $(window).width(), //
      menuWidth = $(this.options.menuSelector).width(), //
      result = event.pageX; //

      // opening menu would pass the side of the page
      if (mouseClientX + menuWidth > pageWidth && menuWidth < mouseClientX) {
        result -= menuWidth;
      }

      return result;
    },

    /**
     * Get top location of which menu should show.
     * 
     * @return {Number} top location.
     * @private
     */
    _getTopLocation : function(event) {
      var mouseClientY = event.clientY, //
      pageHeight = $(window).height(), //
      menuHeight = $(this.options.menuSelector).height(), //
      result = event.pageY; //

      // opening menu would pass the bottom of the page
      if (mouseClientY + menuHeight > pageHeight && menuHeight < mouseClientY) {
        result -= menuHeight;
      }

      return result;
    }

  });

})(jQuery);

/**
 * Dialog Search Widget
 * 
 * @author koyama_y
 */
(function($) {
  $.widget("wap.dialogSearch", $.wap.abstractWidget, {

    /** jQuery Object Cache */
    $dialog : null,
    $inputEl : null,
    $searchBtnEl : null,

    /** Actions */
    actBeforeShow : null,
    actOk : null,
    actAfterClose : null,
    actFocusout : null,
    actValidate : null,

    /** Dialog HTML Template */
    templateMap : null,

    /**
     * Dialog HTML Standard Template
     */
    tmplStandard : '<div class="modal fade" id="{{dialogId}}">'
        + '           <div class="modal-dialog" style="width:{{dialogWidth}};">'
        + '             <div class="modal-content">'
        + '               <div class="modal-header">'
        + '                 <button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>'
        + '                 <h4 class="modal-title">{{title}}</h4>'
        + '               </div>'
        + '               <div id={{dialogBodyId}} class="modal-body"></div>'
        + '               <div class="modal-footer">'
        + '                 <button type="button" class="btn btn-default" data-dismiss="modal">Close</button>'
        + '                 <button type="button" class="btn btn-info">OK</button>'
        + '               </div>'
        + '             </div>'
        + '           </div>'
        + '         </div>',

    searchBtnTmpl : '<div class="input-group-addon">'
        + '            <i class="wap-icon-search"></i>'
        + '          </div>',

    errorMsgTmpl : '<span class="validate-has-error" style="display:inline;">{{errorMsg}}</div>',

    /**
     * Options
     */
    options : {
      title : '',
      dialogId : 'default-dialog-id',
      dialogBodyId : 'default-dialog-body-id',
      template : 'standard',// default template is standard
      dialogWidth : '70%'
    },

    /**
     * create widget
     */
    _create : function() {
      this._super();

      this._createTemplateMap();

      this.element.append(this.searchBtnTmpl);
      this.$searchBtnEl = this.element.find('.input-group-addon');
      this.$inputEl = this.element.find(':input');

      this._loadHtmlTmpl();
      this._bindEvents();
    },

    /**
     * create template map
     */
    _createTemplateMap : function() {
      this.templateMap = {
        standard : this.tmplStandard
      };
    },

    /**
     * Bind Events
     */
    _bindEvents : function() {
      this._bindActSearchBtn();
      this._bindActOkBtn();
      this._bindFocusOut();
    },

    /**
     * Bind action of search button
     * 
     * @param event
     */
    _bindActSearchBtn : function() {
      var _self = this;
      this.$searchBtnEl.on('click', function(e) {
        if (_self.actBeforeShow) {
          _self.actBeforeShow(_self.options.dialogBodyId, e);
        }
        _self.$dialog.modal('show');
      });
    },

    /**
     * Bind action of dialog OK button
     */
    _bindActOkBtn : function() {
      var _self = this;
      this.$dialog.on('click', '.btn-info', function(e) {
        if (_self.actOk) {
          _self.actOk();
        }

        _self.$dialog.modal('hide');

        if (_self._executeValidate(_self.$inputEl.val())) {
          return;
        }

        if (_self.actAfterClose) {
          _self.actAfterClose();
        }
      });
    },

    /**
     * Bind action of focus out from input area
     */
    _bindFocusOut : function() {
      var _self = this;
      this.$inputEl.on('focusout', function(e) {

        var value = _self.$inputEl.val();

        if (_self._executeValidate(value)) {
          return;
        }

        if (_self.actFocusout) {
          _self.actFocusout(value);
        }
      });
    },

    /**
     * Execute validate
     * 
     * @param inputValue
     * @return true : exist error, false : not exist error
     */
    _executeValidate : function(inputValue) {
      this.$inputEl.removeClass('has-error');
      this.element.parent().find('.validate-has-error').remove();

      var errorMsg = null;
      if (this.actValidate) {
        errorMsg = this.actValidate(inputValue);
      }

      if (errorMsg) {
        this.$inputEl.addClass('has-error');
        this._appendError(errorMsg);
        return true;
      }

      return false;
    },

    /**
     * append error HTML
     * 
     * @param errorMsg
     */
    _appendError : function(errorMsg) {
      // TODO Reduce calling 'Hogan.compile'
      var errorHtml = Hogan.compile(this.errorMsgTmpl).render({
        errorMsg : errorMsg
      });
      this.element.after(errorHtml);
    },

    /**
     * Load HTML Template from server.
     */
    _loadHtmlTmpl : function() {
      this._beforeLoadHtmlTmpl();

      // TODO Reduce calling 'Hogan.compile'
      var dlgHtml = Hogan.compile(this.templateMap[this.options.template]).render({
        dialogId : this.options.dialogId,
        title : this.options.title,
        dialogBodyId : this.options.dialogBodyId,
        dialogWidth : this.options.dialogWidth
      });

      this._afterLoadHtmlTmpl(dlgHtml);
    },

    /**
     * Action before load HTML template
     */
    _beforeLoadHtmlTmpl : function() {
      var html = '<div id="tmpl-search-dialog"></div>';
      $('body').append(html);
    },

    /**
     * Action after load HTML template
     * 
     * @param dlgHtml
     */
    _afterLoadHtmlTmpl : function(dlgHtml) {
      $('#tmpl-search-dialog').append(dlgHtml);
      this.$dialog = $('#' + this.options.dialogId);
    },

    // --------------------------------------------------------------------------
    // public methods
    // --------------------------------------------------------------------------
    /**
     * Set Function that is action of dialog initial open.
     * 
     * @param func(function)
     * @public
     */
    setActBeforeShow : function(func) {
      this.actBeforeShow = func;
      return this;
    },

    /**
     * Set function that is action of OK
     * 
     * @param func
     * @public
     */
    setActOk : function(func) {
      this.actOk = func;
      return this;
    },

    /**
     * Set function that is action of after Close
     * 
     * @param func
     * @public
     */
    setActAfterClose : function(func) {
      this.actAfterClose = func;
      return this;
    },

    /**
     * Set function that is action of focus out from Input area
     * 
     * @param func
     * @public
     */
    setActFocusout : function(func) {
      this.actFocusout = func;
      return this;
    },

    /**
     * Set function that is validate action of focus out from Input area
     * 
     * @param func
     * @public
     */
    setActValidate : function(func) {
      this.actValidate = func;
      return this;
    },

    /**
     * bind value in the input area
     * 
     * @param func
     * @public
     */
    bindValue : function(func) {
      this.$inputEl.val(func());
    }
  });

  /**
   * Automatic initialization function.
   */
  $(function() {
    var autoInstantiationClass = $.wap.dialogSearch.prototype.widgetFullName;
    $('.' + autoInstantiationClass).dialogSearch();
  });
}(jQuery));
/**
 * wap.datePickerField A thin wrapper of $.wap.autocomplete
 * 
 * @author sato_hi
 */
(function($) {
  $.widget('wap.autocompleteField', $.wap.field || '$.wap.field', {

    options : {},

    _create : function() {
      this._super();
      this.inputElement.autocomplete({});
    },

    _destroy : function() {
      this.contentElement.remove();
    },

    // TODO typeaheadの挙動が怪しいのでオーバーライドが必要かも。
    // 内部的にはコードでget、setしたいとかあるかも？こっちはとりあえずYAGNI

    // setValue : function(values) {
    // this.inputElement.autocomplete('setDate', values);
    // },

    // getValue : function() {
    // return this.inputElement.autocomplete('getDate');
    // },

    validate : function() {
      return [];// FIXME 選択肢の中から選ばれているかどうかをautocompleteコンポーネント側でチェックできるようにしてもらう必要あり
    },

  });

}(jQuery));

/**
 * wap.checkboxField
 * 
 * You must use with [wap.checkboxGroup] or [wap.checkbox] widget.<br>
 * This is supported by [wap.form] widget.
 * 
 * @author nishiyama-k
 * @since 2014/04/26
 */
(function($) {
  $
      .widget(
          'wap.checkboxField',
          $.wap.field || '$.wap.field',
          {

            // requireは$wap.fieldで処理
            options : {
              hinttext : '',// 初期値が空文字ならpopoverされない
              hinttitle : '',
              hintarea : 'auto right',
              hinttrigger : 'hover',
              hintdelay : {
                show : 500,
                hide : 0
              },
              message : {
                required : 'This field is required to select.',
              },
              greedValidationMessage : false,
              customValidator : null,
            },

            _isCheckBoxGrp : true,

            _$checkBoxElm : null,

            _MSG : {
              // VALIDATE : '必須項目ですので、いずれかを指定して下さい。',
              NOT_USE_CHECK_WIDGET : 'You cannot use setValue method. Because of not using with wap.checkbox or wap.checkboxGroup'
            },

            _CHECK_BOX_CLASS : {
              GRP : 'wap-checkboxGroup',
              ONE : 'wap-checkbox'
            },

            _create : function() {
              this._super();
              this._judegeAndSetCheckBoxElement();
              this._eachHintElement = this.element.find('[data-hinttext]');
              this._initPopover();
              this._setRequired();
            },

            _judegeAndSetCheckBoxElement : function() {
              var $elm = $(this.element);
              var dot = '.';
              if ($elm.hasClass(this._CHECK_BOX_CLASS.GRP) || $elm.find(dot + this._CHECK_BOX_CLASS.GRP)[0]) {
                this._isCheckBoxGrp = true;
                this._$checkBoxElm = $elm.hasClass(this._CHECK_BOX_CLASS.GRP) ? $elm : $($elm.find(dot
                    + this._CHECK_BOX_CLASS.GRP)[0]);
                return;
              }

              if ($elm.hasClass(this._CHECK_BOX_CLASS.ONE) || $elm.find(dot + this._CHECK_BOX_CLASS.ONE)[0]) {
                this._isCheckBoxGrp = false;
                this._$checkBoxElm = $elm.hasClass(this._CHECK_BOX_CLASS.ONE) ? $elm : $($elm.find(dot
                    + this._CHECK_BOX_CLASS.ONE)[0]);
                return;
              }
              // Not use wap.checkbox and wap.checkboxGroup
            },

            _destroy : function() {
              this.contentElement.remove();
            },

            _initPopover : function() {
              this.element.popover({
                content : this.options.hinttext,
                title : this.options.hinttitle,
                placement : this.options.hintarea,
                trigger : this.options.hinttrigger,
                delay : {
                  show : this.options.hintdelay,
                  hide : 0
                }
              });

              this._initEachPopover();
            },

            _initEachPopover : function() {
              var that = this;
              $.each(this._eachHintElement, function() {
                $(this).popover(that._getEachPopoverOption($(this)));
              });
            },

            _getEachPopoverOption : function(element) {
              return {
                content : element.data('hinttext') || '',
                title : element.data('hinttitle') || '',
                placement : element.data('hintarea') || 'right',
                trigger : element.data('hinttrigger') || 'hover',
                delay : {
                  show : element.data('hintdelay') || 500,
                  hide : 0
                }
              };
            },

            showHint : function() {
              this.showGroupHint();
              this.showEachHint();
            },

            showGroupHint : function() {
              this.element.popover({
                content : this.options.hinttext,
                placement : this.options.hintarea,
                trigger : this.options.hinttrigger
              }).popover('show');
            },

            showEachHint : function() {
              var that = this;
              $.each(this._eachHintElement, function() {
                $(this).popover(that._getEachPopoverOption($(this))).popover('show');
              });
            },

            hideHint : function() {
              this.element.popover('hide');
              this._hideEachHint();
            },

            _hideEachHint : function() {
              $.each(this._eachHintElement, function() {
                $(this).popover('hide');
              });
            },

            _getCheckBoxMethod : function() {
              var that = this;
              if (this._isCheckBoxGrp) {
                return {
                  setValue : function(values, callback) {
                    that._$checkBoxElm.checkboxGroup('setCheckValueList', values);
                    if ((null != callback) && ("function" === typeof callback)) {
                      callback(that);
                    }
                  },
                  getValue : function() {
                    return that._$checkBoxElm.checkboxGroup('getCheckedValueList');
                  },
                  focus : function(value) {
                    that._$checkBoxElm.checkboxGroup('focus', value);
                  },
                  clear : function(value) {
                    that._$checkBoxElm.checkboxGroup('clearAll');
                  },
                  setAllChecked : function() {
                    that._$checkBoxElm.checkboxGroup('checkAll');
                  },
                  setAllUnChecked : function() {
                    that._$checkBoxElm.checkboxGroup('clearAll');
                  },
                  showValidationMessage : function() {
                    var messages = that.validate();
                    if (messages.length > 0) {
                      that.updateMessage(messages[0]);
                    } else {
                      that.hideMessage();
                    }
                  },

                  updateMessage : function(message) {
                    var target = that._$checkBoxElm.find(".checkbox:last");
                    that.hideMessage();// FIXME
                    var dataFieldId = that.getId();
                    var messageFor = message.messageFor;
                    var $icon = that._getIcon(message.state);

                    var $messageBox = that.element.find(".messageBox").show();
                    if ($messageBox.length === 0) {
                      $messageBox = $('<div/>').addClass("messageBox").attr('validate-for', dataFieldId);
                      target.after($messageBox);
                    }
                    var $label = $messageBox.find('[message-for=' + messageFor + ']:first');
                    if ($label.length > 0) {
                      $label.addClass('active').show();
                    } else {
                      $messageBox.append(function() {
                        return $('<label/>').attr('message-for', messageFor).addClass('text-danger').text(
                            message.message).addClass('active').prepend($icon).show();
                      });
                    }
                  },

                  validate : function() {
                    var messages = [];
                    var requiredResult = that.options.required && (that.getValue().length <= 0);
                    if (requiredResult) {
                      var result = {};
                      result.state = "error";
                      result.messageFor = "required-error";
                      result.message = that.options.message.required;
                      messages.push(result);
                      // that._$checkBoxElm.addClass('has-error');// TODO
                    } else {
                      // that._$checkBoxElm.removeClass('has-error');// TODO
                    }
                    if (null != that.options.customValidator) {
                      var customResult = that.options.customValidator();
                      if (customResult.state == "error") {
                        messages.push(customResult);
                      }
                    }
                    messages = messages.sort(that.compareStatus);
                    // finally
                    if (messages.length === 0) {
                      that.updatestatus(that.STATUS_ISAOK);// ignore autoStatus
                      that.hideMessage();
                    } else {
                      if (that.options.automessage || that.isMessageDisplayed()) {
                        that.updateMessage(messages[0]);
                      }
                      if (that.options.autostatus) {
                        that.updatestatus(messages[0].state);
                      }
                    }
                    return messages;

                  },
                  hideMessage : function() {
                    var dataFieldId = that.getId();
                    that._$checkBoxElm.parent().find('[validate-for=' + dataFieldId + ']').hide();
                  },
                  _setRequired : function() {
                    that._$checkBoxElm.on('click keyup', function(ev) {
                      that.validate();
                    });
                  },

                };
              } else {
                return {
                  setValue : function(checked, callback) {
                    that._$checkBoxElm.checkbox('checked', checked);
                    if ((null != callback) && ("function" === typeof callback)) {
                      callback(that);
                    }
                  },
                  getValue : function() {
                    return that._$checkBoxElm.checkbox('isChecked');
                  },
                  focus : function(checked) {
                    that._$checkBoxElm.focus();
                  },
                  clear : function(checked) {
                    that._$checkBoxElm.checkbox('checked', false);
                  },
                  setAllChecked : function() {
                    that._$checkBoxElm.checkbox('checked', true);
                  },
                  setAllUnChecked : function() {
                    that._$checkBoxElm.checkbox('checked', false);
                  },
                  validate : function() {
                    var messages = [];
                    var requiredResult = that.options.required && (!that._$checkBoxElm.checkbox('isChecked'));
                    if (requiredResult) {
                      var result = {};
                      result.state = "error";
                      result.messageFor = "required-error";
                      result.message = that.options.message.required;
                      messages.push(result);
                      // that._$checkBoxElm.addClass('has-error');//TODO
                    } else {
                      // that._$checkBoxElm.removeClass('has-error');//TODO
                    }

                    if (null != that.options.customValidator) {
                      var customResult = that.options.customValidator();
                      if (customResult.state == "error") {
                        messages.push(customResult);
                      }
                    }
                    messages = messages.sort(that.compareStatus);
                    // finally
                    if (messages.length === 0) {
                      that.updatestatus(that.STATUS_ISAOK);// ignore autoStatus
                      that.hideMessage();
                    } else {
                      if (that.options.automessage || that.isMessageDisplayed()) {
                        that.updateMessage(messages[0]);
                      }
                      if (that.options.autostatus) {
                        that.updatestatus(messages[0].state);
                      }
                    }
                    return messages;
                  },
                  showValidationMessage : function() {
                    var messages = that.validate();
                    if (messages.length > 0) {
                      that.updateMessage(messages[0]);
                    } else {
                      that.hideMessage();
                    }
                  },

                  updateMessage : function(message) {
                    that.hideMessage();// FIXME
                    var target = that._$checkBoxElm;
                    var dataFieldId = that.getId();
                    var messageFor = message.messageFor;
                    var $icon = that._getIcon(message.state);

                    var $messageBox = that.element.find(".messageBox").show();
                    if ($messageBox.length === 0) {
                      $messageBox = $('<div/>').addClass("messageBox").attr('validate-for', dataFieldId);
                      target.after($messageBox);
                    }
                    var $label = $messageBox.find('[message-for=' + messageFor + ']:first');
                    if ($label.length > 0) {
                      $label.addClass('active').show();
                    } else {
                      $messageBox.append(function() {
                        return $('<label/>').attr('message-for', messageFor).addClass('text-danger').text(
                            message.message).addClass('active').prepend($icon).show();
                      });
                    }
                  },

                  hideMessage : function() {
                    var dataFieldId = that.getId();
                    that._$checkBoxElm.parent().find('[validate-for=' + dataFieldId + ']').hide();
                  },
                  _setRequired : function() {
                    that._$checkBoxElm.on('click keyup', function(ev) {
                      that.validate();
                    });
                  },
                };
              }
            },

            _checkUseCheckboxWidget : function() {
              if (!this._$checkBoxElm) {
                throw new Error(this._MSG.NOT_USE_CHECK_WIDGET);
              }
            },

            setValue : function(values, callback) {
              this._checkUseCheckboxWidget();
              this._getCheckBoxMethod().setValue(values, callback);
            },

            getValue : function() {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod().getValue();
            },

            setAllChecked : function() {
              this._checkUseCheckboxWidget();
              this._getCheckBoxMethod().setAllChecked();
            },

            setAllUnChecked : function() {
              this._checkUseCheckboxWidget();
              this._getCheckBoxMethod().setAllUnChecked();
            },

            validate : function() {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod().validate();
            },
            hideMessage : function() {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod().hideMessage();
            },
            updateMessage : function(message) {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod().updateMessage(message);
            },
            showValidationMessage : function() {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod().showValidationMessage();
            },

            _setRequired : function() {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod()._setRequired();
            },

            focus : function(value) {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod().focus(value);
            },

            clear : function() {
              this._checkUseCheckboxWidget();
              return this._getCheckBoxMethod().clear();
            }
          });

  $(function() {
    var autoInstantiationClass = $.wap.checkboxField.prototype.widgetFullName;
    $('.' + autoInstantiationClass).checkboxField();
  });
}(jQuery));

/**
 * wap.datePickerField A thin wrapper of $.wap.wapDatepicker
 * 
 * @author sato_hi
 */
(function($) {
  $.widget('wap.datePickerField', $.wap.field || '$.wap.field', {

    options : {},

    _create : function() {
      this._super();
      this.inputElement.wapDatepicker({});
      this.hintTarget = this.inputElement;
    },

    _destroy : function() {
      this.contentElement.remove();
    },

    setValue : function(values, callback) {
      this.inputElement.wapDatepicker('setDate', values);
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    getValue : function() {
      return this.inputElement.wapDatepicker('getDate');
    },

    validate : function() {
      return this.inputElement.wapDatepicker('validate');
    },

    clear : function() {
      return this.inputElement.wapDatepicker('clear');
    },
  });

}(jQuery));

(function($) {
  $.widget('wap.durationinput', $.wap.field || '$.wap.field', {

    options : {
      hoursUnit : ':',
      minutesUnit : ''
    },
    /**
     * @constructor
     */
    _create : function() {
      this._super();
      this._hours = 0;
      this._minutes = 0;

      if (!deviceInfo.desktop()) {
        this.inputElement.on('touchstart', $.proxy(this._showPopup, this));
      }
    },

    /**
     * @destructor
     */
    _destroy : function() {
      this.contentElement.remove();
    },

    getHours : function() {
      return this._horus;
    },

    setHours : function(hours) {
      this.hours = hours;
    },

    getMinutes : function() {
      return this._minutes;
    },

    setMinutes : function(hours) {
      this._minutes = minutes;
    },

    _setTextValue : function() {
      this.inputElement.val('' + this._hours + this.options.hoursUnit + this._minutes + this.options.minutesUnit);
    },

    _showPopup : function() {
      if ($('#wap-durationinput-popup').length > 0) {
        this._closePopup();
      }
      var html = '<div id="wap-durationinput-popup">'
          + '  <div class="wap-durationinput-popup-header">'
          + '    <span class="wap-durationinput-popup-hour"></span>'
          + '    <span class="wap-durationinput-popup-hour-unit"> : </span>'
          + '    <span class="wap-durationinput-popup-min"></span>'
          + '    <span class="wap-durationinput-popup-min-unit"></span>'
          + '  </div>'
          + '  <table class="wap-durationinput-popup-keys">'
          + '    <tr>'
          + '      <td><button class="wap-durationinput-popup-key">1</button></td>'
          + '      <td><button class="wap-durationinput-popup-key">2</button></td>'
          + '      <td><button class="wap-durationinput-popup-key">3</button></td>'
          + '    </tr>'
          + '    <tr>'
          + '      <td><button class="wap-durationinput-popup-key">4</button></td>'
          + '      <td><button class="wap-durationinput-popup-key">5</button></td>'
          + '      <td><button class="wap-durationinput-popup-key">6</button></td>'
          + '    </tr>'
          + '    <tr>'
          + '      <td><button class="wap-durationinput-popup-key">7</button></td>'
          + '      <td><button class="wap-durationinput-popup-key">8</button></td>'
          + '      <td><button class="wap-durationinput-popup-key">9</button></td>'
          + '    </tr>'
          + '    <tr><td></td>'
          + '      <td><button class="wap-durationinput-popup-key">0</button></td>'
          + '    <td></td></tr>'
          + '  </table>'
          + '  <div class="wap-durationinput-popup-keys">'
          + '    <button class="wap-durationinput-popup-customkey" value="+h">+1 Hour</button><br>'
          + '    <button class="wap-durationinput-popup-customkey" value="-h">-1 Hour</button><br>'
          + '    <button class="wap-durationinput-popup-customkey" value="+m">+15 Min</button><br>'
          + '    <button class="wap-durationinput-popup-customkey" value="-m">-15 Min</button><br>'
          + '  </div>'
          + '  <div class="wap-durationinput-popup-buttons">'
          + '      <button class="wap-durationinput-popup-ok">OK</button>'
          + '      <button class="wap-durationinput-popup-cancel">Cancel</button>'
          + '    </div>'
          + '</div>';
      popup = $(html);
      popup.find('.wap-durationinput-popup-hour-unit').text(this.options.hoursUnit);
      popup.find('.wap-durationinput-popup-min-unit').text(this.options.minutesUnit);
      document.body.appendChild(popup.get(0));
      popup.find('.wap-durationinput-popup-key').on('touchstart', $.proxy(this._onTouchPopupKey, this));
      popup.find('.wap-durationinput-popup-ok').on('touchstart', $.proxy(this._onTouchOkButton, this));
      popup.find('.wap-durationinput-popup-cancel').on('touchstart', this._closePopup);

      popup.find('.wap-durationinput-popup-customkey').on('touchstart', $.proxy(this._onTouchCustomKey, this));

      popup.find('.wap-durationinput-popup-key,.wap-durationinput-popup-customkey').on('touchstart', function() {
        $(this).addClass('wap-durationinput-popup-key-pushed');
      }).on('touchend', function() {
        $(this).removeClass('wap-durationinput-popup-key-pushed');
      });

      popup.find('.wap-durationinput-popup-hour').on('touchstart', function() {
        $.data(popup.get(0), 'input-step', 0);
        popup.find('.wap-durationinput-popup-hour').addClass('wap-durationinput-popup-input');
        popup.find('.wap-durationinput-popup-min').removeClass('wap-durationinput-popup-input');
      });
      popup.find('.wap-durationinput-popup-min').on('touchstart', function() {
        $.data(popup.get(0), 'input-step', 2);
        popup.find('.wap-durationinput-popup-hour').removeClass('wap-durationinput-popup-input');
        popup.find('.wap-durationinput-popup-min').addClass('wap-durationinput-popup-input');
      });

      $.data(popup.get(0), 'input-step', 0);
      var hours = this.inputElement.val().match(/[0-9]/g);
      if (hours && hours.length > 0) {
        this._hours = hours[0];
      }
      if (hours && hours.length > 1) {
        this._minutes = hours[1];
      }
      this._setPopupTime(this._hours, this._minutes, 0);

      var ofs = this.inputElement.offset();
      var popupPos = {
        'top' : ofs.top,
        'left' : ofs.left
      };

      var d = $(document).scrollTop() + $(window).height() - (popupPos.top + 550);
      if (d < 0) {
        popupPos.top += d;
      }
      popup.css(popupPos);
      popup.show();

      return popup;
    },

    _closePopup : function() {
      $('#wap-durationinput-popup').hide().remove();
    },

    _onTouchPopupKey : function(event) {
      event.preventDefault();
      var hlabel = $('#wap-durationinput-popup .wap-durationinput-popup-hour');
      var mlabel = $('#wap-durationinput-popup .wap-durationinput-popup-min');
      var button = $(event.target);
      var hour = parseInt(hlabel.text());
      var min = parseInt(mlabel.text());
      var step = $.data($('#wap-durationinput-popup').get(0), 'input-step');
      if (step == 0) {
        hour = parseInt(button.text());
        step++;
      } else if (step == 1) {
        hour = hour * 10 + parseInt(button.text());
        step++;
      } else if (step == 2) {
        min = parseInt(button.text());
        step++;
      } else {
        min = min * 10 + parseInt(button.text());
        step = 0;
      }
      $.data($('#wap-durationinput-popup').get(0), 'input-step', step);
      this._setPopupTime(hour, min, step);
    },

    _onTouchCustomKey : function() {
      event.preventDefault();
      var hlabel = $('#wap-durationinput-popup .wap-durationinput-popup-hour');
      var mlabel = $('#wap-durationinput-popup .wap-durationinput-popup-min');
      var hour = parseInt(hlabel.text());
      var min = parseInt(mlabel.text());

      var button = $(event.target);
      var value = button.val();
      if (value.charAt(0) === '-') {
        if (value.charAt(1) === 'h') {
          hour--;
        } else {
          min -= 15;
          if (min < 0) {
            min += 60;
            hour--;
          }
        }
      } else if (value.charAt(0) === '+') {
        if (value.charAt(1) === 'h') {
          hour++;
        } else {
          min += 15;
          if (min >= 60) {
            min -= 60;
            hour++;
          }
        }
      }

      if (hour < 0) {
        hour = 0;
      }
      if (hour > 99) {
        hour = 99;
      }

      var step = $.data($('#wap-durationinput-popup').get(0), 'input-step');
      this._setPopupTime(hour, min, step);
    },

    _setPopupTime : function(hour, min, step) {
      if (hour > 99) {
        hour = 99;
      }
      if (min > 59) {
        min = min % 60;
      }
      var hlabel = $('#wap-durationinput-popup .wap-durationinput-popup-hour');
      var mlabel = $('#wap-durationinput-popup .wap-durationinput-popup-min');
      hlabel.text((hour > 9 ? '' : '0') + hour);
      mlabel.text((min > 9 ? '' : '0') + min);
      if (step <= 1) {
        hlabel.addClass('wap-durationinput-popup-input');
        mlabel.removeClass('wap-durationinput-popup-input');
      } else {
        hlabel.removeClass('wap-durationinput-popup-input');
        mlabel.addClass('wap-durationinput-popup-input');
      }
    },

    _onTouchOkButton : function() {
      var hlabel = $('#wap-durationinput-popup .wap-durationinput-popup-hour');
      var mlabel = $('#wap-durationinput-popup .wap-durationinput-popup-min');
      this._hours = parseInt(hlabel.text());
      this._minutes = parseInt(mlabel.text());
      this._setTextValue();
      this._closePopup();
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.durationinput.prototype.widgetFullName;
    $('.' + autoInstantiationClass).durationinput();
  });
})(jQuery);
(function($) {
  $.widget("wap.field", $.wap.abstractWidget, {
    WAP_FORM_VALIDATE_MESSAGEBOX : "wap-form-validate-messagebox",// this is const
    FIELD_ERROR : 'wap-field-error',// this is const
    FIELD_WARNING : 'wap-field-warning',// this is const
    FIELD_INFO : 'wap-field-info',// this is const
    FIELD_SUCCESS : 'wap-field-success',// this is const
    FIELD_NOT_ENTERED : 'wap-field-not-entered',// this is const
    FIELD_AUTO_FILLED : 'wap-field-auto-filled',// this is const
    STATUS_ERROR : 'error',// this is const
    STATUS_WARNING : 'warning',// this is const
    STATUS_INFO : 'info',// this is const
    STATUS_SUCCESS : 'success',// this is const
    STATUS_AUTO_FILLED : 'auto-filled',// this is const
    STATUS_NOT_ENTERED : 'not-entered',// this is const
    STATUS_ISAOK : 'isaok',// this is const
    options : {
      // フィールド別に使用項目が違うと思うが共通であろうものはこのwidgetに追加するイメージ？
      // We will add `shared` attributes to this abstract component.
      required : false,
      automessage : false,
      autostatus : true,
      hinttext : null,
      hintarea : 'right',
    },

    _create : function() {
      this._super();
      this.status = this.STATUS_ISAOK;
      this.divElement = this.element;
      this.labelElement = this.element.find('label:first');
      this.labelText = this.labelElement.text();
      this.inputElement = this.element.find('input:first');
      if (this.options.required) {
        this.setRequired();
      }
      this.hintTarget = this.inputElement;// override when necessary
      this.messageTarget = this.inputElement;// override when necessary
      this.statusTarget = this.inputElement;// override when necessary
      this.requiredTarget = this.inputElement;// override when necessary
      if (this.options.hinttext != null) {
        this._createHint();
      }
    },

    _destroy : function() {
      // このプラグインが生成される前の状態にHTMLとイベントを戻してください。_superを呼ぶ必要はありません。
      // Please revert your changes of HTML and events. You do not have to call super class's implementation.
      this.contentElement.remove();
    },

    getFieldLabelText : function() {
      return this.labelText;
    },

    // 値の設定をしてください。デフォルト実装と違う場合はoverrrideしてください。
    // Configure value. You may override this implemention when you need.
    setValue : function(value, callback) {
      this.inputElement.val(value);
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    // 値の設定返してください。デフォルト実装と違う場合はoverrrideしてください。
    // Return value. You may override this implementation when you need.
    getValue : function() {
      return this.inputElement.val();
    },

    setRequired : function() {
      if (this.labelElement) {
        this.labelElement.addClass("must-column");
      }
    },

    showHint : function() {
      // popoverによるヒント表示
      // display hint by popover
      if (null != this.hintTarget) {
        var options = {
          trigger : 'manual',
          placement : this.options.hintarea
        };
        this.hintTarget.popover(options).popover('show');
      }
    },

    hideHint : function() {
      // popoverのヒントを非表示
      // hide hint by popover
      if (null != this.hintTarget) {
        var options = {
          content : this.options.hinttext,
          trigger : 'manual',
          placement : this.options.hintarea
        };
        this.hintTarget.popover(options).popover('hide');
      }
    },

    _createHint : function() {
      this.hintTarget.attr('data-content', this.options.hinttext).popover({
        delay : {
          show : 500,
          hide : 0
        },
        trigger : 'focus',
        placement : this.options.hintarea
      });
    },

    _chkRequired : function() {
      var i = this.requiredTarget;
      var val = i.val();
      var result = {};
      if (val.length == 0 || $.trim(val) == "") {
        result.state = this.STATUS_ERROR;
        result.messageFor = "required-error";
        result.message = this.options.message.required;
      } else {
        result.state = this.STATUS_ISAOK;
      }
      return result;
    },

    /**
     * エラーメッセージの配列を返してください. Please return array of error messages.
     * 
     * @return {Array} array of String.
     */
    validate : function() {
      return [
        'implementation error: validate method is not overrided.'
      ];
      // フィールド単体でのバリデーション / validation for each fields
      // フォーマット(日付、数値、etc) / format (date, number, etc.)
      // 文字数 / number of characters
    },

    showValidationMessage : function() {
      var messages = this.validate();
      if (messages.length > 0) {
        this.updateMessage(messages[0]);
      } else {
        this.hideMessage();
      }
    },

    hideMessage : function() {
      var $messageBox = this.messageTarget.parent().find("." + this.WAP_FORM_VALIDATE_MESSAGEBOX);
      $messageBox.children().each(function() {
        $(this).removeClass('active').hide();
      });
    },

    _getMessageClass : function(state) {
      if (state === this.STATUS_ERROR) {
        return 'text-danger';
      } else if (state === this.STATUS_WARNING) {
        return 'text-warning';
      } else if (state === this.STATUS_INFO) {
        return 'text-info';
      } else if (state === this.STATUS_SUCCESS) {
        return 'text-success';
      } else {
        return 'text-normal';
      }
    },
    _getIcon : function(state) {
      if (state === this.STATUS_ERROR) {
        return '<span class="wap-icon-blocked text-danger"></span>';
      } else if (state === this.STATUS_WARNING) {
        return $('<span class="wap-icon-exclamation-triangle text-warning"></span>');
      } else if (state === this.STATUS_INFO) {
        return '<span class="wap-icon-info-sign text-info"></span>';
      } else if (state === this.STATUS_SUCCESS) {
        return '<span class="wap-icon-checkmark text-success"></span>';
      } else {
        return '<span class="wap-icon-info-sign text-info"></span>';
      }
    },
    updateMessage : function(message) {
      var dataFieldId = this.getId();
      var messageFor = message.messageFor;
      var messageClass = this._getMessageClass(message.state);
      var $icon = this._getIcon(message.state);

      var $messageBox = this.messageTarget.parent().find("." + this.WAP_FORM_VALIDATE_MESSAGEBOX).show();
      if ($messageBox.length === 0) {
        $messageBox = $('<div/>').addClass(this.WAP_FORM_VALIDATE_MESSAGEBOX).attr('validate-for', dataFieldId);
        this.messageTarget.after($messageBox);
      }
      var $messageLabel = $messageBox.find('[message-for=' + messageFor + ']:first');
      if ($messageLabel.length > 0) {
        // 対象以外を非表示にする
        $messageLabel.siblings().removeClass('active').hide();
        if ($messageLabel.is(':hidden')) {
          $messageLabel.addClass('active').show();
        }
      } else {
        if (null != message.message && message.message.length > 0) {
          // $messageLabel.siblings().removeClass('active').hide();
          $messageBox.append(function() {
            return $('<label/>').attr('message-for', messageFor).attr('message-state', message.state).addClass(
                messageClass).text(message.message).addClass('active').prepend($icon).show();
          });
          // 追加したのでそれ以外を非表示にする
          $messageBox.find('[message-for=' + messageFor + ']:first').siblings().removeClass('active').hide();
        } else {
          // updateMessageが呼ばれたがメッセージが空なのですべて隠す
          if (this.isErrorMessageDisplayed()) {
            this.hideMessage();
          }
        }
      }
      return this;
    },

    updatestatus : function(state) {
      this.setStatus(state);
      this.statusTarget.removeClass(this.FIELD_ERROR);
      this.statusTarget.removeClass(this.FIELD_WARNING);
      this.statusTarget.removeClass(this.FIELD_INFO);
      this.statusTarget.removeClass(this.FIELD_SUCCESS);
      this.statusTarget.removeClass(this.FIELD_NOT_ENTERED);
      this.statusTarget.removeClass(this.FIELD_AUTO_FILLED);
      if (state === this.STATUS_ERROR) {
        this.statusTarget.addClass(this.FIELD_ERROR);
      } else if (state === this.STATUS_WARNING) {
        this.statusTarget.addClass(this.FIELD_WARNING);
      } else if (state === this.STATUS_INFO) {
        this.statusTarget.addClass(this.FIELD_INFO);
      } else if (state === this.STATUS_SUCCESS) {
        this.statusTarget.addClass(this.FIELD_SUCCESS);
      } else if (state === this.STATUS_NOT_ENTERED) {
        this.statusTarget.addClass(this.FIELD_NOT_ENTERED);
      } else if (state === this.STATUS_AUTO_FILLED) {
        this.statusTarget.addClass(this.FIELD_AUTO_FILLED);
      } else if (state === this.STATUS_ISAOK) {
        // do nothing.
      }
      return this;
    },

    getStatus : function() {
      return this.status;
    },

    setStatus : function(state) {
      this.status = state;
    },

    isEager : function() {
      if ((this.getStatus() === this.STATUS_ERROR) || (this.getStatus() === this.STATUS_WARNING)) {
        return true;
      }
      return false;
    },

    isMessageDisplayed : function() {
      if (this.messageTarget.parent().find("." + this.WAP_FORM_VALIDATE_MESSAGEBOX + ' *:visible').length > 0) {
        return true;
      }
      return false;
    },

    isErrorMessageDisplayed : function() {
      if ((this.messageTarget.parent().find(
          "." + this.WAP_FORM_VALIDATE_MESSAGEBOX + ' *[message-state="error"]:visible').length > 0)
          || (this.messageTarget.parent().find(
              "." + this.WAP_FORM_VALIDATE_MESSAGEBOX + ' *[message-state="warning"]:visible').length > 0)) {
        return true;
      }
      return false;
    },

    format : function() {
      // フォーマット / format
      // 郵便番号とか電話番号とか住所とか / ZIP code, telephone number, address etc.
    },

    focus : function() {
      // 強制的にフォーカスする場合。必要かも？ / This API may be needed to focus forceful?
      this.inputElement.focus();
    },

    clear : function() {
      this.setValue('');
    },

    isNullController : function() {
      // @see formController.getFieldController(id)
      return false;
    },
    compareStatus : function(a, b) {
      // array.sort is stable sort
      var statusOrder = [
        'isaok', 'not-entered', 'auto-filled', 'success', 'info', 'warning', 'error'
      ];
      return -1 * (statusOrder.indexOf(a.state) - statusOrder.indexOf(b.state));
    }
  });

}(jQuery));
(function($) {
  var internalUniqueFieldId = 0;
  $
      .widget(
          'wap.form',
          {

            options : {
              decorateTargetParentSelector : '.main-content',
              validationMessageContainerCaption : 'Please fix following errors.',
            // フィールド別に使用項目が違うと思うが
            // 共通であろうものはこのwidgetに追加するイメージ？
            },

            _create : function() {
              this.fields = [];
              this.fieldDictionary = {};
              // .form-groupの直下にあるlabelとdivの中のinput要素をなめてデコレートします。
              this._lastFocusedDataFieldId = null;
              var form = this;
              this.element
                  .find('[data-controller]')
                  .each(
                      function() {
                        var controllerName = $(this).data('controller');
                        var instanceName = $.camelCase('wap-' + controllerName);
                        if (!$(this)[controllerName]) {
                          console.log('app.formController:data-controller['
                              + controllerName
                              + '] is not available because such plugin is not defined.');
                          // console.log('app.formController:data-controller['
                          // + controllerName
                          // + ']っていうプラグインは定義されていなので使えません。');
                          return;
                        }
                        $(this)[controllerName]({});
                        var id = $(this).data('field-id') || internalUniqueFieldId++ + '';
                        if (!$(this).data('field-id')) {
                          console
                              .log("app.formController:field's instances has given their IDs automatically. Making attribute data-field-id will make it easier to manage each intances of input fields.");
                          // console
                          // .log('app.formController:fieldの管理インスタンスに勝手にIDを振りました。data-field-idというプロパティを作って、それぞれ個別のIDを振ると、個別の入力欄の管理インスタンスの参照が簡単になります。');
                        }
                        if (id in form.fieldDictionary) {
                          console.log('app.formController:data-field-id[' + id + '] seems to be duplicated.');
                          // console.log('app.formController:data-field-id[' + id + ']が重複しているようです。');
                        }
                        form._registerFieldController(id, $(this).data(instanceName));
                        $(this).data(instanceName).getId = function() {
                          return id;
                        };
                      });
              console
                  .log('app.formController:'
                      + this.fields.length
                      + ' fields are associated to controller class. Now they can be manipulated at once using app.formController. If you cannnot see app.formController, try to inherit $.wap.inputApp.');
              // console
              // .log('app.formController:'
              // + this.fields.length
              // +
              // '件のフィールドに管理クラスを関連付けました。app.formControllerから一括で各種処理ができます。app.formControllerがない場合はapplicationの継承元を$.wap.inputAppにしてみてください。');

              var that = this;
              $(this.element).on(
                  'focusout',
                  '[data-controller]',
                  function(ev) {
                    if (ev
                        && ev.currentTarget
                        && ev.currentTarget.attributes
                        && ev.currentTarget.attributes['data-field-id']
                        && ev.currentTarget.attributes['data-field-id'].value) {
                      that._lastFocusedDataFieldId = ev.currentTarget.attributes['data-field-id'].value;
                    }
                  });
            },

            _registerFieldController : function(id, instance) {
              this.fieldDictionary[id] = instance;
              this.fields.push(instance);
            },

            /**
             * @param {String} id [description]
             * 
             * Returns fieldController of given id. If not exists, an object will be returned, so you can call methods
             * without null-check like following: app.formController.getFieldController(id).getValue();
             * 
             * When you have to know that the returned object is null-object or not, use isNullController() method.
             */
            getFieldController : function(id) {
              var result = this.fieldDictionary[id];
              if (null != result) {
                return result;
              } else {
                console.log('app.formController: the field [' + id + '] was not found.');
                var NullController = function() {
                  var _nullFunction = function() {
                  };
                  this.getFieldLabelText = _nullFunction;
                  this.setValue = _nullFunction;
                  this.getValue = _nullFunction;
                  this.setRequired = _nullFunction;
                  this.showHint = _nullFunction;
                  this.hideHint = _nullFunction;
                  this.validate = _nullFunction;
                  this.showValidationMessage = _nullFunction;
                  this.format = _nullFunction;
                  this.focus = _nullFunction;
                  this.clear = _nullFunction;
                  this.isNullController = function() {
                    return true;
                  };
                };
                return new NullController();
              }
            },

            getFocusedDataFieldId : function() {
              var tgt = document.activeElement;
              var result = null;
              while (null != tgt) {
                tgt = tgt.parentElement;
                if (tgt && tgt.attributes && tgt.attributes['data-field-id']) {
                  result = tgt.attributes['data-field-id'].value;
                  return result;
                }
              }
            },

            getLastFocusedDataFieldId : function() {
              return this._lastFocusedDataFieldId;
            },

            _destroy : function() {
              // このプラグインが生成される前の状態にHTMLとイベントを戻してください。
              // _superを呼ぶ必要はありません。
            },

            // formからは呼ばないでしょう。
            // setRequired: function(key, arg) {
            // // 必須項目
            // },

            showHint : function() {
              for (var i = 0; i < this.fields.length; i++) {
                this.fields[i].showHint();
              }
            },

            hideHint : function() {
              for (var i = 0; i < this.fields.length; i++) {
                this.fields[i].hideHint();
              }
            },

            clear : function() {
              for (var i = 0; i < this.fields.length; i++) {
                this.fields[i].clear();
              }
            },

            validate : function() {
              var result = [];
              for (var i = 0; i < this.fields.length; i++) {
                var fieldResult = this.fields[i].validate();
                for (var j = 0; j < fieldResult.length; j++) {
                  result.push({
                    id : this.fields[i].element.data('fieldId') || null,
                    fieldLabelText : this.fields[i].getFieldLabelText(),
                    message : fieldResult[j]
                  });
                }
              }
              return result;
            },

            validateByState : function() {
              var result = "isaok";
              var errors = this.validate();
              for (var i = 0; i < errors.length; i++) {
                var tgt = errors[i];
                if ((null != tgt) && (null != tgt.message) && (null != tgt.message.state)) {
                  if (tgt.message.state === "error") {
                    result = "error";
                  } else if ((tgt.message.state === "warning") && (result != "error")) {
                    result = "warning";
                  }
                }
              }
              return result;
            },
            showValidationMessage : function() {
              for (var i = 0; i < this.fields.length; i++) {
                this.fields[i].showValidationMessage();
              }
            },
            showValidationMessageContainer : function() {
              if ($('#validation-errors-container').length === 0) {
                $(document).find('body').append('<div id="validation-errors-container"></div>');
              } else {
                $('#validation-errors-container').children().remove();
              }
              var _validateByState = this.validateByState();
              if (_validateByState === "isaok") {
                return;
              }
              var $html = "";
              var errors = app.formController.validate();
              $html = $html + '<div class="tile-block tile-gray " style="">';
              $html = $html
                  + ' <div class="tile-header"><a>'
                  + this.options.validationMessageContainerCaption
                  + '</a><a id="btn-close" class="wap-icon-close"></a></div>';
              $html = $html + ' <div class="tile-content" style="padding-top: 5px; background:rgba(0, 0, 0, 0);">';
              $html = $html + ' <ul class="todo-list li-container">';
              $html = $html + ' </ul>';
              $html = $html + ' </div>';
              $html = $html + '</div>';
              $('#validation-errors-container').append($html).css({
                "position" : "absolute",
                "z-index" : "99999",
                "right" : "20px",
                "top" : $(window).scrollTop() + 20
              });
              for (var i = 0; i < errors.length; i++) {
                var tgt = errors[i];
                if ((null != tgt) && (null != tgt.message) && (null != tgt.message.state)) {
                  if ((tgt.message.state === "error") || (tgt.message.state === "warning")) {
                    var wapicon = "";
                    if (tgt.message.state === "error") {
                      wapicon = '<span class="wap-icon-blocked"></span>';
                    }
                    if (tgt.message.state === "warning") {
                      wapicon = '<span class="wap-icon-exclamation-triangle"></span>';
                    }
                    if ($('#li-' + tgt.id).length === 0) {
                      $('.li-container').append(
                          '<li id="li-'
                              + tgt.id
                              + '" class="todo-list"> <a id ="'
                              + tgt.id
                              + '" style="font-size: 1.2em;">'
                              + tgt.fieldLabelText
                              + '</a>');
                    }
                    $('#li-' + tgt.id).append(
                        '<br>' + wapicon + '<span> -&nbsp;&nbsp;&nbsp;' + tgt.message.message + ' </span>');
                  }
                }
              }
              $("#validation-errors-container ul li a").each(function() {
                $(this).click(function() {
                  var tgt = app.formController.getFieldController($(this).attr('id'));
                  tgt.focus();
                  var $focus = $('<div id="focusMark">').css({
                    "position" : "absolute",
                    "z-index" : "99999",
                    "right" : "20px",
                    // "background" : "#A0C5E8",
                    "background" : "rgba(160, 197, 232, 0.5)",
                    "width" : tgt.element.width() + "px",
                    "height" : tgt.element.height() + "px",
                    "top" : tgt.element.offset().top + "px",
                    "left" : tgt.element.offset().left + "px",
                  });
                  $(document).find('body').append($focus);
                  $focus.fadeOut();
                });
              });
              $('#btn-close').css({
                "float" : "right"
              }).click(function() {
                $('#validation-errors-container').remove();
              });
              $(window).scroll(function() {
                if ($(window).scrollTop() > 0) {
                  $('#validation-errors-container').stop().animate({
                    // marginTop : $(window).scrollTop() - 80
                    top : $(window).scrollTop() + 20
                  }, {
                    queue : false
                  });
                } else {
                  $('#validation-errors-container').stop().animate({
                  // marginTop : 0
                  }, {
                    queue : false
                  });
                }
              });
            },

            /**
             * コントローラのidと設定したい値が対応付けられたオブジェクトか、個別のidと値を渡してください。
             * 
             * @param {String || Object} idOrIdValueMap
             * @param {[type]} value [description]
             */
            setData : function(idOrIdValueMap, value) {
              if (typeof idOrIdValueMap == 'string') {
                this.getFieldController(idOrIdValueMap).setValue(value);
              } else {
                for (key in idOrIdValueMap) {
                  this.getFieldController(key).setValue(idOrIdValueMap[key]);
                }
              }
            },

            /**
             * FieldのIDを渡してください。設定されている値を返します。
             * 
             * @param {String} id [description]
             * @return {String} [description]
             */
            getData : function(id) {
              var res = [];
              if (id) {
                return this.getFieldController(id).getValue();
              } else {
                for (var i = 0; i < this.fields.length; i++) {
                  res.push({
                    id : this.fields[i].element.data('fieldId') || null,
                    fieldLabelText : this.fields[i].getFieldLabelText(),
                    value : this.fields[i].getValue()
                  });
                }
                return res;
              }
            },

            /**
             * idとvalueのマップを返します。
             * 
             * @return {Object}
             */
            getDataDictionary : function() {
              var res = {};
              for (var i = 0; i < this.fields.length; i++) {
                res[this.fields[i].getId()] = this.fields[i].getValue();
              }
              return res;
            },

            format : function() {
              // フォーマット
              // 郵便番号とか電話番号とか住所とか
            },

            undoredo : function($form, $undo, $redo, $reload, delayTime) {
              new UndoRedo($form, $undo, $redo, $reload, delayTime);
            },

          });

  /**
   * [UndoRedo: the duty of UndoRedo is to listen input components in a form and allow them to undo/redo/reload]
   * 
   * @param {Object} $form [the form object whose input components are allowed to undo/redo]
   * @param {Object} $undo [the undo button, equals Ctrl+z]
   * @param {Object} $redo [the redo button, equals Ctrl+y]
   * @param {Object} $reload [the reload button]
   * @param {number} delayTime [the delay time to save user operations]
   */
  var UndoRedo = function($form, $undo, $redo, $reload, delayTime) {

    // ---------------------Undo Redo--------------------//
    /**
     * [init initialize the object to listen and stack to record operations, meanwhile, bind events to them]
     * 
     * @constructor
     */
    UndoRedo.prototype.init = function() {
      $form = $form || $('form');
      $undo = $undo || $('.undo');
      $redo = $redo || $('.redo');
      $reload = $reload || $('.reload');
      delayTime = delayTime ? delayTime : 200;
      this.listenObjCurrValue = {};
      this.stack = new UndoRedo.Stack(this);
      this.bindEvents();
      this.stack.changed();
    };

    /**
     * [bindEvents: 1. bind events to undo/redo/reload button; 2. get all input types except grid to listen and record
     * operations on them 3. support Ctrl+z and Ctrl+y to call undo/redo function ]
     */
    UndoRedo.prototype.bindEvents = function() {
      var _self = this;

      if ($undo) {
        $undo.on('click', function() {
          _self.stack.canUndo() && _self.stack.undo();
        });
      }
      if ($redo) {
        $redo.on('click', function() {
          _self.stack.canRedo() && _self.stack.redo();
        });
      }
      if ($reload) {
        $reload.on('click', function() {
          _self.stack.resetCommandQue();
          window.location.reload();
        });
      }

      var listenObjArray = _self.getListenObjArray();

      for (var idx = 0; idx < listenObjArray.length; idx++) {
        switch (listenObjArray[idx].objType) {
        case 'TEXTAREA':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.val());
          _self.listenTextarea(listenObjArray[idx].obj);
          break;
        case 'SELECT':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.selectController('getValue'));
          _self.listenSelect(listenObjArray[idx].obj);
          break;
        case 'CHECKBOX':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.checkbox('isChecked'));
          _self.listenCheckbox(listenObjArray[idx].obj);
          break;
        case 'CHECKBOXGROUP':
          _self
              .setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.checkboxGroup('getCheckedIdList'));
          _self.listenCheckboxGroup(listenObjArray[idx].obj);
          break;
        case 'TEXTFIELD':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.val());
          _self.listenTextField(listenObjArray[idx].obj);
          break;
        case 'RADIOGROUP':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.radioGroup('getCheckedId'));
          _self.listenRadioGroup(listenObjArray[idx].obj);
          break;
        case 'DATEPICKER':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.wapDatepicker('getDate'));
          _self.listenDatePicker(listenObjArray[idx].obj);
          break;
        case 'TIMEPICKER':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.timePicker('getTime'));
          _self.listenTimePicker(listenObjArray[idx].obj);
          break;
        case 'DURATIONINPUT':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.val());
          _self.listenDurationInput(listenObjArray[idx].obj);
          break;
        case 'MONEYINPUT':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.val());
          _self.listenMoneyInput(listenObjArray[idx].obj);
          break;
        case 'NUMERICINPUT':
          _self.setListenObjOldValue(listenObjArray[idx].obj, listenObjArray[idx].obj.val());
          _self.listenNumericInput(listenObjArray[idx].obj);
          break;
        default:
          break;
        }
      }
      // support Ctrl+z and Ctrl+y
      // TODO: in some OS, redo is not ctrl+y but ctrl+shift+z.
      $(document).on('keydown', function(e) {
        var eventObj = window.event ? window.event : e;
        if (!eventObj.ctrlKey || (eventObj.keyCode != 90 && eventObj.keyCode != 89)) {
          return;
        }
        eventObj.preventDefault();
        if (eventObj.ctrlKey && eventObj.keyCode == 90) {
          _self.stack.canUndo() && _self.stack.undo();
        }
        if (eventObj.ctrlKey && eventObj.keyCode == 89) {
          _self.stack.canRedo() && _self.stack.redo();
        }
      });
    };

    /**
     * [getListenObjArray get all input types in the given form]
     * 
     * @return {Array} [all input object and its type]
     */
    UndoRedo.prototype.getListenObjArray = function() {
      var selectorMap = {
        TEXTAREA : 'textarea',// textarea
        TEXTFIELD : '[data-controller="textField"]',// textfield
        SELECT : '[data-controller="selectController"]',// select
        CHECKBOX : '.wap-checkbox',// checkbox
        CHECKBOXGROUP : '.wap-checkboxGroup',// checkbox group
        RADIOGROUP : '.wap-radioGroup',// radio group
        DATEPICKER : '.wap-wapDatepicker',// date picker
        TIMEPICKER : '.wap-timePicker',// time picker
        DURATIONINPUT : '.wap-durationinput', // duration input
        MONEYINPUT : '.wap-moneyInput', // money input
        NUMERICINPUT : '.wap-numericInput' // numeric input
      };
      var listenObjArray = [];

      for ( var selectType in selectorMap) {
        var selector = selectorMap[selectType];
        var $inputObjs = $form.find(selector);
        if (selectType === 'TEXTFIELD' || selectType === 'DURATIONINPUT') {
          $inputObjs = $inputObjs.find('input');
        }
        $inputObjs.each(function(index, element) {
          listenObjArray.push({
            objType : selectType,
            obj : $(element)
          });
        });
      }
      return listenObjArray;
    };

    /**
     * [getListenObjOldValue return given object's value]
     * 
     * @param {Object} listenObj [current input object]
     * @return {string|boolean|Array} [the old value of current input object]
     */
    UndoRedo.prototype.getListenObjOldValue = function($listenObj) {
      var selector = $listenObj.selector ? $listenObj.selector : $listenObj.attr('data-field-id');
      selector = selector ? selector : $listenObj.attr('id');
      return this.listenObjCurrValue[selector];
    };

    /**
     * [setListenObjOldValue set value for given input object]
     * 
     * @param {Object} $listenObj [current input object]
     * @param {string|boolean|Array} value [the new value for current input object]
     */
    UndoRedo.prototype.setListenObjOldValue = function($listenObj, value) {
      var selector = $listenObj.selector ? $listenObj.selector : $listenObj.attr('data-field-id');
      selector = selector ? selector : $listenObj.attr('id');
      this.listenObjCurrValue[selector] = value;
    };

    /**
     * [listenTextarea listen textarea and record operation on it every 1 second]
     * 
     * @param {Object} $textareaObj [current textarea object]
     */
    UndoRedo.prototype.listenTextarea = function($textareaObj) {
      var _self = this;

      $textareaObj.on('keyup input propertychange change', _.throttle(function() {
        var oldValue = _self.getListenObjOldValue($textareaObj);
        var newValue = $textareaObj.val();
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('TEXTAREA', $textareaObj, oldValue, newValue));
          _self.setListenObjOldValue($textareaObj, newValue);
        }
      }, delayTime));
    };

    /**
     * [listenSelect listen select and record operation on it]
     * 
     * @param {Object} $selectObj [current select object]
     */
    UndoRedo.prototype.listenSelect = function($selectObj) {
      var _self = this;

      $selectObj.on('change', function(event) {
        var oldValue = _self.getListenObjOldValue($selectObj);
        var newValue = $selectObj.selectController('getValue');
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('SELECT', $selectObj, oldValue, newValue));
          _self.setListenObjOldValue($selectObj, newValue);
        }
      });
    };

    /**
     * [listenCheckbox listen single checkbox and record operation on it]
     * 
     * @param {Object} $checkboxObj [current checkbox object]
     */
    UndoRedo.prototype.listenCheckbox = function($checkboxObj) {
      var _self = this;

      $checkboxObj.on('click', function(event) {
        var oldValue = _self.getListenObjOldValue($checkboxObj);
        var newValue = $checkboxObj.checkbox('isChecked');
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('CHECKBOX', $checkboxObj, oldValue, newValue));
          _self.setListenObjOldValue($checkboxObj, newValue);
        }
      });
    };

    /**
     * [listenCheckboxGroup listen checkbox-group and record operation on it]
     * 
     * @param {Object} $checkboxGroupObj [current checkbox-group object]
     */
    UndoRedo.prototype.listenCheckboxGroup = function($checkboxGroupObj) {
      var _self = this;

      $checkboxGroupObj.on('click', function(event) {
        var oldValue = _self.getListenObjOldValue($checkboxGroupObj);
        var newValue = $checkboxGroupObj.checkboxGroup('getCheckedIdList');
        if (newValue.toString() != oldValue.toString()) {
          _self.stack.execute(new UndoRedo.Command('CHECKBOXGROUP', $checkboxGroupObj, oldValue, newValue));
          _self.setListenObjOldValue($checkboxGroupObj, newValue);
        }
      });
    };

    /**
     * [listenTextField listen textField and record operation on it]
     * 
     * @param {Object} $textFieldObj [current textField object]
     */
    UndoRedo.prototype.listenTextField = function($textFieldObj) {
      var _self = this;

      $textFieldObj.on('keyup input propertychange change', _.throttle(function() {
        var oldValue = _self.getListenObjOldValue($textFieldObj);
        var newValue = $textFieldObj.val();
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('TEXTFIELD', $textFieldObj, oldValue, newValue));
          _self.setListenObjOldValue($textFieldObj, newValue);
        }
      }, delayTime));
    };

    /**
     * [listenRadioGroup listen radioGroup and record operation on it]
     * 
     * @param {Object} $radioGroupObj [current radio-group object]
     */
    UndoRedo.prototype.listenRadioGroup = function($radioGroupObj) {
      var _self = this;

      $radioGroupObj.on('click', function(event) {
        var oldValue = _self.getListenObjOldValue($radioGroupObj);
        var newValue = $radioGroupObj.radioGroup('getCheckedId');
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('RADIOGROUP', $radioGroupObj, oldValue, newValue));
          _self.setListenObjOldValue($radioGroupObj, newValue);
        }
      });
    };

    /**
     * [listenDatePicker listen datePicker and record operation on it]
     * 
     * @param {Object} $datePickerObj [current date picker object]
     */
    UndoRedo.prototype.listenDatePicker = function($datePickerObj) {
      var _self = this;

      $datePickerObj.on('changeDate', function(event) {
        var oldValue = _self.getListenObjOldValue($datePickerObj);
        var newValue = $datePickerObj.wapDatepicker('getDate');
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('DATEPICKER', $datePickerObj, oldValue, newValue));
          _self.setListenObjOldValue($datePickerObj, newValue);
        }
      });
    };

    /**
     * [listenTimePicker listen timePicker and record operation on it]
     * 
     * @param {Object} $timePickerObj [current time picker object]
     */
    UndoRedo.prototype.listenTimePicker = function($timePickerObj) {
      var _self = this;

      $timePickerObj.on('focusout complete', function(event) {
        var oldValue = _self.getListenObjOldValue($timePickerObj);
        var newValue = $timePickerObj.timePicker('getTime');
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('TIMEPICKER', $timePickerObj, oldValue, newValue));
          _self.setListenObjOldValue($timePickerObj, newValue);
        }
      });
    };

    /**
     * [listenDurationInput listen durationInput and record operation on it]
     * 
     * @param {Object} $durationInputObj [current duration input object]
     */
    UndoRedo.prototype.listenDurationInput = function($durationInputObj) {
      var _self = this;

      $durationInputObj.on('touchstart keyup input propertychange change', _.throttle(function() {
        var oldValue = _self.getListenObjOldValue($durationInputObj);
        var newValue = $durationInputObj.val();
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('DURATIONINPUT', $durationInputObj, oldValue, newValue));
          _self.setListenObjOldValue($durationInputObj, newValue);
        }
      }, delayTime));
    };

    /**
     * [listenMoneyInput listen moneyInput and record operation on it]
     * 
     * @param {Object} $moneyInputObj [current money input object]
     */
    UndoRedo.prototype.listenMoneyInput = function($moneyInputObj) {
      var _self = this;

      $moneyInputObj.on('keyup input propertychange change', _.throttle(function() {
        var oldValue = _self.getListenObjOldValue($moneyInputObj);
        var newValue = $moneyInputObj.val();
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('MONEYINPUT', $moneyInputObj, oldValue, newValue));
          _self.setListenObjOldValue($moneyInputObj, newValue);
        }
      }, delayTime));
    };

    /**
     * [listenNumericInput listen numericInput and record operation on it]
     * 
     * @param {Object} $numericInputObj [current numeric input object]
     */
    UndoRedo.prototype.listenNumericInput = function($numericInputObj) {
      var _self = this;

      $numericInputObj.on('keyup input propertychange change', function(event) {
        var oldValue = _self.getListenObjOldValue($numericInputObj);
        var newValue = $numericInputObj.val();
        if (newValue != oldValue) {
          _self.stack.execute(new UndoRedo.Command('NUMERICINPUT', $numericInputObj, oldValue, newValue));
          _self.setListenObjOldValue($numericInputObj, newValue);
        }
      });
    };

    // ----------------UndoRedo Stack---------------------//
    /**
     * [UndoRedo.Stack: the duty of UndoRedo.Stack is to record operations on input objects]
     * 
     * @param {UndoRedo} parent [used to set listened object's value when do execute/undo/redo operations]
     * @constructor
     */
    UndoRedo.Stack = function(parent) {
      this.parent = parent;
      this.undoCommandQue = [];
      this.redoCommandQue = [];
    };

    /**
     * [execute add operation to stack and clear redo command queue]
     * 
     * @param {UndoRedo.Command} command [record input object parameters]
     */
    UndoRedo.Stack.prototype.execute = function(command) {
      if (this.canRedo()) { // when we do change, redo should become unable.
        this.resetRedoCommandQue();
      }
      command.execute();
      this.undoCommandQue.push(command);
      this.changed();
    };

    /**
     * [canUndo judge undoCommandQue is empty or not. If it is not empty, allow to undo; otherwise, not allow to undo]
     * 
     * @return {boolean} [undoCommandQue is empty or not]
     */
    UndoRedo.Stack.prototype.canUndo = function() {
      return this.undoCommandQue.length > 0;
    };

    /**
     * [undo do undo operations]
     */
    UndoRedo.Stack.prototype.undo = function() {
      var command = this.undoCommandQue.pop();
      if (!command)
        return;
      command.undo();
      this.redoCommandQue.push(command);
      this.parent.setListenObjOldValue(command.obj, command.oldValue);
      this.changed();
    };

    /**
     * [canRedo judge redoCommandQue is empty or not. If it is not empty, allow to redo; otherwise, not allow to redo]
     * 
     * @return {boolean} [redoCommandQue is empty or not]
     */
    UndoRedo.Stack.prototype.canRedo = function() {
      return this.redoCommandQue.length > 0;
    };

    /**
     * [redo do redo operation]
     */
    UndoRedo.Stack.prototype.redo = function() {
      var command = this.redoCommandQue.pop();
      if (!command)
        return;
      command.redo();
      this.undoCommandQue.push(command);
      this.parent.setListenObjOldValue(command.obj, command.newValue);
      this.changed();
    };

    /**
     * [changed once stack is changed, judge undo/redo operations are allowed or not. If it is not allowed, disable
     * corresponding buttons]
     */
    UndoRedo.Stack.prototype.changed = function() {
      $undo.attr('disabled', !this.canUndo());
      $redo.attr('disabled', !this.canRedo());
    };

    /**
     * [resetCommandQue clear undoCommandQue/redoCommandQue]
     */
    UndoRedo.Stack.prototype.resetCommandQue = function() {
      this.resetUndoCommandQue();
      this.resetRedoCommandQue();
    };

    /**
     * [resetUndoCommandQue clear undoCommandQue]
     */
    UndoRedo.Stack.prototype.resetUndoCommandQue = function() {
      this.undoCommandQue.splice(0, this.undoCommandQue.length);
    };

    /**
     * [resetRedoCommandQue clear redoCommandQue]
     */
    UndoRedo.Stack.prototype.resetRedoCommandQue = function() {
      this.redoCommandQue.splice(0, this.redoCommandQue.length);
    };

    // ----------------UndoRedo Command---------------------//
    /**
     * [UndoRedo.Command: the duty of UndoRedo.Command is record the detail of operation on input objects]
     * 
     * @param {string} objType [type of input object]
     * @param {Object} $obj [input object]
     * @param {string|boolean|Array} oldValue [old value of current input object]
     * @param {string|boolean|Array} newValue [new value of current input object]
     */
    UndoRedo.Command = function(objType, $obj, oldValue, newValue) {
      this.constructor(objType, $obj, oldValue, newValue);
      return this;
    };

    /**
     * [constructor generate a Undo.Command]
     * 
     * @param {string} objType [type of input object]
     * @param {Object} $obj [input object]
     * @param {string|boolean|Array} oldValue [old value of current input object]
     * @param {string|boolean|Array} newValue [new value of current input object]
     */
    UndoRedo.Command.prototype.constructor = function(objType, $obj, oldValue, newValue) {
      this.objType = objType;
      this.obj = $obj;
      this.oldValue = oldValue;
      this.newValue = newValue;
    };

    /**
     * [execute before add operation to stack, if we need to do some special operation on the command, override this
     * method]
     */
    UndoRedo.Command.prototype.execute = function() {
      // - TODO: if neccessary to edit command, override this method
    };

    /**
     * [undo do undo operation: change current input object's value to its old value]
     */
    UndoRedo.Command.prototype.undo = function() {
      this.changeValue('oldValue');
    };

    /**
     * [redo do redo operation: change current input object's value to its new value]
     */
    UndoRedo.Command.prototype.redo = function() {
      this.changeValue('newValue');
    };

    /**
     * [changeValue change current input object's value]
     * 
     * @param {string} valueType [flag to set current input object with its old value or new value]
     */
    UndoRedo.Command.prototype.changeValue = function(valueType) {
      var value;
      if (valueType === 'oldValue') {
        value = this.oldValue;
      } else {
        value = this.newValue;
      }

      switch (this.objType) {
      case 'TEXTAREA':
        this.obj.val(value);
        break;
      case 'SELECT':
        this.obj.selectController('setValue', value);
        break;
      case 'CHECKBOX':
        this.obj.checkbox('checked', value);
        break;
      case 'CHECKBOXGROUP':
        this.obj.checkboxGroup('clearAll');
        this.obj.checkboxGroup('setCheckIdList', value);
        break;
      case 'TEXTFIELD':
        this.obj.val(value);
        break;
      case 'RADIOGROUP':
        this.obj.radioGroup('setCheckId', value);
        break;
      case 'DATEPICKER':
        this.obj.wapDatepicker('setDate', value);
        break;
      case 'TIMEPICKER':
        this.obj.timePicker('setTime', value);
        break;
      case 'DURATIONINPUT':
        this.obj.val(value);
        break;
      case 'MONEYINPUT':
        this.obj.val(value);
        break;
      case 'NUMERICINPUT':
        this.obj.val(value);
        break;
      default:
        break;
      }
    };

    this.init();

  };

}(jQuery));

/**
 * show furigana(japanese phonetic character) automatically when entered text in another text input.<br>
 * It is used in textField component. not intended to be used alone.
 * 
 * This component is ported from kanaTextExtension.js.<br>
 * original is in http://mashimonator.weblike.jp/library/2012/09/javascript-3-5.html
 */

(function($) {
  $.widget('wap.furiganaField', $.wap.abstractWidget, {
    options : {
      katakana : false,
      sourceInput : null
    },

    _storage : {
      timer : null,
      baseKana : '',
      ignoreString : '',
      values : [],
      input : ''
    },

    _config : {
      kanaExtractionPattern : /[^ 　ぁあ-んー]/g,
      kanaCompactingPattern : /[ぁぃぅぇぉっゃゅょ]/g
    },

    _create : function() {
      this._super();
      this._sourceInput = $(this.options.sourceInput);
      this._sourceInput.on('focus', this._focus.bind(this));
      this._sourceInput.on('keydown', this._keydown.bind(this));
      this._sourceInput.on('blur', this._blur.bind(this));
    },

    _focus : function() {
      this._prepareObserve();
      this._startObserve();
    },

    _keydown : function() {
      if (this._inconvert) {
        this._prepareObserve();
      }
    },

    _blur : function() {
      this._stopObserve();
    },

    _startObserve : function() {
      this._timer = setInterval(this._checkValue.bind(this), 10);
    },

    _stopObserve : function() {
      clearInterval(this._timer);
    },
    _prepareObserve : function() {
      this._inconvert = false;
      this._storage.baseKana = this.element.val();
      this._storage.ignoreString = this._sourceInput.val();
    },
    _set : function() {
      this._storage.baseKana = this._storage.baseKana + this._storage.values.join('');
      this._inconvert = true;
      this._storage.values = [];
    },

    _clear : function() {
      this._inconvert = false;
      this._storage.baseKana = '';
      this._storage.ignoreString = '';
      this._storage.input = '';
      this._storage.values = [];
    },

    _checkValue : function() {
      var sourceText = this._sourceInput.val();
      if (sourceText) {
        sourceText = this._clean(sourceText);
        if (sourceText != this._storage.input) {
          this._storage.input = sourceText;
          if (!this._inconvert) {
            var values = sourceText.replace(this._config.kanaExtractionPattern, '').split('');
            this._convert(values);
            this._setKanaStr(values);
          }
        }
      } else {
        this._clear();
        this._setKanaStr();
      }
    },

    _convert : function(values) {
      if (!this._inconvert) {
        var x = this._storage.values.length - values.length;
        if (Math.abs(x) > 1) {
          var tmpValues = values.join('').replace(this._config.kanaCompactingPattern, '').split('');
          var y = this._storage.values.length - tmpValues.length;
          var z = Math.abs(y);
          if (z > 1) {
            this._set();
          }
        } else if (this._storage.values.length == this._storage.input.length
            && this._storage.values.join('') != this._storage.input) {
          this._set();
        }
      }
    },

    _setKanaStr : function(values) {
      if (!this._inconvert) {
        if (values) {
          this._storage.values = values;
        }
        var val = this._convert2kana(this._storage.baseKana + this._storage.values.join(''));
        if (this.element.val() != val) {
          this.element.val(val);
        }
      }
    },

    _convert2kana : function(value) {
      if (this.options.katakana) {
        var str = '';
        for (var i = 0, len = value.length; i < len; i++) {
          var c = value.charCodeAt(i);
          if (this._isHiragana(c)) {
            str += String.fromCharCode(c + 96);
          } else {
            str += value.charAt(i);
          }
        }
        return str;
      } else {
        return value;
      }
    },

    _isHiragana : function(character) {
      return ((character >= 12353 && character <= 12435) || character == 12445 || character == 12446);
    },

    _clean : function(value) {
      if (value.indexOf(this._storage.ignoreString) > -1) {
        return value.replace(this._storage.ignoreString, '');
      } else {
        var ignoreArray = this._storage.ignoreString.split('');
        var inputArray = value.split('');
        for (var i = 0, len = ignoreArray.length; i < len; i++) {
          switch (ignoreArray[i]) {
          case inputArray[i]:
            inputArray[i] = '';
            break;
          }
        }
        return inputArray.join('');
      }
    }
  });
})(jQuery);
/**
 * moneyField A thin wrapper of $.wap.moneyInput
 * 
 * @author kikuchi7
 */
(function($) {
  $.widget('wap.moneyField', $.wap.field || '$.wap.field', {

    _create : function() {
      this._super();
      this.inputElement.moneyInput({});
      var that = this;
      var label = this.labelElement;

      label.on('click', function() {
        that.focus();
      });

    },

    _destroy : function() {
      this.contentElement.remove();
    },

    setValue : function(value, callback) {
      this.inputElement.moneyInput('setValue', value);
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    getValue : function() {
      return this.inputElement.moneyInput('getValue');
    },

    setText : function(value) {
      this.inputElement.moneyInput('setText', value);
    },

    getText : function() {
      return this.inputElement.moneyInput('getText');
    },

    validate : function() {
      return this.inputElement.moneyInput('validate');
    },

    clear : function() {
      this.inputElement.moneyInput('clear');
    },

  });

}(jQuery));

/**
 * numericField A thin wrapper of $.wap.numericInput
 * 
 * @author kikuchi7
 */
(function($) {
  $.widget('wap.numericField', $.wap.field || '$.wap.field', {

    _create : function() {
      this._super();
      this.inputElement.numericInput({});
      this.inputElement.addClass('numeric-field');
      var that = this;
      var label = this.labelElement;

      label.on('click', function() {
        that.focus();
      });

    },

    _destroy : function() {
      this.contentElement.remove();
    },

    setValue : function(value, callback) {
      this.inputElement.numericInput('setValue', value);
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    getValue : function() {
      return this.inputElement.numericInput('getValue');
    },

    validate : function() {
      return this.inputElement.numericInput('validate');
    },

    clear : function() {
      this.inputElement.numericInput('clear');
    },
  });

}(jQuery));

/**
 * wap.radioField
 * 
 * You must use with [wap.radioGroup] widget (wap-radio-group.js).<br>
 * This is supported by [wap.form] widget.
 * 
 * @author nishiyama-k
 * @since 2014/05/07
 */
(function($) {
  $.widget('wap.radioField', $.wap.field || '$.wap.field', {

    // requireは$wap.fieldで処理
    options : {
      hinttext : '',// 初期値が空文字ならpopoverされない
      hinttitle : '',
      hintarea : 'auto right',
      hinttrigger : 'hover',
      hintdelay : 500,
      message : {
        required : 'This field is required to select.',
      },
      greedValidationMessage : false,
      customValidator : null,
    },

    _create : function() {
      this._super();// optionsのセットは継承元で
      this._eachHintElement = this.element.find('[data-hinttext]');
      this._initPopover();
      this._setRequired();
      this.messageTarget = this.element.radioGroup().find(".radio:last");
    },

    _destroy : function() {
      this.contentElement.remove();
    },

    _initPopover : function() {
      this.element.popover({
        content : this.options.hinttext,
        title : this.options.hinttitle,
        placement : this.options.hintarea,
        trigger : this.options.hinttrigger,
        delay : {
          show : this.options.hintdelay,
          hide : 0
        }
      });

      this._initEachPopover();
    },

    _initEachPopover : function() {
      var that = this;
      $.each(this._eachHintElement, function() {
        $(this).popover(that._getEachPopoverOption($(this)));
      });
    },

    _getEachPopoverOption : function(element) {
      return {
        content : element.data('hinttext') || '',
        title : element.data('hinttitle') || '',
        placement : element.data('hintarea') || 'auto right',
        trigger : element.data('hinttrigger') || 'hover',
        delay : {
          show : element.data('hintdelay') || 500,
          hide : 0
        }
      };
    },

    showHint : function() {
      this.showGroupHint();
      this.showEachHint();
    },

    showGroupHint : function() {
      this.element.popover({
        content : this.options.hinttext,
        placement : this.options.hintarea,
        trigger : this.options.hinttrigger
      }).popover('show');
    },

    showEachHint : function() {
      var that = this;
      $.each(this._eachHintElement, function() {
        $(this).popover(that._getEachPopoverOption($(this))).popover('show');
      });
    },

    hideHint : function() {
      this.element.popover('hide');
      this._hideEachHint();
    },

    _hideEachHint : function() {
      $.each(this._eachHintElement, function() {
        $(this).popover('hide');
      });
    },

    setValue : function(value, callback) {
      this.element.radioGroup().radioGroup('setCheckValue', value);
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    getValue : function() {
      return this.element.radioGroup().radioGroup('getCheckedValue');
    },

    clear : function() {
      this.element.radioGroup('clear', false);
    },

    validate : function() {
      var messages = [];
      var requiredResult = this.options.required && (!this.element.radioGroup().radioGroup('isChecked'));
      if (requiredResult) {
        var result = {};
        result.state = "error";
        result.messageFor = "required-error";
        result.message = this.options.message.required;
        messages.push(result);
        // this.element.radioGroup().addClass('has-error');// TODO
      } else {
        // this.element.radioGroup().removeClass('has-error');// TODO
      }
      if (null != this.options.customValidator) {
        var customResult = this.options.customValidator();
        if (customResult.state == "error") {
          this.updatestatus(this, customResult.state);
          messages.push(customResult);
        }
      }
      messages = messages.sort(this.compareStatus);

      // finally
      if (messages.length === 0) {
        this.updatestatus(this.STATUS_ISAOK);// ignore autoStatus
        this.hideMessage();
      } else {
        if (this.options.automessage || this.isMessageDisplayed()) {
          this.updateMessage(messages[0]);
        }
        if (this.options.autostatus) {
          this.updatestatus(messages[0].state);
        }
      }
      return messages;
    },

    _setRequired : function() {
      var that = this;
      this.element.radioGroup().on('click keyup', function(ev) {
        that.validate();
      });
    },

    focus : function(value) {
      this.element.radioGroup().radioGroup('focus', value);
    }
  });

  // wap.formから生成されるので、コメントアウト
  // $(function() {
  // var autoInstantiationClass = $.wap.radioField.prototype.widgetFullName;
  // $('.' + autoInstantiationClass).radioField();
  // });
}(jQuery));

/**
 * 
 * @author kikuchi7
 */
(function($) {
  $.widget('wap.selectController', $.wap.field || '$.wap.field', {

    options : {
      message : {
        required : 'This field is required to select.',
      },
    },

    _create : function() {
      this._super();
      var that = this;
      this.selectElement = this.element.find('select');
      this.hintTarget = this.selectElement;
      this.messageTarget = this.selectElement;
      this.statusTarget = this.selectElement;
      this.requiredTarget = this.selectElement;
      this.$storeFilterOptions = null;// add by koyama_y

      if (this.options.hinttext != null) {
        this._createHint();// I don't know why but this line is necessary here, not super
      }
      ;
      if (null != this.selectElement.attr('data-required-error')) {
        this.options.message.required = this.selectElement.attr('data-required-error');
      }
      ;

      if (this.options.required) {
        that._setRequired();
      }
      ;
    },

    _destroy : function() {
      this.selectElement.remove();
    },

    _setRequired : function() {
      var that = this;
      this.selectElement.on('keyup change', function(ev) {
        that.validate();
      });
    },

    setValue : function(values, callback) {
      this.selectElement.val(values);
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    getValue : function() {
      return this.selectElement.val();
    },

    clear : function() {
      var value;
      if (this.selectElement.find('option[selected]').length > 0) {
        // reset to default value, so this is not 'option:selected'
        value = this.selectElement.find('option[selected]').val();
      } else {
        value = this.selectElement.find('option:first').val();
      }
      this.selectElement.val(value);
    },

    validate : function() {
      var messages = [];
      if (this.options.required) {
        var requiredResult = this._chkRequired();
        messages.push(requiredResult);
      }
      messages = messages.sort(this.compareStatus);
      // finally
      if (messages.length === 0) {
        this.updatestatus(this.STATUS_ISAOK);// ignore autoStatus
        this.hideMessage();
      } else {
        if (this.options.automessage || this.isMessageDisplayed()) {
          this.updateMessage(messages[0]);
        }
        if (this.options.autostatus) {
          this.updatestatus(messages[0].state);
        }
      }
      return messages;
    },

    focus : function() {
      this.selectElement.focus();
    },

    /**
     * add option
     * 
     * @param value
     * @param displayName(null or undefined is OK)
     */
    addOption : function(value, displayName) {
      var $addOptionEl = $('<option>');
      $addOptionEl.val(value);
      if (displayName) {
        $addOptionEl.html(displayName);
      }
      this.selectElement.append($addOptionEl);
    },

    /**
     * remove selected option.<br>
     * Then, first option element is focused.
     */
    removeSelectedOption : function() {
      this.selectElement.find('option:selected').remove();
    },

    /**
     * remove all options
     */
    removeAllOptions : function() {
      this.selectElement.find('option').remove();
    },

    /**
     * narrow down options using filter function.
     * 
     * @param storeBackup
     * @param filterFunc <br>
     *          arguments : index, value, displayName.<br>
     *          return : true(not show)/false(show)
     */
    filter : function(storeBackup, filterFunc) {
      var $options = this.selectElement.find('option');

      if (storeBackup) {
        this.$storeFilterOptions = $options;
      }

      this.removeAllOptions();

      for (var i = 0, n = $options.length; i < n; i++) {
        var $option = $options.eq(i);
        if (!filterFunc(i, $option.val(), $option.text())) {
          this.addOption($option.val(), $option.text());
        }
      }
    },

    /**
     * REDO filter action
     * 
     * @param clearStoreOptions(true/false)
     */
    redoFilter : function(clearStoreOptions) {
      if (this.$storeFilterOptions === null || this.$storeFilterOptions.length === 0) {
        return;
      }

      this.removeAllOptions();
      for (var i = 0, n = this.$storeFilterOptions.length; i < n; i++) {
        var $option = this.$storeFilterOptions.eq(i);
        this.addOption($option.val(), $option.text());
      }

      if (clearStoreOptions) {
        this.$storeFilterOptions = null;
      }
    },
  });

}(jQuery));

jQuery(function($) {

});

/*
 * automatically convert when inputing full-width character in half-width-only component
 */
function convertToHalfWidth($element) {
  var str = $element.val();
  /**
   * The conversion code distance 
   * @const {Integer}
  */
  var SPECIAL_BASIC = 12256;
  var ASCII_BASIC = 65248;
  /**
   * The conversion code head 
   * @const {Integer}
  */
  var SPECIAL_CODE = 12288;
  var ASCII_START = 65281;
  /**
   * The conversion code end 
   * @const {Integer}
  */
  var ASCII_END = 65375;

  var result = '';
  for (var i = 0, n = str.length; i < n; i++) {
    var code = str.charCodeAt(i);
    if (str.charCodeAt(i) === SPECIAL_CODE) {
      result += String.fromCharCode(str.charCodeAt(i) - SPECIAL_BASIC);
    } else if (code >= ASCII_START && code < ASCII_END) {
      result += String.fromCharCode(str.charCodeAt(i) - ASCII_BASIC);
    } else {
      result += String.fromCharCode(str.charCodeAt(i));
    }
  }
  $element.val(result);
}


/**
 * Please apply this component to button tag
 * 
 * @author sasaki_yu
 */
(function($) {
  $.widget("wap.singleSelect", $.wap.abstractWidget, {

    options : {
    },

    _create : function() {
      
      var selectOptions;
      if (!!this.element.attr('data-options')) {
        var delimiter = this.element.attr('data-delimiter') || this.options.delimiter || ',';
        selectOptions = this.element.attr('data-options').split(delimiter);
      } else if (!!this.optiions.selectOptions && Array.isArray(this.optiions.selectOptions)) {
        selectOptions = this.optiions.selectOptions;
      } else {
        selectOptions = [];
      }
      
      var optionsHtml = '';
      $.each(selectOptions, function(idx, str) {
        optionsHtml += '<li class="select-option option-idx-' + idx + '" data-idx="' + idx + '">' + str + '</li>'
      });
      
      this.element.html('<span class="value-display"></span>' +
          '<i class="wap-icon-angle-down"></i>' +
          '<ul class="select-options">' + optionsHtml + '</ul>');
      
      if (!this.element.hasClass('wap-single-select')) {
        this.element.addClass('wap-single-select');
      }

      this.$input_ = this.element.find('.value-display');
      if (!!this.element.attr('data-default-value')) {
        this.setValue(this.element.attr('data-default-value'))
      } else {
        this.clear();
      }
      
      this._bindEvents();
    },

    _destroy : function() {
      this.element.off();
    },

    _bindEvents: function() {
      this.element.on('click', this._onClick.bind(this));
      this.element.on('blur', this._onBlur.bind(this));
      this.element.on('mouseover', this._onMouseover.bind(this));
      this.element.on('keydown', this._onKeydown.bind(this));
    },

    _onClick: function(e) {
      var $target = $(e.target);
      if ($target.hasClass('select-option')) {
        this.setValue($target.text());
        this.closeOptions();
      } else {
        this.toggleOptions();
      }
    },

    _onBlur: function(e) {
      var $selecting = this.element.find('.selecting');
      if ($selecting.length > 0) {
        this.setValue($selecting.text());
      }
      this.closeOptions();
    },

    _onMouseover: function(e) {
      var $target = $(e.target);
      if ($target.hasClass('select-option') && !$target.hasClass('selecting')) {
        this.element.find('.select-option').removeClass('selecting');
        $target.addClass('selecting');
      }
    },

    _onKeydown: function(e) {
      var $target = $(e.target);
      var stopEvent = false;
      var currentIndex;
      var $next;
      var $options = this.element.find('.select-options');
      var $selecting = this.element.find('.select-option.selecting');
      if ($selecting.length === 0) {
        $selecting = this.element.find('.select-option.selected');
      }
      if (e.key == 'ArrowUp') {
        var lastIndex = this.element.find('.select-option').length - 1;
        currentIndex = $selecting.length === 0 ? lastIndex + 1 : Number($selecting.attr('data-idx'));
        $next = this.element.find('.option-idx-' + (currentIndex - 1));
        if ($next.length === 0) {
          $next = this.element.find('.option-idx-' + lastIndex);
        }
        if ($options.hasClass('opened')) {
          $selecting.removeClass('selecting');
          $next.addClass('selecting');
        } else {
          this.element.find('.selected').removeClass('selected');
          $next.addClass('selected');
        }
        this._setCaption($next.text());
        stopEvent = true;
      } else if (e.key == 'ArrowDown') {
        currentIndex = $selecting.length === 0 ? -1 : Number($selecting.attr('data-idx'));
        var $next = this.element.find('.option-idx-' + (currentIndex + 1));
        if ($next.length === 0) {
          $next = this.element.find('.option-idx-0');
        }
        if ($options.hasClass('opened')) {
          $selecting.removeClass('selecting');
          $next.addClass('selecting');
        } else {
          this.element.find('.selected').removeClass('selected');
          $next.addClass('selected');
        }
        this._setCaption($next.text());
        stopEvent = true;
      } else if (e.key === 'Enter') {
        this.setValue($selecting.text());
      } else if (e.key === 'Escape') {
        $selecting.removeClass('selecting');
        this._setCaption(this.element.find('.selected').text());
        this.closeOptions();
      }
      if (stopEvent) {
        e.preventDefault();
        e.stopPropagation();
      }
    },
    
    _setCaption : function(text) {
      if (text === this.$input_.text()) {
        return;
      }
      this.$input_.text(text);
      this.$input_.removeClass('text-placeholder');
      this.element.trigger('change');
    },

    setValue : function(text) {
      this.element.find('.selecting').removeClass('selecting');
      this.element.find('.selected').removeClass('selected');
      if (!!text) {
        $.each(this.element.find('.select-option'), function(idx, elm) {
          var $elm = $(elm);
          if ($elm.text() === text) {
            $elm.addClass('selected');
          }
        })
        this._setCaption(text);
      } else {
        this.clear();
      }
    },

    getValue : function() {
      return this.$input_.text();
    },

    toggleOptions : function() {
      var $options = this.element.find('.select-options');
      if ($options.hasClass('opened')) {
        this.closeOptions();
      } else {
        this.openOptions();
      }
    },

    openOptions : function() {
      var $options = this.element.find('.select-options');
      $options.addClass('opened');
    },

    closeOptions : function() {
      var $options = this.element.find('.select-options');
      $options.removeClass('opened');
    },

    clear : function() {
      var placeholder = this.element.attr('placeholder') || '';
      this.$input_.text(placeholder);
      this.$input_.addClass('text-placeholder');
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.singleSelect.prototype.widgetFullName;
    $('.' + autoInstantiationClass).singleSelect();
  });

}(jQuery));

(function($) {
  $.widget("wap.textField", $.wap.field, {
    options : {
      hinttext : null,
      hintarea : 'right',
      min : -1,
      max : -1,
      message : {
        required : 'This field is required to fill in.',
        minlength : 'Not reached to minimum length.',
      },
      greedValidationMessage : false,
      customValidator : null,
      labeliser : null,
      overflowTooltip : false,
      overflowTooltipArea : 'bottom',
      mask : null,
      autoconvert : false,
      inputType : null,
      furiganaSource : null,
      furiganaUsingKatakana : false
    },

    _create : function() {
      this._super();
      var that = this;
      var input = this.inputElement;
      var label = this.labelElement;
      var div = this.divElement;

      if (null != input.attr('minlength')) {
        this.options.min = input.attr('minlength');
      }
      if (null != input.attr('maxlength')) {
        this.options.max = input.attr('maxlength');
      }
      if (null != input.attr('data-minlength-error')) {
        this.options.message.minlength = input.attr('data-minlength-error');
      }
      if (null != input.attr('data-required-error')) {
        this.options.message.required = input.attr('data-required-error');
      }
      //JQuery base class will not do it for me, I tested.
      if( null != input.data('input-type')){
        this.options.inputType = input.data('input-type');
        $(this.inputElement).on('paste', $.proxy(this._processPaste, this));
      }
      if (that.options.autoconvert) {
        this.setAutoConvert();
      }
      if (this.options.required) {
        that._setRequired();
      }

      if (this.options.regularExp != null) {
        that._setRegularExpChk();
      }

      if (this.options.removeExp != null) {
        this.inputElement.on('keyup keydown', function(ev) {
          that._removeNotList();
        });
      }

      if (this.options.numonly) {
        $(this.inputElement).on('keypress', this._numKeyPress);
      }

      if (this.options.min > 0 || this.options.max > 0) {
        that._setLengthChk();
      }

      if (this.options.dropdown) {
        this._dropdown(input);
      }
      $(this.inputElement).on('blur', function() {
        that._blur.apply(that);
      });
      $(this.inputElement).on('focus', function() {
        that._focus.apply(that);
      });

      // overflow-tooltip option. add by koyama_y
      if (null != input.attr('overflow-tooltip-area')) {
        this.options.overflowTooltipArea = input.attr('overflow-tooltip-area');
      }
      if (null != input.attr('overflow-tooltip')) {
        this.options.overflowTooltip = input.attr('overflow-tooltip');
        $(this.inputElement).css('text-overflow', 'ellipsis');
        this._tooltip();
      }

      label.on('click', function() {
        that.focus();
      });

      if (this.options.mask) {
        input.inputmask(this.options.mask);
      }

      if (this.options.furiganaSource) {
        var source = $(this.options.furiganaSource).find('input:first');
        $(this.inputElement).furiganaField({
          sourceInput : source,
          katakana : this.options.furiganaUsingKatakana
        });
      }

      if (this.options.whitelist) {
        this._enableWhiteList(this.options.whitelist);
      }
    },
    _processPaste: function(){
      //We can not get the paste content directly. 20 is just picked randomly.
      setTimeout($.proxy(this._processPasteContent, this), 20);
    },
    _processPasteContent: function(){
      /*
       * Check if a number is an area code. 
       * @return {boolean} true means query number is an area code in Japan
       */
      function checkAreaCode(num){

        //const array of strings
        /* TODO: This kind of implementation is not good idea for future extension. 
         *       Improve after mockup.
         */
        var AREA_CODES = [
            10,20,30,40,50,60,11,123,124,125,126,1267,133,134,135,136,1372,1374,137,1377,138,1392,139,1397,1398,
            142,143,144,145,1456,1457,146,1466,152,153,154,1547,15,155,1558,156,1564,157,158,1586,
            1587,162,1632,1634,1635,163,164,1648,165,1654,1655,1656,1658,166,167,172,173,174,175,176,
            17,178,179,182,183,184,185,186,187,18,191,192,193,194,195,19,197,198,22,220,
            223,224,225,226,228,229,233,234,235,23,237,238,240,241,242,243,244,24,246,247,
            248,25,250,254,255,256,257,258,259,260,261,26,263,264,265,266,267,268,269,270,
            27,274,276,277,278,279,280,282,283,284,285,28,287,288,289,291,29,293,294,295,
            296,297,299,3,422,42,428,4,43,436,438,439,44,45,460,46,463,465,466,467,
            470,47,475,476,478,479,48,480,49,493,494,495,4992,4994,4996,4998,52,53,531,532,
            533,536,537,538,539,54,544,545,547,548,550,551,55,553,554,555,556,557,558,561,
            562,563,564,565,566,567,568,569,572,573,574,575,576,5769,577,578,58,581,584,585,
            586,587,59,594,595,596,597,5979,598,599,6,72,721,725,73,735,736,737,738,739,
            740,742,743,744,745,746,7468,747,748,749,75,761,76,763,765,766,767,768,770,771,
            772,773,774,77,776,778,779,78,790,791,79,794,795,796,797,798,799,82,820,823,
            824,826,827,829,83,833,834,835,836,837,838,8387,8388,8396,845,846,847,8477,848,84,
            8512,8514,852,853,854,855,856,857,858,859,86,863,865,866,867,868,869,875,877,87,
            879,880,883,884,885,88,887,889,892,893,894,895,896,897,898,89,92,920,93,930,
            940,942,943,944,946,947,948,949,9496,950,952,954,955,956,957,95,959,96,964,965,
            966,967,968,969,972,973,974,97,977,978,979,98,980,9802,982,983,984,985,986,987,
            9912,9913,99,993,994,995,996,9969,997
        ];

        return $.inArray(num, AREA_CODES) !== -1;
      }
      /*
       * Convert a Japnese style number to standard number in string format.
       * @return {string} The stardard number in string format. return it back if the character is not a Japanese number.
       */
       function tryConvertJapaneseNumber(character){

       var JAPANESE_NUMBER = ['０', '１', '２', '３', '４', '５', '６', '７', '８', '９'];
       return $.inArray(character, JAPANESE_NUMBER) !== -1 ? String($.inArray(character, JAPANESE_NUMBER)) : character;
       }
      /*
       * Check if a number is a mobile phone number prefix
       */
      function checkMobileNumberPrefix(num){
        //const array of strings.
        var MOBILE_PREFIX = [70, 80, 90];
        return $.inArray(num, MOBILE_PREFIX) !== -1;
      }
      function checkFreeDialNumberPrefix(num){
         var FREE_DIAL_PREFIX = [120, 800];
         return $.inArray(num, FREE_DIAL_PREFIX) !== -1;

      }

      /*
       * Delete all the non-number characters in the string
       * @return {string} pure number string after delete non-number characters.
       */
      function getPureNumberString(str){
        var pureNumberString = '';
        var SPACE = ' ';
        for(var i = 0; i < str.length; i++){
          //Space will pass the isNaN test, so capture it. 
          var ch = tryConvertJapaneseNumber(str[i]);
          if(ch === SPACE || isNaN(ch)){
            continue;
          }
          pureNumberString += ch;
        }
        return pureNumberString;
      }

     /*
      * The number format is like this 0X(X)(X)(X)-X(X)(X)(X)-XXXX
      * The rule is sum length of first part and second part is 6, and the length of last part is 4.  
      * If the input string is no enough just leave it as empty.
      * @return {string} The formated Japanese phone number. ignore the prefixed zeros. 
      *                  If the length is not enough, just format part of it.
      *                  If there is no area code match, return empty string. 
      */
      function toJapanesePhoneNumber(str){
        
        //First step is to find the region number which at the first part of the phone number. 
        //Do check like this to handle 000000311112222 situation.
        var regionNumber = '';
        var otherParts = '';
        var ENUM_PHONE_TYPE = {
          NONE:0,
          TEL_PHONE:1,
          MOBILE_PHONE:2,
          FREE_PHONE:3
        };
        var phoneType = ENUM_PHONE_TYPE.NONE;
        for(var i = str.length; i > 0; i--){
          var testPart = str.substring(0, i);
          var stardardRegionNumber = parseInt(testPart, 10);
          //no matter how many prefixed zero, make it one zero.
          if(checkAreaCode(stardardRegionNumber)){
            regionNumber = '0' + stardardRegionNumber;
            otherParts = str.substring(i);
            phoneType = ENUM_PHONE_TYPE.TEL_PHONE;
            break;
          }
          else if(checkMobileNumberPrefix(stardardRegionNumber)){
            regionNumber = '0' + stardardRegionNumber;
            otherParts = str.substring(i);
            phoneType = ENUM_PHONE_TYPE.MOBILE_PHONE;
            break;
          }
          else if(checkFreeDialNumberPrefix(stardardRegionNumber)){
            regionNumber = '0' + stardardRegionNumber;
            otherParts = str.substring(i);
            phoneType = ENUM_PHONE_TYPE.FREE_PHONE;
            break;
          }
         
        }
        //If region number matched, find other parts. 
        if(phoneType !== ENUM_PHONE_TYPE.NONE){
          //This is common Japanese phone number style.
          var secondPartLen = 6 - regionNumber.length;
          var lastPartLen = 4; //default is telphone number, second part is 6- area number, and last length of last part 4. 

          if(phoneType === ENUM_PHONE_TYPE.MOBILE_PHONE){
            //use mobile style
            secondPartLen = 4;
          }
          else if(phoneType === ENUM_PHONE_TYPE.FREE_PHONE){
            //use free phone number style
            secondPartLen = 3;
            lastPartLen = 3;
          }

          if(otherParts.length === 0){
            return regionNumber;
          }
          else if(otherParts.length <= secondPartLen){
            return regionNumber + "-" + otherParts;
          }
          else{
            return regionNumber + "-" + otherParts.substr(0, secondPartLen) + "-" + otherParts.substr(secondPartLen, lastPartLen); 
          }
        }
        return '';
     }

     /*
      * @return {string} Only if the string is valid zip code, will format it, Otherwise return empty. 
      */ 
     function toJapaneseZipNumber(str){
       if(str.length === 7){
        return str.substr(0, 3) + "-" + str.substr(3, 4);
       }
       return '';
     }

     
     if(this.options.inputType === 'phone'){
       var pureNumberContent = getPureNumberString($(this.inputElement).val());
       $(this.inputElement).val(toJapanesePhoneNumber(pureNumberContent));
     }
     if(this.options.inputType === 'zip'){
       var pureNumberContent = getPureNumberString($(this.inputElement).val());
       $(this.inputElement).val(toJapaneseZipNumber(pureNumberContent));
     }


    },
    _destroy : function() {
      this.contentElement.remove();
    },
    _setRequired : function() {
      var that = this;
      this.inputElement.on('focusout', function(ev) {
        that.validate();
      });
      this.inputElement.on('keyup', function(ev) {
        if (that.isEager()) {
          that.validate();
        }
      });
    },

    _setLengthChk : function() {
      var that = this;
      this.inputElement.on('focusout', function(ev) {
        that.validate();
      });
      this.inputElement.on('keyup', function(ev) {
        if (that.isEager()) {
          that.validate();
        }
      });
      this.inputElement.on('keydown', function(ev) {
        if (!(ev.which >= 8 && ev.which <= 20)
            && ev.which != 27
            && !(ev.which >= 33 && ev.which <= 40)
            && !(ev.which >= 91 && ev.which <= 92)
            && !(ev.which >= 112 && ev.which <= 123)
            && ev.which != 145
            && ev.which != 240) {
          // do nothing
        }
      });
    },

    _chkLength : function() {
      var result = {};
      var obj = this.inputElement;
      var min = this.options.min;
      var max = this.options.max;
      var len = obj.val().length;
      if (max > 0 && max <= len) {
        result.state = this.STATUS_ISAOK;
      } else if (min > 0 && min > len) {
        result.state = this.STATUS_ERROR;
        result.messageFor = "length-error";
        result.message = this.options.message.minlength;
      } else {
        result.state = this.STATUS_ISAOK;
      }
      return result;
    },

    _setRegularExpChk : function(ev) {
      var that = this;
      if (this.options.regularExp) {
        this.inputElement.on('focusout', function(ev) {
          that._chkRegularExp();
        });
      }

    },

    setAutoConvert : function() {
      var that = this;
      $(this.inputElement).on('focusout', function(event) {
        convertToHalfWidth($(event.currentTarget));
      });
    },

    _chkRegularExp : function(ev) {
      var reg = new RegExp(this.options.regularExp);
      var obj = this.inputElement;
      if (!obj.val().match(reg)) {
        if (this.options.autostatus) {
          this.updatestatus(this.STATUS_ERROR);
        }
      } else {
        if (this.options.autostatus) {
          this.updatestatus(this.STATUS_ISAOK);
        }
      }
    },

    _removeNotList : function(ev) {
      var obj = this.inputElement;
      var removeExp = this.options.removeExp;
      var val = obj.val();
      for (var i = 0; i < removeExp.length; i++) {
        val = val.replace(removeExp.charAt(i), "");
      }
      
      obj.val(val);
    },

    focus : function() {
      this.inputElement.trigger('focus');
    },

    _focus : function(event) {
      if (null != this.options.labeliser) {
        var $input = this.inputElement;
        $input.siblings(".labelised").remove();
        $input.show();
      }
    },

    _blur : function(event) {
      if (null != this.options.labeliser) {
        var $input = this.inputElement;
        if (this.inputElement.val() === "") {
          $input.siblings(".labelised").remove();
          $input.show();
        } else {
          var $label = this.options.labeliser($input, this.inputElement.val());
          if (null != $label) {
            $label = $($label);
            $label.addClass('labelised');
            var $labelisedLabel = $label;
            $input.siblings(".labelised").remove();
            $input.before($labelisedLabel);
            $input.hide();
            $labelisedLabel.on('click focus', function(ev) {
              $input.show().focus();
            });
          }
        }
      }
    },

    /**
     * show/hide tooltip function
     * 
     * @author koyama_y
     */
    _tooltip : function() {
      var that = this;
      var $el = $(this.inputElement);
      var options = {
        animation : true,
        placement : this.options.overflowTooltipArea,
        trigger : 'manual'
      };

      $(this.inputElement).on({
        mouseover : function() {
          var ruler = that._getRuler();
          $el.attr('data-original-title', ruler.isOver ? $el.val() : '');
          $el.tooltip(options).tooltip('show');
          $('.tooltip-inner').css('max-width', ruler.rulerLength);
        },
        mouseout : function() {
          $el.tooltip('hide');
        }
      });
    },

    /**
     * get Ruler object
     * 
     * @author koyama_y
     */
    _getRuler : function() {
      var $target = $(this.inputElement);

      var htmlTmpl = '<span id="ruler" style="visibility:hidden; width:auto; display:inline;">'
          + $target.val()
          + '</span>';
      $('body').append(htmlTmpl);

      var $ruler = $('#ruler');
      $ruler.addClass($target.attr('class'));

      var ruler = {
        isOver : $ruler.innerWidth() > $target.innerWidth(),
        rulerLength : $ruler.innerWidth(),
        targetLength : $target.innerWidth()
      };

      $ruler.remove();
      return ruler;
    },

    _dropdown : function(input) {
      input.attr('data-toggle', 'dropdown');
      var ul = this.divElement.find('ul');
      ul.css('left', input.css('left'));
      ul.css('width', input.css('width'));
      var li = this.divElement.find('ul.dropdown-menu li');
      for (var i = 0; i < li.length; i++) {
        li.eq(i).on('click', function() {
          input.val($(this).children('a').text());
        });
      }
    },

    validate : function() {
      var messages = [];
      if (this.options.required) {
        var requiredResult = this._chkRequired();
        messages.push(requiredResult);
      }

      var lengthResult = this._chkLength();
      messages.push(lengthResult);

      if (null != this.options.customValidator) {
        var customResult = this.options.customValidator();
        messages.push(customResult);
      }
      messages = messages.sort(this.compareStatus);
      // finally
      if (messages.length === 0) {
        this.updatestatus(this.STATUS_ISAOK);
        this.hideMessage();
      } else {
        if (this.options.automessage || this.isMessageDisplayed()) {
          this.updateMessage(messages[0]);
        }
        if (this.options.autostatus) {
          this.updatestatus(messages[0].state);
        }
      }
      return messages;
    },

    getUnmaskedValue : function() {
      if (this.options.mask) {
        return this.inputElement.inputmask('unmaskedvalue');
      } else {
        return this.getValue();
      }
    },

    setValue : function(value, callback) {
      this.inputElement.val(value);
      this._blur();// to labelise
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    _numKeyPress : function(e) {

      var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
      // allow Enter key (only when in an input)
      if (key == 13 && this.nodeName.toLowerCase() == 'input') {
        return true;
      } else if (key == 13) {
        return false;
      }

      // allow Ctrl+A
      if ((e.ctrlKey && key == 97 /* firefox */) || (e.ctrlKey && key == 65) /* opera */)
        return true;
      // allow Ctrl+X (cut)
      if ((e.ctrlKey && key == 120 /* firefox */) || (e.ctrlKey && key == 88) /* opera */)
        return true;
      // allow Ctrl+C (copy)
      if ((e.ctrlKey && key == 99 /* firefox */) || (e.ctrlKey && key == 67) /* opera */)
        return true;
      // allow Ctrl+Z (undo)
      if ((e.ctrlKey && key == 122 /* firefox */) || (e.ctrlKey && key == 90) /* opera */)
        return true;
      // allow or deny Ctrl+V (paste), Shift+Ins
      if ((e.ctrlKey && key == 118 /* firefox */) || (e.ctrlKey && key == 86) /* opera */
          || (e.shiftKey && key == 45))
        return true;

      // if a number was not pressed
      if (key < 48 || key > 57) {
        // minus
        if (key == 45 && this.value.indexOf('-') == -1 && this.selectionStart == 0) {
          return true;
        }
        // dot
        if (key == 46 && this.value.indexOf('.') == -1) {
          return true;
        }
        return false;
      } else {
        return true;
      }
    },

    _enableWhiteList : function(whiteListStr) {
      this.inputElement.on('keypress', function(e) {
        var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
        var inputStr = String.fromCharCode(key);
        if ('' === inputStr || whiteListStr.indexOf(inputStr) === -1) {
          return false;
        } else {
          return true;
        }
      })
    }
  });
}(jQuery));
(function($) {
  $.widget("wap.textareaField", $.wap.field, {
    options : {
      hinttext : null,
      hintarea : 'right',
      min : -1,
      max : -1,
      message : {
        required : 'This field is required to fill in.',
        minlength : 'Not reached to minimum length.',
      },
      greedValidationMessage : false,
      customValidator : null,
      autoconvert : false
    },

    _create : function() {
      this._super();
      this.textarea = this.element.find('textarea:first');
      this.textarea.textarea();
      this.hintTarget = this.textarea;
      this.messageTarget = this.textarea;
      this.statusTarget = this.textarea;
      this.requiredTarget = this.textarea;

      var textarea = this.textarea;
      var that = this;
      var label = this.labelElement;
      var div = this.divElement;
      if (null != textarea.attr('minlength')) {
        this.options.min = textarea.attr('minlength');
      }
      if (null != textarea.attr('maxlength')) {
        this.options.max = textarea.attr('maxlength');
      }
      if (null != textarea.attr('data-minlength-error')) {
        this.options.message.minlength = textarea.attr('data-minlength-error');
      }
      if (null != textarea.attr('data-required-error')) {
        this.options.message.required = textarea.attr('data-required-error');
      }
      if (this.options.autoconvert) {
        this.setAutoConvert();
      }
      if (this.options.required) {
        that._setRequired();
      }

      if (this.options.min > 0 || this.options.max > 0) {
        that._setLengthChk();
      }

      if (this.options.hinttext != null) {
        this._createHint();// I don't know why but this line is necessary here, not super
      }

      label.on('click', function() {
        that.focus();
      });

    },

    _destroy : function() {
      this.contentElement.remove();
    },

    _setRequired : function() {
      var that = this;
      this.textarea.on('focusout', function(ev) {
        that.validate();
      });
      this.textarea.on('keyup', function(ev) {
        if (that.isEager()) {
          that.validate();
        }
      });
    },

    _setLengthChk : function() {
      var that = this;
      this.textarea.on('focusout', function(ev) {
        that.validate();
      });
      this.textarea.on('keyup', function(ev) {
        if (that.isEager()) {
          that.validate();
        }
      });

      this.textarea.on('keydown', function(ev) {
        if (!(ev.which >= 8 && ev.which <= 20)
            && ev.which != 27
            && !(ev.which >= 33 && ev.which <= 40)
            && !(ev.which >= 91 && ev.which <= 92)
            && !(ev.which >= 112 && ev.which <= 123)
            && ev.which != 145
            && ev.which != 240) {
          // do nothing
        }
      });
    },

    _chkLength : function() {
      var result = {};
      var min = this.options.min;
      var max = this.options.max;
      var len = this.textarea.val().length;
      if (max > 0 && max <= len) {
        result.state = this.STATUS_ISAOK;
      } else if (min > 0 && min > len) {
        result.state = this.STATUS_ERROR;
        result.messageFor = "length-error";
        result.message = this.options.message.minlength;
      } else {
        result.state = this.STATUS_ISAOK;
      }
      return result;
    },

    focus : function() {
      this.textarea.trigger('focus');
    },

    clear : function() {
      this.textarea.textarea('clear');
    },

    setValue : function(value, callback) {
      this.textarea.textarea('setValue', value);
      if ((null != callback) && ("function" === typeof callback)) {
        callback(this);
      }
    },

    getValue : function() {
      return this.textarea.textarea('getValue');
    },

    setAutoConvert : function() {
      return this.textarea.textarea('setAutoConvert');
    },

    validate : function() {
      var messages = [];

      if (this.options.required) {
        var requiredResult = this._chkRequired();
        messages.push(requiredResult);
      }

      var lengthResult = this._chkLength();
      messages.push(lengthResult);

      if (null != this.options.customValidator) {
        var customResult = this.options.customValidator();
        messages.push(customResult);
      }

      messages = messages.sort(this.compareStatus);

      // finally
      if (messages.length === 0) {
        this.updatestatus(this.STATUS_ISAOK);// ignore autoStatus
        this.hideMessage();
      } else {
        if (this.options.automessage || this.isMessageDisplayed()) {
          this.updateMessage(messages[0]);
        }
        if (this.options.autostatus) {
          this.updatestatus(messages[0].state);
        }
      }
      return messages;

    },
  });
}(jQuery));
/**
 * @fileoverview Time Picker Field.
 * @author tsujii_n
 * @since FRONTMOCK010100
 * 
 * Copyright (C) 2014 Works Applications Co., Ltd. All rights reserved.
 */

(function($) {
  // ------------------------------------------------------------------------
  // private static constants
  // ------------------------------------------------------------------------
  var EVENT_COMPLETE = 'complete', //
  EVENT_INCOMPLETE = 'incomplete'; //

  $.widget('wap.timePicker', // this component's class
  $.wap.field, // super class
  {

    options : {
      /** @type {String} Input format. */
      format : 'hh24:mm',
      // /** @type {String} Maximum boundary of input time. format HH:mm */
      maxWarningTime : null,
      // /** @type {String} Minimum boundary of input time. format HH:mm */
      minWarningTime : null,
      overMaxWarningMessage : "",
      belowMinWarningMessage : "",
      // to set captions on each button
      captionOk : 'OK',
      captionCancel : 'Cancel',
      customCaptions : null,
      captionCustomBtn1 : '+1 Hour',
      captionCustomBtn2 : '-1 Hour',
      captionCustomBtn3 : '+15 Min',
      captionCustomBtn4 : '-15 Min',
      // to customize behavior of each button
      values : null,
      value1 : "+1h",
      value2 : "-1h",
      value3 : "+15m",
      value4 : "-15m",
    },

    /**
     * @constructor
     */
    _create : function() {
      this._super();
      var self = this;

      // --------------------------------------------------------------------
      // fields
      // --------------------------------------------------------------------
      /** @type {Date} input time. */
      this._time = null;
      /** @type {jQuery} Input element. */
      this._input = null;
      /** @type {Object} inputmask option. */
      this._inputmaskOption = _getInputmaskOption(this.options.format);
      /** @type {String} Globalize parse format */
      this._parseFormat = _getParseFormat(this.options.format);

      this._createDom();
      this._parseTime();

      if (deviceInfo.mobile()) {
        this._popupId = 'wap-timePicker-popup-small';
      } else {
        this._popupId = 'wap-timePicker-popup';
      }
      if (this.options.customCaptions) {
        this.options.captionCustomBtn1 = this.options.customCaptions.btn1;
        this.options.captionCustomBtn2 = this.options.customCaptions.btn2;
        this.options.captionCustomBtn3 = this.options.customCaptions.btn3;
        this.options.captionCustomBtn4 = this.options.customCaptions.btn4;
      }
      if (this.options.values) {
        this.options.value1 = this.options.values.value1;
        this.options.value2 = this.options.values.value2;
        this.options.value3 = this.options.values.value3;
        this.options.value4 = this.options.values.value4;
      }
      setTimeout(function() {
        self._enterDocument();
      }, 100);
    },

    /**
     * @destructor
     */
    _destroy : function() {
      this.contentElement.remove();
    },

    // ----------------------------------------------------------------------
    // public methods
    // ----------------------------------------------------------------------
    /**
     * (accessor) Get Date object of input time.
     * 
     * @return {Date|null} Input time or null if input is incomplete
     */
    getTime : function() {
      return this._time;
    },

    /**
     * (accessor) Set Date object of input time.
     * 
     * @param {Date|null} Input time. If null input value will clear.
     */
    setTime : function(date) {
      if (null === date) {
        this._time = null;
        this._input.val('');
      } else {
        this._time = new Date(date.getTime());
        this._normalizeDate(this._time, true);
        this._input.val(Globalize.format(this._time, 'HHmm'));
      }
    },

    // ----------------------------------------------------------------------
    // private methods
    // ----------------------------------------------------------------------
    /**
     * Create DOM of this widget.
     * 
     * @private
     */
    _createDom : function() {
      this._input = this.element.find('input').first();
      this._input.inputmask(this._inputmaskOption);
    },

    /**
     * Bind event.
     * 
     * @private
     */
    _enterDocument : function() {
      var self = this;
      this._input.on(EVENT_COMPLETE, function(event, causer) {
        self._parseTime();
        if (event.target.selectionStart === 3 && event.target.selectionEnd === 3) {
          event.target.setSelectionRange(3, 5);
        }
      }).on(EVENT_INCOMPLETE, function() {
        self._time = null;
      })
      // keydown event
      .on('keydown', $.proxy(this._keydown, this))
      // click event
      .on('click', $.proxy(function() {
        this._click(event, self._time, self._input);
      }, this)).on('touchstart', $.proxy(function() {
        if (!deviceInfo.desktop()) {
          this._closePopup(true);
          this._showPopup(self._input, self.getTime(), $.proxy(self.setTime, self));
        }
      }, this));
      this._input.get(0).readOnly = !deviceInfo.desktop();
    },

    /**
     * Parse input time.
     * 
     * @private
     */
    _parseTime : function() {
      this._time = Globalize.parseDate(this._input.val(), this._parseFormat);

      if (null !== this._time) {
        this._normalizeDate(this._time, true);
      }
    },

    /**
     * Normalize date (i.e. set day of 1970/01/01.)
     * 
     * @param {Date} date
     * @param {boolean}
     * @private
     */
    _normalizeDate : function(date, isFromInput) {
      date.setFullYear(1970, 0, 1);
      this._validate(date);
      if (this._einput) {
        // timeRangePicker
        this._timeRangePickerValidate();
        if (isFromInput && (this.options.intervalMinutes != 0) && !this._einput.inputmask('isComplete')) {
          // interval set
          this._setIntervalMinutes();
        }
      }
    },

    /**
     * Validate time
     * 
     * @param {Date} date
     * @private
     */
    _validate : function(date) {
      var result = {
        checkResult : 'ok',
        alertMessage : ""
      };

      // Warningのチェック
      if (this._isOverMaxWarning(date)) {
        result.checkResult = 'warning';
        result.alertMessage = this.options.overMaxWarningMessage;
      }
      if (this._isBelowMinWarning(date)) {
        result.checkResult = 'warning';
        result.alertMessage = this.options.belowMinWarningMessage;
      }

      // event trigger
      var event = jQuery.Event('changeTime');
      event.checkResult = result.checkResult;
      event.alertMessage = result.alertMessage;
      this._input.trigger(event);
    },

    /**
     * OverMax Check
     * 
     * @param {Date} date
     * @return {boolean}
     * @private
     */
    _isOverMaxWarning : function(date) {
      if (!this.options.maxWarningTime) {
        return false;
      }
      var maxDateString = '1970/01/01 ' + this.options.maxWarningTime;
      var maxDate = new Date(maxDateString);
      if (maxDate instanceof Date) {
        if (date.getTime() <= maxDate.getTime()) {
          return false;
        } else {
          return true;
        }
      } else {
        throw 'maxWarningTime format is wrong:"' + this.options.maxWarningTime + '"';
      }
    },

    /**
     * BelowMin Check
     * 
     * @param {Date} date
     * @return {boolean}
     * @private
     */
    _isBelowMinWarning : function(date) {
      if (!this.options.minWarningTime) {
        return false;
      }
      var minDateString = '1970/01/01 ' + this.options.minWarningTime;
      var minDate = new Date(minDateString);
      if (minDate instanceof Date) {
        if (date.getTime() >= minDate.getTime()) {
          return false;
        } else {
          return true;
        }
      } else {
        throw 'minWarningTime format is wrong:"' + this.options.minWarningTime + '"';
      }
    },

    /**
     * keydown handle
     * 
     * @private
     */
    _keydown : function(event) {
      switch (event.which) {
      // up
      case 38:
        if (this._isHourSelected(this._input)) {
          if (this._time) {
            this._time.setHours(this._time.getHours() + 1);
            this._setTimeAndCursorSelection(event.target, 0, 2);
          } else {
            // when no time,set to 1970/01/01 01:00:00
            this._time = new Date(1970, 1, 1, 1, 0, 0);
            this._setTimeAndCursorSelection(event.target, 0, 2);
          }
        } else if (this._isMinuteSelected(this._input)) {
          if (this._time) {
            this._time.setMinutes(this._time.getMinutes() + 1);
            this._setTimeAndCursorSelection(event.target, 3, 5);
          } else {
            // when no time,set to 1970/01/01 01:00:00
            this._time = new Date(1970, 1, 1, 1, 0, 0);
            this._setTimeAndCursorSelection(event.target, 3, 5);
          }
        }
        if (this._input.inputmask('isComplete')) {
          this._input.trigger(EVENT_COMPLETE, [
            'updownArrow'
          ]);
        }
        return false;
        break;
      // down
      case 40:
        if (this._isHourSelected(this._input)) {
          if (this._time) {
            this._time.setHours(this._time.getHours() - 1);
            this._setTimeAndCursorSelection(event.target, 0, 2);
          } else {
            // when no time,set to 1970/01/01 11:00:00
            this._time = new Date(1970, 1, 1, 11, 0, 0);
            this._setTimeAndCursorSelection(event.target, 0, 2);
          }
        } else if (this._isMinuteSelected(this._input)) {
          if (this._time) {
            this._time.setMinutes(this._time.getMinutes() - 1);
            this._setTimeAndCursorSelection(event.target, 3, 5);
          } else {
            // when no time,set to 1970/01/01 11:00:00
            this._time = new Date(1970, 1, 1, 11, 0, 0);
            this._setTimeAndCursorSelection(event.target, 3, 5);
          }
        }
        if (this._input.inputmask('isComplete')) {
          this._input.trigger(EVENT_COMPLETE, [
            'updownArrow'
          ]);
        }
        return false;
        break;
      // left
      case 37:
        event.target.setSelectionRange(0, 2);
        return false;
        break;
      // right
      case 39:
        if (this._einput && 3 === this._input[0].selectionStart) {
          this._einput[0].setSelectionRange(0, 2);
        } else {
          event.target.setSelectionRange(3, 5);
        }
        return false;
        break;
      default:
        break;
      }
    },

    /**
     * set time to input and show highlight
     * 
     * @param {Object} target
     * @param {Number} from
     * @param {Number} to
     * @private
     */
    _setTimeAndCursorSelection : function(target, from, to) {
      this.setTime(this._time);
      target.setSelectionRange(from, to);
    },

    /**
     * click handle
     * 
     * @param {Event Object}
     * @param {Date}
     * @param {jQuery}
     * @private
     */
    _click : function(event, time, input) {
      if (time) {
        if (this._isHourSelected(input)) {
          event.target.setSelectionRange(0, 2);
        } else if (this._isMinuteSelected(input)) {
          event.target.setSelectionRange(3, 5);
        }
      } else {
        // when no time input,select the hour digit
        event.target.setSelectionRange(0, 2);
      }
    },

    /**
     * judge whether hour digit is selected
     * 
     * @param {jQuery} input
     * @return {boolean}
     * @private
     */
    _isHourSelected : function(input) {
      return input[0].selectionStart < 3;
    },

    /**
     * judge whether minute digit is selected
     * 
     * @param {jQuery} input
     * @return {boolean}
     * @private
     */
    _isMinuteSelected : function(input) {
      return input[0].selectionStart > 2;
    },

    _showPopup : function(input, time, setTimeFunc, isFirst) {
      var html = '<div>'
          + '  <div class="wap-timePicker-popup-header">'
          + '    <span class="wap-timePicker-popup-hour"></span> : <span class="wap-timePicker-popup-min"></span>'
          + '  </div>'
          + '  <table class="wap-timePicker-popup-keys">'
          + '    <tr>'
          + '      <td><button class="wap-timePicker-popup-key">1</button></td>'
          + '      <td><button class="wap-timePicker-popup-key">2</button></td>'
          + '      <td><button class="wap-timePicker-popup-key">3</button></td>'
          + '    </tr>'
          + '    <tr>'
          + '      <td><button class="wap-timePicker-popup-key">4</button></td>'
          + '      <td><button class="wap-timePicker-popup-key">5</button></td>'
          + '      <td><button class="wap-timePicker-popup-key">6</button></td>'
          + '    </tr>'
          + '    <tr>'
          + '      <td><button class="wap-timePicker-popup-key">7</button></td>'
          + '      <td><button class="wap-timePicker-popup-key">8</button></td>'
          + '      <td><button class="wap-timePicker-popup-key">9</button></td>'
          + '    </tr>'
          + '    <tr><td></td>'
          + '      <td><button class="wap-timePicker-popup-key">0</button></td>'
          + '    <td></td></tr>'
          + '  </table>'
          + '  <div class="wap-timePicker-popup-keys">'
          + '    <button class="wap-timePicker-popup-customkey" value="'
          + this.options.value1
          + '">'
          + this.options.captionCustomBtn1
          + '</button><br>'
          + '    <button class="wap-timePicker-popup-customkey" value="'
          + this.options.value2
          + '">'
          + this.options.captionCustomBtn2
          + '</button><br>'
          + '    <button class="wap-timePicker-popup-customkey" value="'
          + this.options.value3
          + '">'
          + this.options.captionCustomBtn3
          + '</button><br>'
          + '    <button class="wap-timePicker-popup-customkey" value="'
          + this.options.value4
          + '">'
          + this.options.captionCustomBtn4
          + '</button><br>'
          + '  </div>'
          + '  <div class="wap-timePicker-popup-buttons">'
          + '      <button class="wap-timePicker-popup-ok">'
          + this.options.captionOk
          + '</button>'
          + '      <button class="wap-timePicker-popup-cancel">'
          + this.options.captionCancel
          + '</button>'
          + '    </div>'
          + '</div>';
      popup = $(html);
      document.body.appendChild(popup.get(0));
      popup.attr('id', this._popupId);
      popup.find('.wap-timePicker-popup-key').on('touchstart', this._onTouchPopupKey.bind(this, isFirst));
      popup.find('.wap-timePicker-popup-ok').on('touchstart', this._onTouchOkButton.bind(this, setTimeFunc, isFirst));
      popup.find('.wap-timePicker-popup-cancel').on('touchstart', this._closePopup.bind(this, isFirst));

      popup.find('.wap-timePicker-popup-customkey').on('touchstart', this._onTouchCustomKey.bind(this));

      popup.find('.wap-timePicker-popup-key,.wap-timePicker-popup-customkey').on('touchstart', function() {
        $(this).addClass('wap-timePicker-popup-key-pushed');
      }).on('touchend', function() {
        $(this).removeClass('wap-timePicker-popup-key-pushed');
      });

      popup.find('.wap-timePicker-popup-hour').on('touchstart', function() {
        $.data(popup.get(0), 'input-step', 0);
        popup.find('.wap-timePicker-popup-hour').addClass('wap-timePicker-popup-input');
        popup.find('.wap-timePicker-popup-min').removeClass('wap-timePicker-popup-input');
      });
      popup.find('.wap-timePicker-popup-min').on('touchstart', function() {
        $.data(popup.get(0), 'input-step', 2);
        popup.find('.wap-timePicker-popup-hour').removeClass('wap-timePicker-popup-input');
        popup.find('.wap-timePicker-popup-min').addClass('wap-timePicker-popup-input');
      });

      $.data(popup.get(0), 'input-step', 0);
      if (time) {
        this._setPopupTime(time.getHours(), time.getMinutes(), 0);
      } else {
        this._setPopupTime(0, 0, 0);
      }

      var popupPos = {
        'top' : input.offset().top + $(input).outerHeight(),
        'left' : $(window).width() / 2 - $(popup).outerWidth() / 2
      };

      popup.css('zIndex', '100');

      var d = $(document).scrollTop() + $(window).height() - (popupPos.top + $(popup).height());
      if (d < 0) {
        $('body').animate({
          scrollTop : $(document).scrollTop() - d
        }, {
          duration : 'fast'
        });
      }
      popup.css(popupPos);

      if (!deviceInfo.desktop() && this._einput) {
        if (isFirst) {
          this._input.addClass('timepicker-focusing');
        } else {
          this._einput.addClass('timepicker-focusing');
        }
      }

      popup.show();
      return popup;
    },

    _closePopup : function(isFirst) {
      if (!deviceInfo.desktop() && this._einput) {
        if (isFirst) {
          this._input.removeClass('timepicker-focusing');
        } else {
          this._einput.removeClass('timepicker-focusing');
        }
      }
      $('#' + this._popupId).hide().remove();
    },

    _onTouchPopupKey : function(isFirst, event) {
      event.preventDefault();
      var hlabel = $('#' + this._popupId + ' .wap-timePicker-popup-hour');
      var mlabel = $('#' + this._popupId + ' .wap-timePicker-popup-min');
      var button = $(event.target);
      var hour = parseInt(hlabel.text());
      var min = parseInt(mlabel.text());
      var step = $.data($('#' + this._popupId).get(0), 'input-step');
      if (step == 0) {
        hour = parseInt(button.text());
        if (hour > 2) {
          step++;
        }
        step++;
      } else if (step == 1) {
        hour = hour * 10 + parseInt(button.text());
        step++;
      } else if (step == 2) {
        min = parseInt(button.text());
        step++;
      } else {
        min = min * 10 + parseInt(button.text());
        step = 0;
        if (!deviceInfo.desktop() && this._einput) {
          $.data($('#' + this._popupId).get(0), 'input-step', step);
          this._setPopupTime(hour, min, step);
          if (isFirst) {
            this._input.trigger("popup-complete");
          } else {
            this._einput.trigger("popup-complete");
          }
          return;
        }
      }
      $.data($('#' + this._popupId).get(0), 'input-step', step);
      this._setPopupTime(hour, min, step);
    },

    _onTouchCustomKey : function() {
      event.preventDefault();
      var hlabel = $('#' + this._popupId + ' .wap-timePicker-popup-hour');
      var mlabel = $('#' + this._popupId + ' .wap-timePicker-popup-min');
      var hour = parseInt(hlabel.text());
      var min = parseInt(mlabel.text());

      var button = $(event.target);
      var value = button.val();
      var num = Number(value.replace(/[^0-9]/g, ''));
      if (value.charAt(0) === '-') {
        if (value.indexOf('h') > 0) {
          hour -= num;
        } else if (value.indexOf('m') > 0) {
          min -= num;
          if (min < 0) {
            min += 60;
            hour--;
          }
        }
      } else if (value.charAt(0) === '+') {
        if (value.indexOf('h') > 0) {
          hour += num;
        } else if (value.indexOf('m') > 0) {
          min += num;
          if (min >= 60) {
            min -= 60;
            hour++;
          }
        }
      } else if (value.indexOf(':') > 0) {
        hour = Number(value.split(':')[0]);
        min = Number(value.split(':')[1]);
      }

      if (hour < 0) {
        hour += 24;
      }
      if (hour >= 24) {
        hour -= 24;
      }

      var step = $.data($('#' + this._popupId).get(0), 'input-step');
      this._setPopupTime(hour, min, step);
    },

    _setPopupTime : function(hour, min, step) {
      if (hour > 23) {
        hour = hour % 24;
      }
      if (min > 59) {
        min = min % 60;
      }
      var hlabel = $('#' + this._popupId + ' .wap-timePicker-popup-hour');
      var mlabel = $('#' + this._popupId + ' .wap-timePicker-popup-min');
      hlabel.text((hour > 9 ? '' : '0') + hour);
      mlabel.text((min > 9 ? '' : '0') + min);
      if (step <= 1) {
        hlabel.addClass('wap-timePicker-popup-input');
        mlabel.removeClass('wap-timePicker-popup-input');
      } else {
        hlabel.removeClass('wap-timePicker-popup-input');
        mlabel.addClass('wap-timePicker-popup-input');
      }
    },

    _onTouchOkButton : function(setTimeFunc, isFirst) {
      var time = this.getTime();
      if (!time) {
        time = new Date(1970, 1, 1, 1, 0, 0);
      }
      var hlabel = $('#' + this._popupId + ' .wap-timePicker-popup-hour');
      var mlabel = $('#' + this._popupId + ' .wap-timePicker-popup-min');
      var hour = parseInt(hlabel.text());
      var min = parseInt(mlabel.text());
      time.setHours(hour, min);
      setTimeFunc(time);
      this._closePopup(isFirst);
      this._input.trigger(EVENT_COMPLETE);
    }
  });

  // ------------------------------------------------------------------------
  // public constants
  // ------------------------------------------------------------------------
  /** formats */
  $.wap.timePicker.Format = {
    'hh24:mm' : {
      'inputmask' : {
        'alias' : 'hh:mm'
      },
      'parseformat' : 'HH:mm'
    },

    'hh24時mm分' : {
      'inputmask' : {
        'mask' : 'h時s分'
      },
      'parseformat' : 'HH時mm分'
    },

  };

  // ------------------------------------------------------------------------
  // private static methods
  // ------------------------------------------------------------------------
  /**
   * Get inputmask option.
   * 
   * @param {String} format
   * @returns {Object}
   * @private
   */
  function _getInputmaskOption(format) {
    var formatDef = $.wap.timePicker.Format[format];
    if (undefined === formatDef) {
      throw 'Unknown format: "' + format + '"';
    }

    return formatDef['inputmask'];
  }

  /**
   * Get Globalize parse format.
   * 
   * @param {String} format
   * @returns {String}
   * @private
   */
  function _getParseFormat(format) {
    var formatDef = $.wap.timePicker.Format[format];
    if (undefined === formatDef) {
      return '';
    }

    return formatDef['parseformat'];
  }

  /**
   * Automatic initialization.
   */
  $(function() {
    var autoInstantiationClass = $.wap.timePicker.prototype.widgetFullName;
    $('.' + autoInstantiationClass).timePicker();
  });

}(jQuery));

/**
 * @fileoverview Time Range Picker Field.
 * @author tsujii_n
 * @since FRONTMOCK010100
 * 
 * Copyright (C) 2014 Works Applications Co., Ltd. All rights reserved.
 */

(function($) {
  // ------------------------------------------------------------------------
  // private static constants
  // ------------------------------------------------------------------------
  var EVENT_COMPLETE = 'complete', //
  EVENT_INCOMPLETE = 'incomplete', //
  EVENT_STIME_COMPLETE = 'stime-complete', //
  EVENT_STIME_INCOMPLETE = 'stime-incomplete', //
  EVENT_ETIME_COMPLETE = 'etime-complete', //
  EVENT_ETIME_INCOMPLETE = 'etime-incomplete', //
  EVENT_KEYDOWN = 'keydown', //
  KEYCODE_BACKSPACE = 8; //

  $.widget('wap.timeRangePicker', // this component's class
  $.wap.timePicker, // super class
  {

    options : {
      intervalMinutes : 0
    },

    /**
     * @constructor
     */
    _create : function() {
      this._super();
      // --------------------------------------------------------------------
      // fields
      // --------------------------------------------------------------------
      /** @type {Date} input end time. */
      this._etime = null;
      /** @type {jQuery} Input element. */
      this._einput = null;

      this._createDom();
      this._parseETime();
    },

    // ----------------------------------------------------------------------
    // public methods
    // ----------------------------------------------------------------------
    /**
     * (accessor) Get Date object of input time.
     * 
     * @return {Date|null} Input time or null if input is incomplete
     */
    getEtime : function() {
      return this._etime;
    },

    /**
     * (accessor) Set Date object of input time.
     * 
     * @param {Date|null} Input time. If null input value will clear.
     */
    setEtime : function(date) {
      if (null === date) {
        this._etime = null;
        this._einput.val('');
      } else {
        this._etime = new Date(date.getTime());
        this._normalizeDate(this._etime, false);
        this._einput.val(Globalize.format(this._etime, 'HHmm'));
      }
    },

    // ----------------------------------------------------------------------
    // private methods
    // ----------------------------------------------------------------------
    /**
     * Create DOM of this widget.
     * 
     * @private
     */
    _createDom : function() {
      this._super();
      this._einput = this.element.find('input').last();
      this._einput.inputmask(this._inputmaskOption);
    },

    /**
     * Bind event.
     * 
     * @private
     */
    _enterDocument : function() {
      var self = this;

      // stime
      this._input.on(EVENT_COMPLETE, function(event, causer) {
        var selectionStart = event.target.selectionStart, //
        selectionEnd = event.target.selectionEnd; //

        self._parseTime();
        event.stopPropagation();
        event.preventDefault();
        if (selectionStart === 3 && selectionEnd === 3) {
          event.target.setSelectionRange(3, 5);
        } else if (causer !== 'updownArrow' && 5 === selectionStart && 5 === selectionEnd) {
          self._einput[0].setSelectionRange(0, 2);
        }
        self.element.trigger(EVENT_STIME_COMPLETE);
        if (self._input.inputmask('isComplete') && self._einput.inputmask('isComplete')) {
          self.element.trigger(EVENT_COMPLETE);
        }
        return false;
      }) //
      .on(EVENT_INCOMPLETE, function(event) {
        self._time = null;
        event.stopPropagation();
        event.preventDefault();

        self.element.trigger(EVENT_STIME_INCOMPLETE);
      })
      // keydown event
      .on(EVENT_KEYDOWN, $.proxy(self._keydown, self))
      // click event
      .on('click', $.proxy(function() {
        self._click(event, self._time, self._input);
      }, self)).on('touchstart', function() {
        if (!deviceInfo.desktop()) {
          self._closePopup(true);
          self._showPopup(self._input, self.getTime(), $.proxy(self.setTime, self), true);
        }
      })

      .on('popup-complete', function(e) {
        e.stopPropagation();
        e.preventDefault();
        self._onTouchOkButton($.proxy(self.setTime, self), true);
        self._einput.trigger('touchstart');
      });
      this._input.get(0).readOnly = !deviceInfo.desktop();

      self._einput.on(EVENT_COMPLETE, function(event) {
        self._parseETime();
        event.stopPropagation();
        event.preventDefault();
        self.element.trigger(EVENT_ETIME_COMPLETE);
        if (event.target.selectionStart === 3 && event.target.selectionEnd === 3) {
          event.target.setSelectionRange(3, 5);
        }
        if (self._input.inputmask('isComplete') && self._einput.inputmask('isComplete')) {
          self.element.trigger(EVENT_COMPLETE);
        }
      }) //
      .on(EVENT_INCOMPLETE, function(event) {
        self._etime = null;
        event.stopPropagation();
        event.preventDefault();

        self.element.trigger(EVENT_ETIME_INCOMPLETE);
      }) //
      .on(EVENT_KEYDOWN, $.proxy(self._onEinputKeyDown, self))
      // click event
      .on('click', $.proxy(function() {
        self._click(event, self._etime, self._einput);
      }, self)).on('touchstart', function() {
        if (!deviceInfo.desktop()) {
          self._closePopup(false);
          self._showPopup(self._einput, self.getEtime(), $.proxy(self.setEtime, self), false);
        }
      })

      .on('popup-complete', function(e) {
        e.stopPropagation();
        e.preventDefault();
        self._onTouchOkButton($.proxy(self.setEtime, self), false);
      });

      this._einput.get(0).readOnly = !deviceInfo.desktop();
      ;
    },

    /**
     * Parse input time.
     * 
     * @private
     */
    _parseETime : function() {
      this._etime = Globalize.parseDate(this._einput.val(), this._parseFormat);

      if (null !== this._etime) {
        this._normalizeDate(this._etime, false);
      }
    },

    /**
     * (action) Etime input key down.
     * 
     * @param {jQuery.Event} event
     * @private
     */
    _onEinputKeyDown : function(event) {

      switch (event.which) {
      case KEYCODE_BACKSPACE:
        if (0 === this._einput.get(0).selectionStart) {
          this._input[0].setSelectionRange(3, 5);
        }
        return false;
        break;
      // up
      case 38:
        if (this._isHourSelected(this._einput)) {
          if (this._etime) {
            this._etime.setHours(this._etime.getHours() + 1);
            this._setEtimeAndCursorSelection(event.target, 0, 2);
          } else {
            // when no time,set to 1970/01/01 01:00:00
            this._etime = new Date(1970, 1, 1, 1, 0, 0);
            this._setEtimeAndCursorSelection(event.target, 0, 2);
          }
        } else if (this._isMinuteSelected(this._einput)) {
          if (this._etime) {
            this._etime.setMinutes(this._etime.getMinutes() + 1);
            this._setEtimeAndCursorSelection(event.target, 3, 5);
          } else {
            // when no time,set to 1970/01/01 01:00:00
            this._etime = new Date(1970, 1, 1, 1, 0, 0);
            this._setEtimeAndCursorSelection(event.target, 3, 5);
          }
        }
        if (this._einput.inputmask('isComplete')) {
          this._einput.trigger(EVENT_COMPLETE);
        }
        return false;
        break;
      // down
      case 40:
        if (this._isHourSelected(this._einput)) {
          if (this._etime) {
            this._etime.setHours(this._etime.getHours() - 1);
            this._setEtimeAndCursorSelection(event.target, 0, 2);
          } else {
            // when no time,set to 1970/01/01 11:00:00
            this._etime = new Date(1970, 1, 1, 11, 0, 0);
            this._setEtimeAndCursorSelection(event.target, 0, 2);
          }
        } else if (this._isMinuteSelected(this._einput)) {
          if (this._etime) {
            this._etime.setMinutes(this._etime.getMinutes() - 1);
            this._setEtimeAndCursorSelection(event.target, 3, 5);
          } else {
            // when no time,set to 1970/01/01 11:00:00
            this._etime = new Date(1970, 1, 1, 11, 0, 0);
            this._setEtimeAndCursorSelection(event.target, 3, 5);
          }
        }
        if (this._einput.inputmask('isComplete')) {
          this._einput.trigger(EVENT_COMPLETE);
        }
        return false;
        break;
      // left
      case 37:
        if (0 === this._einput[0].selectionStart) {
          this._input[0].setSelectionRange(3, 5);
        } else {
          event.target.setSelectionRange(0, 2);
        }
        return false;
        break;
      // right
      case 39:
        event.target.setSelectionRange(3, 5);
        return false;
        break;
      default:
        break;
      }
    },

    /**
     * set etime to einput and show highlight
     * 
     * @param {Object} target
     * @param {Number} from
     * @param {Number} to
     * @private
     */
    _setEtimeAndCursorSelection : function(target, from, to) {
      this.setEtime(this._etime);
      target.setSelectionRange(from, to);
    },

    /**
     * timeRangePickerValidate: to-time shouldn't smaller than from-time
     * 
     * @private
     */
    _timeRangePickerValidate : function() {
      if (this._time && this._etime && (this._etime.getTime() < this._time.getTime())) {
        this._etime = this._time;
        this.setEtime(this._etime);
      }
    },

    /**
     * setIntervalMinutes: default 0
     * 
     * @private
     */
    _setIntervalMinutes : function() {
      var fromTime = this._time.getTime();
      var toTime = new Date(fromTime + this.options.intervalMinutes * 60 * 1000);
      this._etime = toTime;
      this.setEtime(this._etime);
    }
  });

  /**
   * Automatic initialization.
   */
  $(function() {
    var autoInstantiationClass = $.wap.timeRangePicker.prototype.widgetFullName;
    $('.' + autoInstantiationClass).timeRangePicker();
  });

}(jQuery));

(function($) {
  $
      .widget(
          'wap.fileAttachment',
          $.wap.abstractWidget,
          {
            options : {
              view_type : 'all',
              button_caption : 'Select file',
              drag_caption : 'Drop here',
              encType : "UTF-8",
              description : '',
              accept : undefined,
              iconClass : 'wap-icon-upload',
              permitTypes : [],
              forbidTypes : [],
              size : 0,
              onUpload : function(data) {
                // alert(data.target.result);
              },
              failUpload : function(file) {
              }
            },

            _on_file_selected : function(files) {
              var self = this;
              
              for (var i = 0; i < files.length; i++) {
                var compare = new fileUploadRestrict.compareFile();
                var loadPermitted = compare.permitLoad(files[i], self.options.size, self.options.permitTypes, self.options.forbidTypes);
                
                if (loadPermitted) {
                  self._attachFile($(self.element).find('.wap-attach-file-list'), files[i]["name"],
                      files[i]["size"] / 1000);
                  var reader = new FileReader();
                  reader.onload = self.options.onUpload;
                  reader.readAsText(files[i], self.options.encType);
                } else {
                  self.options.failUpload(files[i]);
                }
              }
            },
            _create : function() {
              this._super();
              if (this.element.attr('data-enc-type')) {
                this.options.encType = this.element.attr('data-enc-type');
              }
              ;
              if (this.element.attr('data-view-type')) {
                this.options.view_type = this.element.attr('data-view-type');
              }
              ;
              if (this.element.attr('button-caption')) {
                this.options.button_caption = this.element.attr('button-caption');
              }
              ;
              if (this.element.attr('drag-caption')) {
                this.options.drag_caption = this.element.attr('drag-caption');
              }
              ;
              if (this.element.attr('description')) {
                this.options.description = this.element.attr('description');
              }
              ;

              if (this.element.attr('data-accept')) {
                this.options.accept = parseInt(this.element.attr('data-accept'));
              }
              ;
              if (this.element.attr('data-permit-types')) {
                this.options.permitTypes = [];
                var self = this;
                $.each(self.element.attr('data-permit-types').split(','), function(index, type) {
                   self.options.permitTypes.push($.trim(type).toUpperCase());
                });
              }
              ;
              if (this.element.attr('data-forbid-types')) {
                this.options.forbidTypes = [];
                var self = this;
                $.each(self.element.attr('data-forbid-types').split(','), function(index, type) {
                   self.options.forbidTypes.push($.trim(type).toUpperCase());
                });
              }
              ;
              if (this.element.attr('onUpload')) {
                this.options.onUpload = new Function('data', this.element.attr('onUpload'));
              }
              ;
              if (this.element.attr('failUpload')) {
                this.options.failUpload = new Function('file', this.element.attr('failUpload'));
              }
              ;
              this.$real = $('<input type="file" style="display:none;">');
              if (this.element.children().length === 0) {
                var item = this._generate_default(this.options.button_caption, this.options.drag_caption,
                    this.options.description);
                this.element.append(item);
                this.element.find('.wap-fileUploadButton').on('click', function() {
                  that.$real.click();
                });
              }
              ;
              if (this.options.accept) {
                this.$real.attr('accept', this.options.accept);
              }
              var that = this;
              $(document.body).append(this.$real);
              this.$real.get(0).addEventListener("change", function(ev) {
                that._on_file_selected(ev.target.files);
              }, false);
              this._prepare();
            },

            _destroy : function() {
            },

            _prepare : function() {
              var that = this;
              var $attach_file_drop = this.element.find(".wap-attach-file-drop");
              $(this.element).off("drop");
              $(this.element).on("drop", function(e, files) {
                // ドラッグされたファイル情報を取得
                var files = e.originalEvent.dataTransfer.files;
                that._on_file_selected(files);

                $attach_file_drop.hide();
                e.stopPropagation();
                return false;
              }.bind(document)).bind("dragenter", function() {
                // false を返してデフォルトの処理を実行しないようにする
                $attach_file_drop.show();
                return false;
              }).bind("dragover", function() {
                // false を返してデフォルトの処理を実行しないようにする
                $attach_file_drop.show();
                return false;
              });
            },

            _attachFile : function(file_list, name, size) {
              var item = this._generate_item(name, size);
              file_list.append(item);
              var i = 0;
              var myVar = setInterval(function() {
                i++;
                if (i <= 100) {
                  item.find(".wap-file-progress-bar").val(i);
                }
              }, 5);

              setTimeout(function() {
                window.clearInterval(myVar);
              }, 1000);

              item.parent().find('.wap-icon-close').on('click', function() {
                $(this).parent().parent().remove();
                if ($('.wap-attach-file-list').children().size() === 0) {
                  $('.wap-attach-file-target').show();
                }
              });
            },
            _generate_default : function(name, caption, description) {
              var item
              if (this.options.view_type === 'all') {
                item = $(Hogan
                    .compile(
                        '<label for="attach-file" class="control-label"></label>'
                            + '<button type="button" class="btn btn-default wap-icon-attachment wap-fileUploadButton">{{name}}</button>'
                            + '<div class="wap-attach-file-drop">{{caption}}</div>'
                            + '<div class="wap-attach-file-target"><span class="wap-attach-file-hint">{{description}}</span></div>'
                            + '<ul class="nav nav-pills nav-stacked wap-attach-file-list"></ul>'
                            + ''
                            + '').render({
                      name : name,
                      caption : caption,
                      description : description
                    }));
              } else if (this.options.view_type === 'button-only') {
                item = $(Hogan.compile(
                    '<button type="button" class="btn btn-default wap-icon-attachment wap-fileUploadButton">{{name}}</button>'
                        + '').render({
                  name : name
                }));
              } else {
                console.error('Invalid view type:' + this.options.view_type);
              }
              ;

              return item;
            },

            _generate_item : function(name, size) {
              return $(Hogan.compile(
                  '<li>'
                      + '<a class="wap-attach-file-name">'
                      + '<i class="wap-icon-attachment"></i>'
                      + '{{name}}'
                      + '<span>({{byte}} KB)</span>'
                      + '<span class="wap-icon-close"></span>'
                      + '<progress class="wap-file-progress-bar" max="100" value="0"></progress>'
                      + '</a>'
                      + '</li>').render({
                name : name,
                byte : size
              }));
            },
            setEncType : function(encType) {
              this.options.encType = encType;
            }
          });
  $(function() {
    var autoInstantiationClass = $.wap.fileAttachment.prototype.widgetFullName;
    $('.' + autoInstantiationClass).fileAttachment({});
  });

}(jQuery));

/*
 * FileViewer @author nishio_t
 */

(function($) {
  $.widget('wap.fileViewer', $.wap.abstractWidget, {
    options : {
      dispStyle : 'embed',
      filePath : '',
      height : '600px',
      width : '600px'
    },

    _create : function() {
      this._super();// 継承元を呼びます。これを呼ぶとhtmlのデータアトリビュートをcamelCaseした内容をthis.optionsにマージしてくれます。
    }

  });

  window.fileViewer = function(filePath, height, width) {
    // 既存のモーダルがあれば除去する
    var $modalWindow = $("#modalFileViewer");
    if ($modalWindow != null) {
      $modalWindow.remove();
    }
    $(".modal-backdrop").each(function() {
      $(this).remove();
    });

    // PDFモーダル
    if (filePath.indexOf(".pdf") !== -1) {
      // PDFの場合デフォルトサイズを600pxとします
      if (height == null || height === '') {
        height = '600px';
      } else {
        if (height.indexOf('%') != -1) {
          height = parent.innerHeight * height.replace('%', '') / 100;
        }
      }
      if (width == null || width === '') {
        width = '600px';
      } else {
        if (width.indexOf('%') != -1) {
          width = parent.innerWidth * width.replace('%', '') / 100;
        }
      }

      // PDFモーダルのテンプレートDOMをHTML上にappend
      var modalHtml = '<div class="modal fade" id="modalFileViewer" aria-hidden="true" style="display: none;"><div class="modal-dialog" id="modalFileViewer-main"><div class="modal-content" style="padding-left: 10px;" id="modalFileViewer-content" ><div class="gallery-image-edit-env" style="padding: 23px;border-bottom:0px"><button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button></div><iframe id="modalFileViewer-iframe" height="'
          + height
          + '" width="'
          + width
          + '" src="'
          + filePath
          + '"></iframe></div></div></div>';
      $(document.body).append(modalHtml);

      // 枠サイズを調整させます
      var $fileViewerIFrame = $("#modalFileViewer-iframe");
      var $fileViewerContent = $("#modalFileViewer-content");
      var $fileViewerMain = $("#modalFileViewer-main")
      $fileViewerContent.height($fileViewerIFrame.height() - 0 + 58);
      $fileViewerContent.width($fileViewerIFrame.width() - 0 + 14);
      $fileViewerMain.height($fileViewerContent.height());
      $fileViewerMain.width($fileViewerContent.width());

      // モーダルエリアの表示(マージンを調整して中央に表示)
      var windowHeight = parent.innerHeight;
      if (window.innerHeight < windowHeight) {
        windowHeight = window.innerHeight;
      }

      // 表示位置の調整・・・・2種類のマージンの足しあわせで調整します
      // A: モーダルを画面中央に寄せるマージン。モーダル画像がスクリーンの高さより大きい場合は、高さをスクリーン上部に合わせる
      // B: iframe内部からモーダルを読み込む場合にスクロール位置を調整するマージン。
      var $newModalFileViewer = $("#modalFileViewer");

      // A : 中央合わせマージン
      var modalCenteringMargin = (windowHeight - $fileViewerMain.height()) / 2 - 30;
      if (modalCenteringMargin < 0) {
        modalCenteringMargin = 0;
      }

      // B: iframe用マージン内部
      var iframeScrollMargin = 0;
      if (frameElement != null && $(parent).scrollTop() != $(window).scrollTop()) {
        iframeScrollMargin = $(parent).scrollTop() - $(frameElement).offset().top + 30;
      }

      // 2種類のマージンを統合してCSS適用し、モーダルを表示する
      var totalMargin = modalCenteringMargin + iframeScrollMargin;
      $newModalFileViewer.css('padding-top', totalMargin);
      $newModalFileViewer.css('overflow-y', 'hidden');
      $newModalFileViewer.modal('show');

      // 画像モーダル
    } else if (filePath.indexOf(".png") !== -1 || filePath.indexOf(".gif") !== -1 || filePath.indexOf(".jpg") !== -1) {
      // 画像モーダルのテンプレートDOMをHTML上にappend
      var modalHtml = '<div class="modal fade" id="modalFileViewer" aria-hidden="true" style="display: none;"><div class="modal-dialog" id="modalFileViewer-main"><div class="modal-content" id="modalFileViewer-content" style=""><div class="gallery-image-edit-env"><button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button></div><img id="modalFileViewer-image" src="'
          + filePath
          + '"></img></div></div></div>';
      $(document.body).append(modalHtml);

      // 画像をロード後に各種サイズ調整をかけます
      var $fileViewerImage = $("#modalFileViewer-image");
      var $fileViewerContent = $("#modalFileViewer-content");
      var $fileViewerMain = $("#modalFileViewer-main");
      $fileViewerImage.one('load', function() {

        // 画像のサイズが指定されていた場合、画像サイズを変更します
        var heightSpecified = false;
        var widthSpecified = false;
        var windowHeight = parent.innerHeight;
        var windowWidth = parent.innerWidth;

        if (height == null || height === '') {
          //
        } else {
          heightSpecified = true;
          if (height.indexOf('%') != -1) {
            height = windowHeight * height.replace('%', '') / 100;
          }
          $fileViewerImage.css('height', height);
        }
        if (width == null || width === '') {
          //
        } else {
          widthSpecified = true;
          if (width.indexOf('%') != -1) {
            width = windowWidth * width.replace('%', '') / 100;
          }
          $fileViewerImage.css('width', width);
        }

        // 高さも幅も未指定→画像のオリジナルサイズにします
        // 高さのみ指定→幅は画像のアス比から計算
        // 幅のみ指定→高さは画像のアス比から計算
        // どっちも指定してある場合→短辺にあわせてアス比を調整 //TODO
        var imageOrgHeight = $fileViewerImage[0].height;
        var imageOrgWidth = $fileViewerImage[0].width;
        var dispHeightPixelNum = (height + '').replace('px', '');
        var dispWidthPixelNum = (width + '').replace('px', '');
        if (!heightSpecified && !widthSpecified) {
          // height = imageOrgHeight;
          // width = imageOrgWidth;
          $fileViewerImage.height(imageOrgHeight);
          $fileViewerImage.width(imageOrgWidth);
        } else if (heightSpecified && !widthSpecified) {
          width = dispHeightPixelNum * imageOrgWidth / imageOrgHeight;
          $fileViewerImage.width(width);
        } else if (!heightSpecified && widthSpecified) {
          height = dispWidthPixelNum * imageOrgHeight / imageOrgWidth;
          $fileViewerImage.height(height);
        } else if (heightSpecified && widthSpecified) {
          var dispAspectRate = dispHeightPixelNum / dispWidthPixelNum;
          var originalAspectRate = imageOrgHeight / imageOrgWidth;
          // 通常のアス比より縦が長くなっている場合→横をもとに縦を調整
          if (dispAspectRate > originalAspectRate) {
            height = dispWidthPixelNum * imageOrgHeight / imageOrgWidth;
            $fileViewerImage.css('height', height);
            // 通常のアス比より横が長くなっている場合→縦をもとに横を調整
          } else {
            width = dispHeightPixelNum * imageOrgWidth / imageOrgHeight;
            $fileViewerImage.css('width', width);
          }
        }

        // 枠サイズを調整させます
        $fileViewerContent.height($fileViewerImage.height() - 0 + 20);
        $fileViewerContent.width($fileViewerImage.width() - 0 + 20);
        $fileViewerContent.css('padding', '10px');
        $fileViewerMain.height($fileViewerContent.height());
        $fileViewerMain.width($fileViewerContent.width());

        // モーダルエリアの表示(マージンを調整して中央に表示)
        var windowHeight = parent.innerHeight;
        if (window.innerHeight < windowHeight) {
          windowHeight = window.innerHeight;
        }

        // 表示位置の調整・・・・2種類のマージンの足しあわせで調整します
        // A: モーダルを画面中央に寄せるマージン。モーダル画像がスクリーンの高さより大きい場合は、高さをスクリーン上部に合わせる
        // B: iframe内部からモーダルを読み込む場合にスクロール位置を調整するマージン。
        var $newModalFileViewer = $("#modalFileViewer");

        // A : 中央合わせマージン
        var modalCenteringMargin = (windowHeight - $fileViewerMain.height()) / 2 - 30;
        if (modalCenteringMargin < 0) {
          modalCenteringMargin = 0;
        }

        // B: iframe用マージン内部
        var iframeScrollMargin = 0;
        if (frameElement != null && $(parent).scrollTop() != $(window).scrollTop()) {
          iframeScrollMargin = $(parent).scrollTop() - $(frameElement).offset().top + 30;
        }

        // 2種類のマージンを統合してCSS適用し、モーダルを表示する
        var totalMargin = modalCenteringMargin + iframeScrollMargin;
        $newModalFileViewer.css('padding-top', totalMargin);
        $newModalFileViewer.css('overflow-y', 'hidden');
        $newModalFileViewer.modal('show');

      }).each(function() {
        if (this.complete)
          $(this).load();
      });
    }
  }

  /** ファイルビューアーを埋め込みするメソッド */
  window.fileViewerEmbed = function(filePath, targetId, height, width, targetPaneId) {
    var $targetDiv = $("#" + targetId);
    if ($targetDiv == null) {
      console.error('Embed File Viewer ERROR tartget DOM is NOT FOUND : #' + targetId);
      return;
    }

    // 既存の埋め込みを削除
    fileViewerRemove(targetId);

    // PDF埋め込み
    if ((filePath).indexOf(".pdf") !== -1) {

      // [Percent指定の時のために]サイズ目標となるウィンドウのサイズを取得
      var $targetPane = $("#" + targetPaneId);
      var windowWidth;
      var windowHeight;
      if (targetPaneId == null || $targetPane == null) { // ターゲットのペインがなければ画面全体の縦横をもとにサイズ調整する
        windowWidth = parent.innerWidth
        windowHeight = parent.innerHeight;
      } else { // ターゲットのペインがあれば、ターゲットのペインの縦横サイズをもとにサイズ調整する
        windowWidth = $targetPane.width();
        windowHeight = $targetPane.height();
      }

      // PDFの場合デフォルトサイズを600pxとします
      var heightSpecified = false;
      var widthSpecified = false;

      if (height == null || height === '') {
        //
      } else {
        heightSpecified = true;
        if (height.indexOf('%') != -1) {
          height = windowHeight * height.replace('%', '') / 100;
        }
      }
      if (width == null || width === '') {
        //
      } else {
        widthSpecified = true;
        if (width.indexOf('%') != -1) {
          width = windowWidth * width.replace('%', '') / 100;
        }
      }

      // 高さも幅も未指定→デフォルトの600pxにします
      // 高さのみ指定→幅は高さの0.7倍（A4サイズタテ想定）
      // 幅のみ指定→高さは幅の1.4倍（A4サイズタテ想定）
      if (!heightSpecified && !widthSpecified) {
        height = '600px';
        width = '600px';
      } else if (heightSpecified && !widthSpecified) {
        width = (height + '').replace('px', '') * 0.7;
      } else if (!heightSpecified && widthSpecified) {
        height = (width + '').replace('px', '') * 1.4;
      }

      // PDF埋め込みのテンプレートDOMを作成
      var embedHtml = '<iframe class="embedFileViewer-iframe" height="'
          + height
          + '" width="'
          + width
          + '" src="'
          + filePath
          + '"></iframe>'
      $targetDiv.append(embedHtml);

      // 画像埋め込み
    } else if ((filePath).indexOf(".png") !== -1
        || (filePath).indexOf(".gif") !== -1
        || (filePath).indexOf(".jpg") !== -1) {

      // [Percent指定の時のために]サイズ目標となるウィンドウのサイズを取得
      var $targetPane = $("#" + targetPaneId);
      var windowWidth;
      var windowHeight;
      if (targetPaneId == null || $targetPane == null) { // ターゲットのペインがなければ画面全体の縦横をもとにサイズ調整する
        windowWidth = parent.innerWidth;
        windowHeight = parent.innerHeight;
      } else { // ターゲットのペインがあれば、ターゲットのペインの縦横サイズをもとにサイズ調整する
        windowWidth = $targetPane.width();
        windowHeight = $targetPane.height();
      }

      // 画像埋め込みのテンプレートDOMを作成
      var embedHtml = '<img class="embedFileViewer-image img-thumbnail" src="' + filePath + '"></img>';
      $targetDiv.append(embedHtml);

      // 画像をロード後に各種サイズ調整をかけます
      var $fileViewerImage = $targetDiv.find(".embedFileViewer-image");
      $fileViewerImage.one('load', function() {

        // 画像のサイズが指定されていた場合、画像サイズを変更します
        var heightSpecified = false;
        var widthSpecified = false;
        if (height == null || height === '') {
          //
        } else {
          heightSpecified = true;
          if (height.indexOf('%') != -1) {
            height = windowHeight * height.replace('%', '') / 100;
          }
          $fileViewerImage.css('height', height);
        }
        if (width == null || width === '') {
          //
        } else {
          widthSpecified = true;
          if (width.indexOf('%') != -1) {
            width = windowWidth * width.replace('%', '') / 100;
          }
          $fileViewerImage.css('width', width);
        }

        // 高さも幅も未指定→画像のオリジナルサイズにします
        // 高さのみ指定→幅は画像のアス比から計算
        // 幅のみ指定→高さは画像のアス比から計算
        // どっちも指定してある場合→短辺にあわせてアス比を調整
        var imageOrgHeight = $fileViewerImage[0].height;
        var imageOrgWidth = $fileViewerImage[0].width;
        var dispHeightPixelNum = (height + '').replace('px', '');
        var dispWidthPixelNum = (width + '').replace('px', '');
        if (!heightSpecified && !widthSpecified) {
          height = imageOrgHeight;
          width = imageOrgWidth;
        } else if (heightSpecified && !widthSpecified) {
          width = dispHeightPixelNum * imageOrgWidth / imageOrgHeight;
        } else if (!heightSpecified && widthSpecified) {
          height = dispWidthPixelNum * imageOrgHeight / imageOrgWidth;
        } else if (heightSpecified && widthSpecified) {
          var dispAspectRate = dispHeightPixelNum / dispWidthPixelNum;
          var originalAspectRate = imageOrgHeight / imageOrgWidth;
          // 通常のアス比より縦が長くなっている場合→横をもとに縦を調整
          if (dispAspectRate > originalAspectRate) {
            height = dispWidthPixelNum * imageOrgHeight / imageOrgWidth;
            $fileViewerImage.css('height', height);
            // 通常のアス比より横が長くなっている場合→縦をもとに横を調整
          } else {
            width = dispHeightPixelNum * imageOrgWidth / imageOrgHeight;
            $fileViewerImage.css('width', width);
          }
        }

      }).each(function() {
        if (this.complete)
          $(this).load();
      });
    }
  }

  /** 埋め込みされたビューアーを削除するメソッド */
  window.fileViewerRemove = function(targetId) {
    if ($("#" + targetId) == null) {
      console.error('Embed File Viewer ERROR tartget DOM is NOT FOUND : #' + targetId);
      return;
    }
    var $fileViewerIframe = $("#" + targetId + " .embedFileViewer-iframe");
    if ($fileViewerIframe != null) {
      $fileViewerIframe.remove();
    }
    var $fileViewerImage = $("#" + targetId + " .embedFileViewer-image");
    if ($fileViewerImage != null) {
      $fileViewerImage.remove();
    }
  }

  /** 新しいタブで開くメソッド */
  window.fileViewerTab = function(filePath) {
    window.open(filePath);
  };

}(jQuery));
////////////////////////////////////////////////////////////////////////////////////////////
/// this is copied from jquery.easing.1.3.js to avoid additional script tag.
////////////////////////////////////////////////////////////////////////////////////////////
// t: current time, b: begInnIng value, c: change In value, d: duration
jQuery.easing['jswing'] = jQuery.easing['swing'];

jQuery.extend( jQuery.easing,
{
  def: 'easeOutQuad',
  swing: function (x, t, b, c, d) {
    //alert(jQuery.easing.default);
    return jQuery.easing[jQuery.easing.def](x, t, b, c, d);
  },
  easeInQuad: function (x, t, b, c, d) {
    return c*(t/=d)*t + b;
  },
  easeOutQuad: function (x, t, b, c, d) {
    return -c *(t/=d)*(t-2) + b;
  },
  easeInOutQuad: function (x, t, b, c, d) {
    if ((t/=d/2) < 1) return c/2*t*t + b;
    return -c/2 * ((--t)*(t-2) - 1) + b;
  },
  easeInCubic: function (x, t, b, c, d) {
    return c*(t/=d)*t*t + b;
  },
  easeOutCubic: function (x, t, b, c, d) {
    return c*((t=t/d-1)*t*t + 1) + b;
  },
  easeInOutCubic: function (x, t, b, c, d) {
    if ((t/=d/2) < 1) return c/2*t*t*t + b;
    return c/2*((t-=2)*t*t + 2) + b;
  },
  easeInQuart: function (x, t, b, c, d) {
    return c*(t/=d)*t*t*t + b;
  },
  easeOutQuart: function (x, t, b, c, d) {
    return -c * ((t=t/d-1)*t*t*t - 1) + b;
  },
  easeInOutQuart: function (x, t, b, c, d) {
    if ((t/=d/2) < 1) return c/2*t*t*t*t + b;
    return -c/2 * ((t-=2)*t*t*t - 2) + b;
  },
  easeInQuint: function (x, t, b, c, d) {
    return c*(t/=d)*t*t*t*t + b;
  },
  easeOutQuint: function (x, t, b, c, d) {
    return c*((t=t/d-1)*t*t*t*t + 1) + b;
  },
  easeInOutQuint: function (x, t, b, c, d) {
    if ((t/=d/2) < 1) return c/2*t*t*t*t*t + b;
    return c/2*((t-=2)*t*t*t*t + 2) + b;
  },
  easeInSine: function (x, t, b, c, d) {
    return -c * Math.cos(t/d * (Math.PI/2)) + c + b;
  },
  easeOutSine: function (x, t, b, c, d) {
    return c * Math.sin(t/d * (Math.PI/2)) + b;
  },
  easeInOutSine: function (x, t, b, c, d) {
    return -c/2 * (Math.cos(Math.PI*t/d) - 1) + b;
  },
  easeInExpo: function (x, t, b, c, d) {
    return (t==0) ? b : c * Math.pow(2, 10 * (t/d - 1)) + b;
  },
  easeOutExpo: function (x, t, b, c, d) {
    return (t==d) ? b+c : c * (-Math.pow(2, -10 * t/d) + 1) + b;
  },
  easeInOutExpo: function (x, t, b, c, d) {
    if (t==0) return b;
    if (t==d) return b+c;
    if ((t/=d/2) < 1) return c/2 * Math.pow(2, 10 * (t - 1)) + b;
    return c/2 * (-Math.pow(2, -10 * --t) + 2) + b;
  },
  easeInCirc: function (x, t, b, c, d) {
    return -c * (Math.sqrt(1 - (t/=d)*t) - 1) + b;
  },
  easeOutCirc: function (x, t, b, c, d) {
    return c * Math.sqrt(1 - (t=t/d-1)*t) + b;
  },
  easeInOutCirc: function (x, t, b, c, d) {
    if ((t/=d/2) < 1) return -c/2 * (Math.sqrt(1 - t*t) - 1) + b;
    return c/2 * (Math.sqrt(1 - (t-=2)*t) + 1) + b;
  },
  easeInElastic: function (x, t, b, c, d) {
    var s=1.70158;var p=0;var a=c;
    if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
    if (a < Math.abs(c)) { a=c; var s=p/4; }
    else var s = p/(2*Math.PI) * Math.asin (c/a);
    return -(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
  },
  easeOutElastic: function (x, t, b, c, d) {
    var s=1.70158;var p=0;var a=c;
    if (t==0) return b;  if ((t/=d)==1) return b+c;  if (!p) p=d*.3;
    if (a < Math.abs(c)) { a=c; var s=p/4; }
    else var s = p/(2*Math.PI) * Math.asin (c/a);
    return a*Math.pow(2,-10*t) * Math.sin( (t*d-s)*(2*Math.PI)/p ) + c + b;
  },
  easeInOutElastic: function (x, t, b, c, d) {
    var s=1.70158;var p=0;var a=c;
    if (t==0) return b;  if ((t/=d/2)==2) return b+c;  if (!p) p=d*(.3*1.5);
    if (a < Math.abs(c)) { a=c; var s=p/4; }
    else var s = p/(2*Math.PI) * Math.asin (c/a);
    if (t < 1) return -.5*(a*Math.pow(2,10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )) + b;
    return a*Math.pow(2,-10*(t-=1)) * Math.sin( (t*d-s)*(2*Math.PI)/p )*.5 + c + b;
  },
  easeInBack: function (x, t, b, c, d, s) {
    if (s == undefined) s = 1.70158;
    return c*(t/=d)*t*((s+1)*t - s) + b;
  },
  easeOutBack: function (x, t, b, c, d, s) {
    if (s == undefined) s = 1.70158;
    return c*((t=t/d-1)*t*((s+1)*t + s) + 1) + b;
  },
  easeInOutBack: function (x, t, b, c, d, s) {
    if (s == undefined) s = 1.70158; 
    if ((t/=d/2) < 1) return c/2*(t*t*(((s*=(1.525))+1)*t - s)) + b;
    return c/2*((t-=2)*t*(((s*=(1.525))+1)*t + s) + 2) + b;
  },
  easeInBounce: function (x, t, b, c, d) {
    return c - jQuery.easing.easeOutBounce (x, d-t, 0, c, d) + b;
  },
  easeOutBounce: function (x, t, b, c, d) {
    if ((t/=d) < (1/2.75)) {
      return c*(7.5625*t*t) + b;
    } else if (t < (2/2.75)) {
      return c*(7.5625*(t-=(1.5/2.75))*t + .75) + b;
    } else if (t < (2.5/2.75)) {
      return c*(7.5625*(t-=(2.25/2.75))*t + .9375) + b;
    } else {
      return c*(7.5625*(t-=(2.625/2.75))*t + .984375) + b;
    }
  },
  easeInOutBounce: function (x, t, b, c, d) {
    if (t < d/2) return jQuery.easing.easeInBounce (x, t*2, 0, c, d) * .5 + b;
    return jQuery.easing.easeOutBounce (x, t*2-d, 0, c, d) * .5 + c*.5 + b;
  }
});
////////////////////////////////////////////////////////////////////////////////////////////
/// end of jquery.easing.1.3.js
////////////////////////////////////////////////////////////////////////////////////////////

if (!$.fn.bxSlider) {
////////////////////////////////////////////////////////////////////////////////////////////
/// this is copied from jquery.bxslider.min.js to avoid additional script tag.
////////////////////////////////////////////////////////////////////////////////////////////
/**
 * BxSlider v4.1.2 - Fully loaded, responsive content slider
 * http://bxslider.com
 *
 * Copyright 2014, Steven Wanderski - http://stevenwanderski.com - http://bxcreative.com
 * Written while drinking Belgian ales and listening to jazz
 *
 * Released under the MIT license - http://opensource.org/licenses/MIT
 */
!function(t){var e={},s={mode:"horizontal",slideSelector:"",infiniteLoop:!0,hideControlOnEnd:!1,speed:500,easing:null,slideMargin:0,startSlide:0,randomStart:!1,captions:!1,ticker:!1,tickerHover:!1,adaptiveHeight:!1,adaptiveHeightSpeed:500,video:!1,useCSS:!0,preloadImages:"visible",responsive:!0,slideZIndex:50,touchEnabled:!0,swipeThreshold:50,oneToOneTouch:!0,preventDefaultSwipeX:!0,preventDefaultSwipeY:!1,pager:!0,pagerType:"full",pagerShortSeparator:" / ",pagerSelector:null,buildPager:null,pagerCustom:null,controls:!0,nextText:"Next",prevText:"Prev",nextSelector:null,prevSelector:null,autoControls:!1,startText:"Start",stopText:"Stop",autoControlsCombine:!1,autoControlsSelector:null,auto:!1,pause:4e3,autoStart:!0,autoDirection:"next",autoHover:!1,autoDelay:0,minSlides:1,maxSlides:1,moveSlides:0,slideWidth:0,onSliderLoad:function(){},onSlideBefore:function(){},onSlideAfter:function(){},onSlideNext:function(){},onSlidePrev:function(){},onSliderResize:function(){}};t.fn.bxSlider=function(n){if(0==this.length)return this;if(this.length>1)return this.each(function(){t(this).bxSlider(n)}),this;var o={},r=this;e.el=this;var a=t(window).width(),l=t(window).height(),d=function(){o.settings=t.extend({},s,n),o.settings.slideWidth=parseInt(o.settings.slideWidth),o.children=r.children(o.settings.slideSelector),o.children.length<o.settings.minSlides&&(o.settings.minSlides=o.children.length),o.children.length<o.settings.maxSlides&&(o.settings.maxSlides=o.children.length),o.settings.randomStart&&(o.settings.startSlide=Math.floor(Math.random()*o.children.length)),o.active={index:o.settings.startSlide},o.carousel=o.settings.minSlides>1||o.settings.maxSlides>1,o.carousel&&(o.settings.preloadImages="all"),o.minThreshold=o.settings.minSlides*o.settings.slideWidth+(o.settings.minSlides-1)*o.settings.slideMargin,o.maxThreshold=o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin,o.working=!1,o.controls={},o.interval=null,o.animProp="vertical"==o.settings.mode?"top":"left",o.usingCSS=o.settings.useCSS&&"fade"!=o.settings.mode&&function(){var t=document.createElement("div"),e=["WebkitPerspective","MozPerspective","OPerspective","msPerspective"];for(var i in e)if(void 0!==t.style[e[i]])return o.cssPrefix=e[i].replace("Perspective","").toLowerCase(),o.animProp="-"+o.cssPrefix+"-transform",!0;return!1}(),"vertical"==o.settings.mode&&(o.settings.maxSlides=o.settings.minSlides),r.data("origStyle",r.attr("style")),r.children(o.settings.slideSelector).each(function(){t(this).data("origStyle",t(this).attr("style"))}),c()},c=function(){r.wrap('<div class="bx-wrapper"><div class="bx-viewport"></div></div>'),o.viewport=r.parent(),o.loader=t('<div class="bx-loading" />'),o.viewport.prepend(o.loader),r.css({width:"horizontal"==o.settings.mode?100*o.children.length+215+"%":"auto",position:"relative"}),o.usingCSS&&o.settings.easing?r.css("-"+o.cssPrefix+"-transition-timing-function",o.settings.easing):o.settings.easing||(o.settings.easing="swing"),f(),o.viewport.css({width:"100%",overflow:"hidden",position:"relative"}),o.viewport.parent().css({maxWidth:p()}),o.settings.pager||o.viewport.parent().css({margin:"0 auto 0px"}),o.children.css({"float":"horizontal"==o.settings.mode?"left":"none",listStyle:"none",position:"relative"}),o.children.css("width",u()),"horizontal"==o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginRight",o.settings.slideMargin),"vertical"==o.settings.mode&&o.settings.slideMargin>0&&o.children.css("marginBottom",o.settings.slideMargin),"fade"==o.settings.mode&&(o.children.css({position:"absolute",zIndex:0,display:"none"}),o.children.eq(o.settings.startSlide).css({zIndex:o.settings.slideZIndex,display:"block"})),o.controls.el=t('<div class="bx-controls" />'),o.settings.captions&&P(),o.active.last=o.settings.startSlide==x()-1,o.settings.video&&r.fitVids();var e=o.children.eq(o.settings.startSlide);"all"==o.settings.preloadImages&&(e=o.children),o.settings.ticker?o.settings.pager=!1:(o.settings.pager&&T(),o.settings.controls&&C(),o.settings.auto&&o.settings.autoControls&&E(),(o.settings.controls||o.settings.autoControls||o.settings.pager)&&o.viewport.after(o.controls.el)),g(e,h)},g=function(e,i){var s=e.find("img, iframe").length;if(0==s)return i(),void 0;var n=0;e.find("img, iframe").each(function(){t(this).one("load",function(){++n==s&&i()}).each(function(){this.complete&&t(this).load()})})},h=function(){if(o.settings.infiniteLoop&&"fade"!=o.settings.mode&&!o.settings.ticker){var e="vertical"==o.settings.mode?o.settings.minSlides:o.settings.maxSlides,i=o.children.slice(0,e).clone().addClass("bx-clone"),s=o.children.slice(-e).clone().addClass("bx-clone");r.append(i).prepend(s)}o.loader.remove(),S(),"vertical"==o.settings.mode&&(o.settings.adaptiveHeight=!0),o.viewport.height(v()),r.redrawSlider(),o.settings.onSliderLoad(o.active.index),o.initialized=!0,o.settings.responsive&&t(window).bind("resize",Z),o.settings.auto&&o.settings.autoStart&&H(),o.settings.ticker&&L(),o.settings.pager&&q(o.settings.startSlide),o.settings.controls&&W(),o.settings.touchEnabled&&!o.settings.ticker&&O()},v=function(){var e=0,s=t();if("vertical"==o.settings.mode||o.settings.adaptiveHeight)if(o.carousel){var n=1==o.settings.moveSlides?o.active.index:o.active.index*m();for(s=o.children.eq(n),i=1;i<=o.settings.maxSlides-1;i++)s=n+i>=o.children.length?s.add(o.children.eq(i-1)):s.add(o.children.eq(n+i))}else s=o.children.eq(o.active.index);else s=o.children;return"vertical"==o.settings.mode?(s.each(function(){e+=t(this).outerHeight()}),o.settings.slideMargin>0&&(e+=o.settings.slideMargin*(o.settings.minSlides-1))):e=Math.max.apply(Math,s.map(function(){return t(this).outerHeight(!1)}).get()),e},p=function(){var t="100%";return o.settings.slideWidth>0&&(t="horizontal"==o.settings.mode?o.settings.maxSlides*o.settings.slideWidth+(o.settings.maxSlides-1)*o.settings.slideMargin:o.settings.slideWidth),t},u=function(){var t=o.settings.slideWidth,e=o.viewport.width();return 0==o.settings.slideWidth||o.settings.slideWidth>e&&!o.carousel||"vertical"==o.settings.mode?t=e:o.settings.maxSlides>1&&"horizontal"==o.settings.mode&&(e>o.maxThreshold||e<o.minThreshold&&(t=(e-o.settings.slideMargin*(o.settings.minSlides-1))/o.settings.minSlides)),t},f=function(){var t=1;if("horizontal"==o.settings.mode&&o.settings.slideWidth>0)if(o.viewport.width()<o.minThreshold)t=o.settings.minSlides;else if(o.viewport.width()>o.maxThreshold)t=o.settings.maxSlides;else{var e=o.children.first().width();t=Math.floor(o.viewport.width()/e)}else"vertical"==o.settings.mode&&(t=o.settings.minSlides);return t},x=function(){var t=0;if(o.settings.moveSlides>0)if(o.settings.infiniteLoop)t=o.children.length/m();else for(var e=0,i=0;e<o.children.length;)++t,e=i+f(),i+=o.settings.moveSlides<=f()?o.settings.moveSlides:f();else t=Math.ceil(o.children.length/f());return t},m=function(){return o.settings.moveSlides>0&&o.settings.moveSlides<=f()?o.settings.moveSlides:f()},S=function(){if(o.children.length>o.settings.maxSlides&&o.active.last&&!o.settings.infiniteLoop){if("horizontal"==o.settings.mode){var t=o.children.last(),e=t.position();b(-(e.left-(o.viewport.width()-t.width())),"reset",0)}else if("vertical"==o.settings.mode){var i=o.children.length-o.settings.minSlides,e=o.children.eq(i).position();b(-e.top,"reset",0)}}else{var e=o.children.eq(o.active.index*m()).position();o.active.index==x()-1&&(o.active.last=!0),void 0!=e&&("horizontal"==o.settings.mode?b(-e.left,"reset",0):"vertical"==o.settings.mode&&b(-e.top,"reset",0))}},b=function(t,e,i,s){if(o.usingCSS){var n="vertical"==o.settings.mode?"translate3d(0, "+t+"px, 0)":"translate3d("+t+"px, 0, 0)";r.css("-"+o.cssPrefix+"-transition-duration",i/1e3+"s"),"slide"==e?(r.css(o.animProp,n),r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(){r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),D()})):"reset"==e?r.css(o.animProp,n):"ticker"==e&&(r.css("-"+o.cssPrefix+"-transition-timing-function","linear"),r.css(o.animProp,n),r.bind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd",function(){r.unbind("transitionend webkitTransitionEnd oTransitionEnd MSTransitionEnd"),b(s.resetValue,"reset",0),N()}))}else{var a={};a[o.animProp]=t,"slide"==e?r.animate(a,i,o.settings.easing,function(){D()}):"reset"==e?r.css(o.animProp,t):"ticker"==e&&r.animate(a,speed,"linear",function(){b(s.resetValue,"reset",0),N()})}},w=function(){for(var e="",i=x(),s=0;i>s;s++){var n="";o.settings.buildPager&&t.isFunction(o.settings.buildPager)?(n=o.settings.buildPager(s),o.pagerEl.addClass("bx-custom-pager")):(n=s+1,o.pagerEl.addClass("bx-default-pager")),e+='<div class="bx-pager-item"><a href="" data-slide-index="'+s+'" class="bx-pager-link">'+n+"</a></div>"}o.pagerEl.html(e)},T=function(){o.settings.pagerCustom?o.pagerEl=t(o.settings.pagerCustom):(o.pagerEl=t('<div class="bx-pager" />'),o.settings.pagerSelector?t(o.settings.pagerSelector).html(o.pagerEl):o.controls.el.addClass("bx-has-pager").append(o.pagerEl),w()),o.pagerEl.on("click","a",I)},C=function(){o.controls.next=t('<a class="bx-next" href="">'+o.settings.nextText+"</a>"),o.controls.prev=t('<a class="bx-prev" href="">'+o.settings.prevText+"</a>"),o.controls.next.bind("click",y),o.controls.prev.bind("click",z),o.settings.nextSelector&&t(o.settings.nextSelector).append(o.controls.next),o.settings.prevSelector&&t(o.settings.prevSelector).append(o.controls.prev),o.settings.nextSelector||o.settings.prevSelector||(o.controls.directionEl=t('<div class="bx-controls-direction" />'),o.controls.directionEl.append(o.controls.prev).append(o.controls.next),o.controls.el.addClass("bx-has-controls-direction").append(o.controls.directionEl))},E=function(){o.controls.start=t('<div class="bx-controls-auto-item"><a class="bx-start" href="">'+o.settings.startText+"</a></div>"),o.controls.stop=t('<div class="bx-controls-auto-item"><a class="bx-stop" href="">'+o.settings.stopText+"</a></div>"),o.controls.autoEl=t('<div class="bx-controls-auto" />'),o.controls.autoEl.on("click",".bx-start",k),o.controls.autoEl.on("click",".bx-stop",M),o.settings.autoControlsCombine?o.controls.autoEl.append(o.controls.start):o.controls.autoEl.append(o.controls.start).append(o.controls.stop),o.settings.autoControlsSelector?t(o.settings.autoControlsSelector).html(o.controls.autoEl):o.controls.el.addClass("bx-has-controls-auto").append(o.controls.autoEl),A(o.settings.autoStart?"stop":"start")},P=function(){o.children.each(function(){var e=t(this).find("img:first").attr("title");void 0!=e&&(""+e).length&&t(this).append('<div class="bx-caption"><span>'+e+"</span></div>")})},y=function(t){o.settings.auto&&r.stopAuto(),r.goToNextSlide(),t.preventDefault()},z=function(t){o.settings.auto&&r.stopAuto(),r.goToPrevSlide(),t.preventDefault()},k=function(t){r.startAuto(),t.preventDefault()},M=function(t){r.stopAuto(),t.preventDefault()},I=function(e){o.settings.auto&&r.stopAuto();var i=t(e.currentTarget),s=parseInt(i.attr("data-slide-index"));s!=o.active.index&&r.goToSlide(s),e.preventDefault()},q=function(e){var i=o.children.length;return"short"==o.settings.pagerType?(o.settings.maxSlides>1&&(i=Math.ceil(o.children.length/o.settings.maxSlides)),o.pagerEl.html(e+1+o.settings.pagerShortSeparator+i),void 0):(o.pagerEl.find("a").removeClass("active"),o.pagerEl.each(function(i,s){t(s).find("a").eq(e).addClass("active")}),void 0)},D=function(){if(o.settings.infiniteLoop){var t="";0==o.active.index?t=o.children.eq(0).position():o.active.index==x()-1&&o.carousel?t=o.children.eq((x()-1)*m()).position():o.active.index==o.children.length-1&&(t=o.children.eq(o.children.length-1).position()),t&&("horizontal"==o.settings.mode?b(-t.left,"reset",0):"vertical"==o.settings.mode&&b(-t.top,"reset",0))}o.working=!1,o.settings.onSlideAfter(o.children.eq(o.active.index),o.oldIndex,o.active.index)},A=function(t){o.settings.autoControlsCombine?o.controls.autoEl.html(o.controls[t]):(o.controls.autoEl.find("a").removeClass("active"),o.controls.autoEl.find("a:not(.bx-"+t+")").addClass("active"))},W=function(){1==x()?(o.controls.prev.addClass("disabled"),o.controls.next.addClass("disabled")):!o.settings.infiniteLoop&&o.settings.hideControlOnEnd&&(0==o.active.index?(o.controls.prev.addClass("disabled"),o.controls.next.removeClass("disabled")):o.active.index==x()-1?(o.controls.next.addClass("disabled"),o.controls.prev.removeClass("disabled")):(o.controls.prev.removeClass("disabled"),o.controls.next.removeClass("disabled")))},H=function(){o.settings.autoDelay>0?setTimeout(r.startAuto,o.settings.autoDelay):r.startAuto(),o.settings.autoHover&&r.hover(function(){o.interval&&(r.stopAuto(!0),o.autoPaused=!0)},function(){o.autoPaused&&(r.startAuto(!0),o.autoPaused=null)})},L=function(){var e=0;if("next"==o.settings.autoDirection)r.append(o.children.clone().addClass("bx-clone"));else{r.prepend(o.children.clone().addClass("bx-clone"));var i=o.children.first().position();e="horizontal"==o.settings.mode?-i.left:-i.top}b(e,"reset",0),o.settings.pager=!1,o.settings.controls=!1,o.settings.autoControls=!1,o.settings.tickerHover&&!o.usingCSS&&o.viewport.hover(function(){r.stop()},function(){var e=0;o.children.each(function(){e+="horizontal"==o.settings.mode?t(this).outerWidth(!0):t(this).outerHeight(!0)});var i=o.settings.speed/e,s="horizontal"==o.settings.mode?"left":"top",n=i*(e-Math.abs(parseInt(r.css(s))));N(n)}),N()},N=function(t){speed=t?t:o.settings.speed;var e={left:0,top:0},i={left:0,top:0};"next"==o.settings.autoDirection?e=r.find(".bx-clone").first().position():i=o.children.first().position();var s="horizontal"==o.settings.mode?-e.left:-e.top,n="horizontal"==o.settings.mode?-i.left:-i.top,a={resetValue:n};b(s,"ticker",speed,a)},O=function(){o.touch={start:{x:0,y:0},end:{x:0,y:0}},o.viewport.bind("touchstart",X)},X=function(t){if(o.working)t.preventDefault();else{o.touch.originalPos=r.position();var e=t.originalEvent;o.touch.start.x=e.changedTouches[0].pageX,o.touch.start.y=e.changedTouches[0].pageY,o.viewport.bind("touchmove",Y),o.viewport.bind("touchend",V)}},Y=function(t){var e=t.originalEvent,i=Math.abs(e.changedTouches[0].pageX-o.touch.start.x),s=Math.abs(e.changedTouches[0].pageY-o.touch.start.y);if(3*i>s&&o.settings.preventDefaultSwipeX?t.preventDefault():3*s>i&&o.settings.preventDefaultSwipeY&&t.preventDefault(),"fade"!=o.settings.mode&&o.settings.oneToOneTouch){var n=0;if("horizontal"==o.settings.mode){var r=e.changedTouches[0].pageX-o.touch.start.x;n=o.touch.originalPos.left+r}else{var r=e.changedTouches[0].pageY-o.touch.start.y;n=o.touch.originalPos.top+r}b(n,"reset",0)}},V=function(t){o.viewport.unbind("touchmove",Y);var e=t.originalEvent,i=0;if(o.touch.end.x=e.changedTouches[0].pageX,o.touch.end.y=e.changedTouches[0].pageY,"fade"==o.settings.mode){var s=Math.abs(o.touch.start.x-o.touch.end.x);s>=o.settings.swipeThreshold&&(o.touch.start.x>o.touch.end.x?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto())}else{var s=0;"horizontal"==o.settings.mode?(s=o.touch.end.x-o.touch.start.x,i=o.touch.originalPos.left):(s=o.touch.end.y-o.touch.start.y,i=o.touch.originalPos.top),!o.settings.infiniteLoop&&(0==o.active.index&&s>0||o.active.last&&0>s)?b(i,"reset",200):Math.abs(s)>=o.settings.swipeThreshold?(0>s?r.goToNextSlide():r.goToPrevSlide(),r.stopAuto()):b(i,"reset",200)}o.viewport.unbind("touchend",V)},Z=function(){var e=t(window).width(),i=t(window).height();(a!=e||l!=i)&&(a=e,l=i,r.redrawSlider(),o.settings.onSliderResize.call(r,o.active.index))};return r.goToSlide=function(e,i){if(!o.working&&o.active.index!=e)if(o.working=!0,o.oldIndex=o.active.index,o.active.index=0>e?x()-1:e>=x()?0:e,o.settings.onSlideBefore(o.children.eq(o.active.index),o.oldIndex,o.active.index),"next"==i?o.settings.onSlideNext(o.children.eq(o.active.index),o.oldIndex,o.active.index):"prev"==i&&o.settings.onSlidePrev(o.children.eq(o.active.index),o.oldIndex,o.active.index),o.active.last=o.active.index>=x()-1,o.settings.pager&&q(o.active.index),o.settings.controls&&W(),"fade"==o.settings.mode)o.settings.adaptiveHeight&&o.viewport.height()!=v()&&o.viewport.animate({height:v()},o.settings.adaptiveHeightSpeed),o.children.filter(":visible").fadeOut(o.settings.speed).css({zIndex:0}),o.children.eq(o.active.index).css("zIndex",o.settings.slideZIndex+1).fadeIn(o.settings.speed,function(){t(this).css("zIndex",o.settings.slideZIndex),D()});else{o.settings.adaptiveHeight&&o.viewport.height()!=v()&&o.viewport.animate({height:v()},o.settings.adaptiveHeightSpeed);var s=0,n={left:0,top:0};if(!o.settings.infiniteLoop&&o.carousel&&o.active.last)if("horizontal"==o.settings.mode){var a=o.children.eq(o.children.length-1);n=a.position(),s=o.viewport.width()-a.outerWidth()}else{var l=o.children.length-o.settings.minSlides;n=o.children.eq(l).position()}else if(o.carousel&&o.active.last&&"prev"==i){var d=1==o.settings.moveSlides?o.settings.maxSlides-m():(x()-1)*m()-(o.children.length-o.settings.maxSlides),a=r.children(".bx-clone").eq(d);n=a.position()}else if("next"==i&&0==o.active.index)n=r.find("> .bx-clone").eq(o.settings.maxSlides).position(),o.active.last=!1;else if(e>=0){var c=e*m();n=o.children.eq(c).position()}if("undefined"!=typeof n){var g="horizontal"==o.settings.mode?-(n.left-s):-n.top;b(g,"slide",o.settings.speed)}}},r.goToNextSlide=function(){if(o.settings.infiniteLoop||!o.active.last){var t=parseInt(o.active.index)+1;r.goToSlide(t,"next")}},r.goToPrevSlide=function(){if(o.settings.infiniteLoop||0!=o.active.index){var t=parseInt(o.active.index)-1;r.goToSlide(t,"prev")}},r.startAuto=function(t){o.interval||(o.interval=setInterval(function(){"next"==o.settings.autoDirection?r.goToNextSlide():r.goToPrevSlide()},o.settings.pause),o.settings.autoControls&&1!=t&&A("stop"))},r.stopAuto=function(t){o.interval&&(clearInterval(o.interval),o.interval=null,o.settings.autoControls&&1!=t&&A("start"))},r.getCurrentSlide=function(){return o.active.index},r.getCurrentSlideElement=function(){return o.children.eq(o.active.index)},r.getSlideCount=function(){return o.children.length},r.redrawSlider=function(){o.children.add(r.find(".bx-clone")).outerWidth(u()),o.viewport.css("height",v()),o.settings.ticker||S(),o.active.last&&(o.active.index=x()-1),o.active.index>=x()&&(o.active.last=!0),o.settings.pager&&!o.settings.pagerCustom&&(w(),q(o.active.index))},r.destroySlider=function(){o.initialized&&(o.initialized=!1,t(".bx-clone",this).remove(),o.children.each(function(){void 0!=t(this).data("origStyle")?t(this).attr("style",t(this).data("origStyle")):t(this).removeAttr("style")}),void 0!=t(this).data("origStyle")?this.attr("style",t(this).data("origStyle")):t(this).removeAttr("style"),t(this).unwrap().unwrap(),o.controls.el&&o.controls.el.remove(),o.controls.next&&o.controls.next.remove(),o.controls.prev&&o.controls.prev.remove(),o.pagerEl&&o.settings.controls&&o.pagerEl.remove(),t(".bx-caption",this).remove(),o.controls.autoEl&&o.controls.autoEl.remove(),clearInterval(o.interval),o.settings.responsive&&t(window).unbind("resize",Z))},r.reloadSlider=function(t){void 0!=t&&(n=t),r.destroySlider(),d()},d(),this}}(jQuery);

////////////////////////////////////////////////////////////////////////////////////////////
/// end of jquery.bxslider.min.js
////////////////////////////////////////////////////////////////////////////////////////////
}
$(function(){
  FRONTMOCK = FRONTMOCK || {};
  FRONTMOCK.components = FRONTMOCK.components || {};
  FRONTMOCK.components.showFirstStepGuide = function(options) {
    $(document.body).firstStepGuide(options).firstStepGuide('show');
  }
});
(function($) {
  var TEMPLATE = '' +
      '<div class="modal-dialog">' +
        '<div class="modal-content">' +
            '<div class="modal-header">' +
                '<button type="button" class="close" data-dismiss="modal" aria-hidden="true">×</button>' +
                '<h4 class="modal-title"></h4>' +
            '</div>' +
            '<div class="modal-body" style="height:817px;">' + //reduce bxSlider rendering's size changeing
                '<div class="pxs_bg">' +
                  '<div class="pxs_bg1 iAmBackgroundImg" style="opacity: 1;"></div>' +
                  '<div class="pxs_bg2 iAmBackgroundImg" style="opacity: 0;"></div>' +
                  '<div class="pxs_bg3 iAmBackgroundImg" style="opacity: 0;"></div>' +
                '</div>' +
                '<ul class="bxslider">' +
                '{{#steps}}' +
                  '<li>' +
                    '<div class="tour-step space-in-l-left">' +
                      '<h3 class="tour-title-0">{{title}}</h3>' +
                      '<p  class="space-in-l-top space-in-l-bottom font-size-l tour-description-0">' +
                        '{{line1}}<br>' +
                        '{{line2}}<br>' +
                        '{{line3}}' +
                      '</p>' +
                    '</div>' +
                    '<img src="{{img}}" height="600"/>' +
                  '</li>' +
                  '{{/steps}}' +
                '</ul>' +
              '<div>' +         
            '</div>' +
            '<div class="modal-footer" style="margin:1px;">' + //escape from browser's bug(remain 1px)
                '<button type="button" class="btn btn-default" data-dismiss="modal">{{startButtonCaption}}</button>' +
            '</div>' +
        '</div>' +
      '</div>' +
    '</div>';


  $.widget('wap.firstStepGuide', $.wap.abstractWidget, {

    options : {
      startButtonCaption:'ツアーを終了して、ダッシュボードを確認する',
      steps:[
            {
              title : '粗利益を確認しましょう',
              line1:'あなたの事業部の損益に関係するあらゆる情報が集まってきます。',
              line2:'事業部の予算達成状況、プロジェクトの状況、チームの工数、営業案件状況。',
              line3:'画面を開いたら、まずはじめに損益のハイライトから必要な情報を把握することができます。',
              img:'images/tour/tour_01.jpg'
            },
            {
              title : 'プロジェクト一覧を確認しましょう',
              line1:'次はプロジェクト一覧を確認してみましょう。',
              line2:'「プロジェクト一覧」は、進行中プロジェクトを確認する作業を効率化します。',
              line3:'粗利率や契約形態によってフィルタされたリストから確認すべきプロジェクトをピックアップできます。',
              img:'images/tour/tour_02.jpg'
            },
            {
              title : '個別のプロジェクトを確認してPMに連絡しましょう',
              line1:'個別プロジェクトの詳細を確認するには、数値はもちろん、プロジェクトや人の情報まで辿ることができます。',
              line2:'プロジェクトは次々と確認してくことが可能です。',
              img:'images/tour/tour_03.jpg'
            }
          ]
    },

    _create : function() {
      var self = this;
      this._super();

      this.guideRoot = $('<div class="modal fade first-step-guide"></div>')
      var compiled = Hogan.compile(TEMPLATE);//HOGANがこのタイミングまで参照できないケースがあるので、ここでコンパイル。
      this.guideRoot.html(compiled.render({steps:this.options.steps, startButtonCaption:this.options.startButtonCaption}));

      var theLastIndex = this.options.steps.length - 1;

      $(document.body).append(this.guideRoot);

      var bg_image_count = this.guideRoot.find('.pxs_bg > .iAmBackgroundImg').length;
      this.slider = this.guideRoot.find('.bxslider').bxSlider({
        useCSS: false,
        infiniteLoop: false,
        hideControlOnEnd: true,
        easing: 'easeInQuad',
        nextText:"",
        prevText:"",
        speed: 500,//1000,
        onSlideBefore: function($slideElement, oldIndex, newIndex) {
          $('.bxslider li').stop(true).animate({opacity:0.2},350,'easeOutQuad');
          if (newIndex%bg_image_count == oldIndex%bg_image_count) return;
          self.guideRoot.find('.pxs_bg' + (newIndex%bg_image_count + 1)).stop(true).animate({opacity:1},350,'easeOutQuad');
          self.guideRoot.find('.pxs_bg' + (oldIndex%bg_image_count + 1)).stop(true).animate({opacity:0},350,'easeOutQuad');
        },
        onSlideAfter: function($slideElement, oldIndex, newIndex) {
          $('.bxslider li').stop(true).animate({opacity:1},500,'easeOutQuad');
          if( newIndex == theLastIndex){
            self.guideRoot.find('.modal-footer .btn').addClass("btn-primary");
          }else{
            self.guideRoot.find('.modal-footer .btn').removeClass("btn-primary");
          }
        }
      });
    },

    show: function() {
      this.guideRoot.modal('show');
      setTimeout((function(){
        this.slider.redrawSlider();
      }).bind(this), 200);
    },

    _destroy : function() {
      this.guideRoot.remove();
    }

  });



})(jQuery);


      
/**
 * wap.gallery
 * 
 * @author nishiyama-k
 * @since 2014/05/14
 */
(function($) {
  $
      .widget(
          'wap.gallery',
          $.wap.abstractWidget,
          {

            options : {
              colModel : [],// json
              viewMode : 'modal',// modal, tab, embed
              checkOptions : {
                isUseCheck : false,
                isOnlyOneCheck : false,
                isUseFilterHeader : false,
                initCheckMode : 'view'// view or check
              },
              isUseDeleteBtn : false,
              categoryFilter : {// filter target json column and display name
                colName : null,
                dispName : null
              },
              fullTextSearchInputTagId : null,
              carouselOptions : null,
              onImgClick : null,
              onNonImgClick : null
            },

            _isUseCategoryFilter : false,

            _$thumbBase : null,

            _thumbObjectMap : null,// [id, thumbnail($node, jsonData, viewSrc)]

            _viewAreaIdForEmbed : null,

            _checkMode : null,
            CHECK_MODE : {
              VIEW : 'view',
              CHECK : 'check'
            },

            VIEW_MODE : {
              MODAL : 'modal',
              TAB : 'tab',
              EMBED : 'embed'
            },

            _fullTextSearchObj : {
              searchedWord : null,
              searchedResult : null
            },
            _carouselOptions : {
              horizontal : 1,
              itemNav : 'forceCentered',
              smart : 1,
              activateMiddle : 1,
              activateOn : 'click',
              mouseDragging : 1,
              touchDragging : 1,
              releaseSwing : 1,
              startAt : 3,
              scrollBy : 1,
              speed : 300,
              elasticBounds : 1,
              easing : 'swing',
              dragHandle : 1,
              dynamicHandle : 1,
              clickBar : 1,
              activatePageOn : 'click',

              scrollBar : null,
              pagesBar : null,

              prev : null,
              next : null,
              prevPage : null,
              nextPage : null
            },
            _editableOptArr : [
              "scrollBar", "pagesBar", "prev", "next", "startAt", "activeClass", "horizontal"
            ],

            _create : function() {
              this._super();
              this._$thumbBase = $(this.element).find('.wapBaseThumb');
              this._setInitValue();
              this._thumbObjectMap = this._createThumbObjectMap();
              this._createGalleryHeader();
              this._createThumbHeader();
              this._setEmbedViewAreaId();
              this._setDataColumn();
              this._setCheckedOnThumb();
              this._hideBaseThumb();
              this._displayThumbnail();
              this._createViewerBeforeNextBtn();
              this._setEvent();
              this._setInitCheckModeBtn();
              this._setFirstEmbed();
              this._activateCarousel();
              return this;
            },

            _setInitValue : function() {
              this._checkMode = this.CHECK_MODE.VIEW;
              if (this.options.checkOptions.initCheckMode === this.CHECK_MODE.CHECK) {
                this._checkMode = this.CHECK_MODE.CHECK;
              }

              if (this.options.categoryFilter.colName) {
                this._isUseCategoryFilter = true;
              }
              var that = this;
              if (!this.options.onImgClick) {
                this.options.onImgClick = function(thumbnail) {
                  that._showFileViewer(thumbnail);
                };
              }
            },

            _createThumbObjectMap : function() {
              var map = [];
              var that = this;
              $.each(this.options.colModel, function() {
                var json = this;
                var $clone = null;
                $.each($(that._$thumbBase), function() {
                  if ($(this).data().baseThumb === json.baseThumb) {
                    $clone = $(this).clone(false);
                    return false;// break
                  }
                });
                if (!$clone) {
                  console.log('Wrong baseThumb:' + this.baseThumb);
                  return true;// continue
                }

                $clone.attr('value', json.id);

                var obj = getThumbnailObj(json, $clone);
                map.push({
                  id : json.id,
                  thumbnail : obj
                });
              });
              return map;

              function getThumbnailObj(json, node) {
                return {
                  jsonData : json,
                  $node : node,
                  viewSrc : json.viewPath ? json.viewPath : json.imgPath
                };
              }
            },

            _createThumbHeader : function() {
              var opt = this.options;
              var that = this;
              $.each(this._thumbObjectMap, function() {
                var $header = this.thumbnail.$node.find('header.image-header');
                var $options = $('<div/>').addClass('image-options');
                if (opt.isUseDeleteBtn) {
                  var $del = $('<a/>').addClass('delete');
                  var $i = $('<i/>').addClass('wap-icon-close');
                  $options.append($del.append($i));
                }
                var isUseCheckFilter = (opt.checkOptions.isUseCheck);
                if (isUseCheckFilter) {
                  var $span = $('<span/>').addClass('overCheckedOff');
                  $header.append($span);
                  var $check = $('<a/>').addClass('zoom-in');
                  var $i = $('<i/>').addClass('wap-icon-zoom-in');
                  var thumbnail = this.thumbnail;
                  $check.on('click', function() {
                    that._showFileViewer(thumbnail);
                  });
                  if (that.options.checkOptions.initCheckMode === that.CHECK_MODE.VIEW) {
                    $check.hide();
                  }
                  $options.append($check.append($i));
                }
                if (opt.isUseDeleteBtn || isUseCheckFilter) {
                  $header.append($options);
                }

                this.thumbnail.$node.find('header a img').attr('src', this.thumbnail.jsonData.imgPath);

              });
            },

            _setDataColumn : function() {
              $.each(this._thumbObjectMap, function() {
                var json = this.thumbnail.jsonData;
                this.thumbnail.$node.find('[data-id]').attr('data-id', json.id);

                $.each(this.thumbnail.$node.find('[data-column]'), function() {
                  var content = json[$(this).attr('data-column')];
                  if (content) {
                    $(this).html(content);
                  } else {
                    console.log('json data does not have [' + $(this).attr('data-column') + ']');
                  }
                });
              });
            },

            _setCheckedOnThumb : function() {
              if (!this.options.checkOptions.isUseCheck) {
                return;
              }
              var checked = false;
              var isOnlyOne = this.options.checkOptions.isOnlyOneCheck;
              $.each(this._thumbObjectMap, function() {
                if (this.thumbnail.jsonData.checked === 'true') {
                  if (checked && isOnlyOne) {// 1つしかチェックしない設定なのに、jsonから複数個checkが来た
                    console.log('enableCheckCount exceeded in init');
                  } else {
                    this.thumbnail.$node.find('header span.overCheckedOff').removeClass('overCheckedOff').addClass(
                        'overCheckedOn');
                    checked = true;
                  }
                }
              });
            },

            _setEvent : function() {
              var that = this;
              $.each(this._thumbObjectMap, function() {
                var $node = this.thumbnail.$node;
                var thumbnail = this.thumbnail;
                $node.find('header img').on('click', function() {
                  that._imageClick(thumbnail, event);
                });

                if (that.options.isUseDeleteBtn) {
                  $node.find('header div.image-options a.delete').on('click', function() {
                    that._deleteThumbnail(thumbnail, event);
                  });
                }
                if (that.options.onNonImgClick) {
                  $node.on('click', function() {
                    that.options.onNonImgClick(thumbnail);
                  });
                }
              });
              if (this.options.checkOptions.isUseCheck) {
                this.element.find('div.gallery-header .make-switch.switch-large.has-switch').on('click', function() {
                  if ($(this).find('.switch-off').length == 1) {
                    $(this).find('.switch-off').removeClass('switch-off').addClass('switch-on');
                    that._checkMode = that.CHECK_MODE.CHECK;
                    $(that.element).find('.zoom-in').show();
                  } else {
                    $(this).find('.switch-on').removeClass('switch-on').addClass('switch-off');
                    that._checkMode = that.CHECK_MODE.VIEW;
                    $(that.element).find('.zoom-in').hide();
                  }
                });
              }
            },

            _hideBaseThumb : function() {
              this._$thumbBase.hide();
            },

            _displayThumbnail : function() {
              if (this.options.carouselOptions) {
                return;
              }
              var $thumbnails = $();
              $.each(this._thumbObjectMap, function() {
                $thumbnails = $thumbnails.add(this.thumbnail.$node);
              });
              $(this.element).find('.wap-gallery-area').append($thumbnails);
            },

            _imageClick : function(thumbnail, event) {
              event.preventDefault();
              if (this.options.checkOptions.isUseCheck && (event.ctrlKey || this._checkMode === this.CHECK_MODE.CHECK)) {
                this._changeCheck(thumbnail);
              } else {
                this.options.onImgClick(thumbnail);
              }
            },

            _changeCheck : function(thumbnail) {
              if (thumbnail.$node.find('.overCheckedOn').length != 0) {
                var node = thumbnail.$node.find('.overCheckedOn');
                node.removeClass('overCheckedOn');
                node.addClass('overCheckedOff');
                return;
              }
              if (thumbnail.$node.find('.overCheckedOff').length != 0) {
                if (this.options.checkOptions.isOnlyOneCheck) {
                  this.setAllCheck(false);
                }
                var node = thumbnail.$node.find('.overCheckedOff');
                node.removeClass('overCheckedOff');
                node.addClass('overCheckedOn');
                return;
              }
            },

            _showFileViewer : function(thumbnail) {
              var json = thumbnail.jsonData;
              switch (this.options.viewMode) {
              case this.VIEW_MODE.MODAL:
                fileViewer(thumbnail.viewSrc);
                break;
              case this.VIEW_MODE.TAB:
                fileViewerTab(thumbnail.viewSrc);
                break;
              case this.VIEW_MODE.EMBED:
                var $viewArea = $(this.element).find('.wap-gallery-view-area');
                $viewArea.data('json-id', json.id);
                $.each($viewArea.find('[data-column]'), function() {
                  var $innerHTML = json[$(this).attr('data-column')];
                  if ($innerHTML) {
                    $(this).html($innerHTML);
                  } else {
                    console.log('json data does not have [' + $(this).attr('data-column') + ']');
                  }
                });
                $viewArea.find('[data-id]').attr('data-id', json.id);
                this._setEmbedCntArea(thumbnail);
                fileViewerEmbed(thumbnail.viewSrc, this._viewAreaIdForEmbed, 'auto', '30%');
                break;
              default:
                console.log('unsupported viewMode:' + this.options.viewMode);
              }
            },

            _setEmbedCntArea : function(thumbnail) {
              var cntObj = this._getShowedAndCurrentThumbMapCnt(thumbnail.jsonData);
              $(this.element).find('.wap-gallery-view-area div.before-after-area span').html(
                  cntObj.currentCnt + '/' + cntObj.showedCnt);
            },

            _deleteThumbnail : function(thumbnail, event) {
              event.preventDefault();
              var $node = thumbnail.$node;

              var t = new TimelineLite({
                onComplete : function() {
                  $node.slideUp(function() {
                    $node.remove();
                  });
                }
              });
              $node.addClass('no-animation');
              t.append(TweenMax.to($node, .05, {
                css : {
                  scale : 0.95
                }
              }));
              t.append(TweenMax.to($node, .5, {
                css : {
                  autoAlpha : 0,
                  transform : "translateX(100px) scale(.95)"
                }
              }));
            },

            _setEmbedViewAreaId : function() {
              if (this.options.viewMode == this.VIEW_MODE.EMBED) {
                var $viewArea = this.element.find('.file-view-area');
                var id = 'wapGalleryEmbedArea' + makeRandom(10);
                if ($viewArea.attr('id')) {
                  id = $viewArea.attr('id');
                } else {
                  $viewArea.attr('id', id);
                }
                this._viewAreaIdForEmbed = id;
              }

              function makeRandom(n) {
                var a = 'abcdefghijklmnopqrstuvwxyz' + 'ABCDEFGHIJKLMNOPQRSTUVWXYZ' + '0123456789';
                a = a.split('');
                var s = '';
                for (var i = 0; i < n; i++) {
                  s += a[Math.floor(Math.random() * a.length)];
                }
                return s;
              }
            },

            _setInitCheckModeBtn : function() {
              if (this.options.checkOptions.initCheckMode === this.CHECK_MODE.CHECK) {
                if (this.options.checkOptions.isUseFilterHeader) {
                  $(this.element).find('div.gallery-header div.switch-off').removeClass('switch-off').addClass(
                      'switch-on');
                }
              }
            },

            _setFirstEmbed : function() {
              if (this.options.viewMode == this.VIEW_MODE.EMBED) {
                this._showFileViewer(this._thumbObjectMap[0].thumbnail);
              }
            },

            _destory : function() {
              this.contentElement.remove();
            },

            _createGalleryHeader : function() {
              var $headerArea = $(this.element).find('.gallery-header');
              $filterArea = createFilterArea(this);
              $headerArea.append($filterArea);
              return;

              function createFilterArea(gallery) {
                var isUseCategoryFilter = gallery._isUseCategoryFilter;
                var isUseCheckFiler = (gallery.options.checkOptions.isUseCheck && gallery.options.checkOptions.isUseFilterHeader);
                if (!isUseCategoryFilter && !isUseCheckFiler) {
                  return null;
                }

                $area = $('<div />').addClass('filterArea');
                $area.append('<hr/>');

                if (isUseCategoryFilter) {
                  $area.append($('<span />').html(gallery.options.categoryFilter.dispName + "： &emsp;"));
                  $area.append($('<a />').addClass('active').html('すべて').attr('data-category-filter', 'all'));
                  var contents = getCategoryFilter(gallery.options.colModel, gallery.options.categoryFilter.colName);
                  $.each(contents, function() {
                    $area.append('&emsp;/&emsp;').append($('<a />').attr('data-category-filter', this).html(this));
                  });
                  $area.find('[data-category-filter]').on('click', function(event) {
                    gallery._categoryFilter(event);
                  });
                }

                if (isUseCheckFiler) {
                  if (isUseCategoryFilter) {
                    $area.append($('<br>')).append($('<br>'));
                  }
                  $area.append($('<span />').html('選択：&emsp;'));
                  $area.append($('<a />').addClass('active').html('すべて').attr('data-check-filter', 'all'));
                  $area.append('&emsp;/&emsp;').append(
                      $('<a />').attr('data-check-filter', 'overCheckedOn').html('チェック済み'));
                  $area.append('&emsp;/&emsp;').append(
                      $('<a />').attr('data-check-filter', 'overCheckedOff').html('未チェック'));
                  $area.append('&emsp;&emsp;&emsp;選択モード ').append(createCheckModeBtnNode(gallery));

                  $area.find('[data-check-filter]').on('click', function(event) {
                    gallery._checkFilter(event);
                  });
                }
                $area.append('<hr/>');
                return $area;
              }

              function getCategoryFilter(json, colName) {
                var filterAry = new Array();
                $.each(json, function() {
                  if (!checkDuplicate(filterAry, this[colName])) {
                    filterAry.push(this[colName]);
                  }
                });
                return filterAry;

                function checkDuplicate(array, data) {
                  for (var i = 0; i < array.length; i++) {
                    if (data == array[i]) {
                      return true;
                    }
                  }
                  return false;
                }
              }

              function createCheckModeBtnNode(gallery) {
                var $div = $('<div/>').addClass('make-switch switch-large has-switch').attr('data-animated', 'false');
                var $switch = $('<div/>').addClass('switch-off');
                var $input = $('<input/>').attr('type', 'checkbox');
                var $spanOn = $('<span/>').addClass('switch-left switch-small').html('ON');
                var $label = $('<label/>').addClass('switch-small').html('&nbsp;');
                var $spanOff = $('<span/>').addClass('switch-right switch-small').html('OFF');
                $switch.append($input).append($spanOn).append($label).append($spanOff);
                // キレイにポップオーバーできないので、コメントアウト
                // $div.popover({
                // content : '選択モードがOFFでも、\n画像を[Ctrl]+クリックで選択できます。',
                // placement : 'auto right',
                // trigger : 'hover',
                // delay : {
                // show : 1000,
                // hide : 0
                // }
                // });
                return $div.append($switch);
              }
            },

            _categoryFilter : function(ev) {
              $.each($('div .gallery-header [data-category-filter]'), function() {
                $(this).removeClass('active');
              });
              $(ev.target).addClass('active');
              if (this.options.fullTextSearchInputTagId) {
                this._searchFullText(false, null);
              } else {
                this._filter();
              }
            },

            _checkFilter : function(ev) {
              $.each($('div .gallery-header [data-check-filter]'), function() {
                $(this).removeClass('active');
              });
              $(ev.target).addClass('active');
              if (this.options.fullTextSearchInputTagId) {
                this._searchFullText(false, null);
              } else {
                this._filter();
              }
            },

            _searchFullText : function(isFromFullText, searchResult) {
              if (!this.options.fullTextSearchInputTagId) {
                throw new Error('FullTextSearchInputTagId of options is not set');
              }
              var $input = $('#' + this.options.fullTextSearchInputTagId);
              if (!$input || $input.length != 1) {
                throw new Error('Wrong fullTextSearchInputTagId of options  id:'
                    + this.options.fullTextSearchInputTagId);
              }

              if (isFromFullText) {
                if ($input.val().length == 0) {
                  this._filter();
                  return;
                }
                var fullTextSearchObj = {
                  "ids" : searchResult.ids
                };
                this._fullTextSearchObj.searchedWord = $input.val();
                this._fullTextSearchObj.searchedResult = fullTextSearchObj;
                this._filter(fullTextSearchObj);

              } else {// category filter and check filter
                // 前回の検索条件が変わっていないなら保持してフィルターを行う
                if (this._fullTextSearchObj.searchedWord == $input.val() && $input.val().length != 0) {
                  this._filter(this._fullTextSearchObj.searchedResult);
                } else {
                  this._filter();
                }
              }
              return this;
            },

            _filter : function(fullTextSearchObj) {
              var categoryFilter = null;
              var checkFilter = null;
              if (this._isUseCategoryFilter) {
                categoryFilter = $('div .gallery-header [data-category-filter].active').data().categoryFilter;
              }
              if (this.options.checkOptions.isUseCheck) {
                checkFilter = $('div .gallery-header [data-check-filter].active').data().checkFilter;
              }
              var isFullTextSeaerch = fullTextSearchObj ? true : false;
              var that = this;
              $.each(this._thumbObjectMap, function() {
                if (that._isUseCategoryFilter && categoryFilter !== 'all') {
                  if (this.thumbnail.jsonData[that.options.categoryFilter.colName] !== categoryFilter) {
                    this.thumbnail.$node.hide();
                    return true;// continue
                  }
                }
                if (that.options.checkOptions.isUseCheck && checkFilter !== 'all') {
                  if (this.thumbnail.$node.find('.' + checkFilter).length !== 1) {
                    this.thumbnail.$node.hide();
                    return true;// continue
                  }
                }
                if (isFullTextSeaerch) {
                  var id = this.id;
                  var isHit = false;

                  for (var i = 0, length = fullTextSearchObj.ids.length; i < length; i++) {
                    if (id == fullTextSearchObj.ids[i]) {
                      isHit = true;
                      break;
                    }
                  }
                  if (!isHit) {
                    this.thumbnail.$node.hide();
                    return true;// continue
                  }
                }
                this.thumbnail.$node.show();
              });

              // embedの場合は、件数を書き換える
              if (this.options.viewMode === this.VIEW_MODE.EMBED) {
                var $viewArea = $(this.element).find('.wap-gallery-view-area');
                var currentJsonId = $viewArea.data('json-id');
                this._setEmbedCntArea(this._getThumbnail(currentJsonId));
              }
            },

            _getThumbnail : function(id) {
              for (var i = 0, length = this._thumbObjectMap.length; i < length; i++) {
                if (this._thumbObjectMap[i].id == id) {
                  return this._thumbObjectMap[i].thumbnail;
                }
              }
              return null;
            },

            _createViewerBeforeNextBtn : function() {
              if (this.options.viewMode === this.VIEW_MODE.EMBED) {
                if (this._thumbObjectMap.length == 1) {
                  return;
                }
                var $viewArea = $(this.element).find('#' + this._viewAreaIdForEmbed);
                var $div = $('<div/>').addClass('before-after-area');
                var $before = $('<a/>').addClass('wap-icon-angle-left').attr('data-which', 'before');
                var $page = $('<span/>').addClass('view-area-cnt');
                var $after = $('<a/>').addClass('wap-icon-angle-right').attr('data-which', 'after');
                $div.append($before).append($page).append($after);
                $viewArea.before($div);
                var that = this;
                $div.find('a').on('click', function() {
                  that._clickEmbedBeforeNext(event);
                });
                this._setEmbedCntArea(this._thumbObjectMap[0].thumbnail);
              }
            },

            _clickEmbedBeforeNext : function(event) {
              var $viewArea = $(this.element).find('.wap-gallery-view-area');
              var which = $(event.target).data('which');
              var currentJsonId = $viewArea.data('json-id');
              var nextThumbnail = null;
              if (which == 'after') {
                nextThumbnail = findAfterThumbnail(currentJsonId, this);
              } else {
                nextThumbnail = findBeforeThumbnail(currentJsonId, this);
              }
              this._showFileViewer(nextThumbnail);
              return;

              function findAfterThumbnail(currentId, gallery) {
                var nextThumbnail = null;
                var isCurrent = false;
                $.each(gallery._thumbObjectMap, function() {
                  if (this.thumbnail.$node.css('display') == 'block') {
                    if (isCurrent) {
                      nextThumbnail = this.thumbnail;
                      return false;
                    }
                    if (this.id === currentId) {
                      isCurrent = true;
                    }
                  }
                });
                if (!nextThumbnail && isCurrent) {// 最後のページまでにはないケースは頭からまた検索
                  $.each(gallery._thumbObjectMap, function() {
                    if (this.thumbnail.$node.css('display') == 'block') {
                      nextThumbnail = this.thumbnail;
                      return false;
                    }
                  });
                }
                if (!nextThumbnail) {// 先頭固定
                  $.each(gallery._thumbObjectMap, function() {
                    if (this.thumbnail.$node.css('display') == 'block') {
                      nextThumbnail = this.thumbnail;
                      return false;
                    }
                  });
                }
                return nextThumbnail;
              }

              function findBeforeThumbnail(currentId, gallery) {
                var nextThumbnail = null;
                var isCurrent = false;
                for (var i = gallery._thumbObjectMap.length - 1; i >= 0; i--) {
                  if (gallery._thumbObjectMap[i].thumbnail.$node.css('display') == 'block') {

                    if (isCurrent) {
                      nextThumbnail = gallery._thumbObjectMap[i].thumbnail;
                      break;
                    }
                    if (gallery._thumbObjectMap[i].id === currentId) {
                      isCurrent = true;
                    }
                  }
                }
                // 先頭のページまでにはないケースは後ろからまた検索
                if (!nextThumbnail && isCurrent) {
                  for (var i = gallery._thumbObjectMap.length - 1; i >= 0; i--) {
                    if (gallery._thumbObjectMap[i].thumbnail.$node.css('display') == 'block') {
                      nextThumbnail = gallery._thumbObjectMap[i].thumbnail;
                      break;
                    }
                  }
                }
                if (!nextThumbnail) {// 表示中の最後固定
                  $.each(gallery._thumbObjectMap, function() {
                    if (this.thumbnail.$node.css('display') == 'block') {
                      nextThumbnail = this.thumbnail;
                    }
                  });
                }
                return nextThumbnail;
              }
            },

            _getShowedAndCurrentThumbMapCnt : function(json) {
              var showedCnt = Number(0);
              var currentCnt = Number(0);
              $.each(this._thumbObjectMap, function() {
                if (this.thumbnail.$node.css('display') == 'block') {
                  showedCnt++;
                  if (this.id === json.id) {
                    currentCnt = showedCnt;
                  }
                }
              });
              return {
                showedCnt : showedCnt,
                currentCnt : currentCnt
              };
            },

            // /////////////public///////////////////

            hideThumbnail : function(ids) {
              if (!ids) {
                throw new Error("ids:" + ids + ' is not defined');
              }
              if (!Array.isArray(ids)) {
                ids = [
                  ids
                ];
              }
              var that = this;
              $.each(ids, function() {
                var thumbnail = that._getThumbnail(this);
                if (!thumbnail) {
                  console.log("id:" + this + ' is not exist in this gallery');
                }
                if (thumbnail.$node.css('display') != 'block') {
                  console.log('Already hided id:' + this);
                }
                thumbnail.$node.hide();
              });
              return this;
            },

            hideAllThumbnail : function() {
              $.each(this._thumbObjectMap, function() {
                this.thumbnail.$node.hide();
              });
              return this;
            },

            showAllThumbnail : function() {
              $.each(this._thumbObjectMap, function() {
                this.thumbnail.$node.show();
              });
              return this;
            },

            showThumbnail : function(ids) {
              if (!ids) {
                throw new Error("ids:" + ids + ' is not defined');
              }
              if (!Array.isArray(ids)) {
                ids = [
                  ids
                ];
              }
              var that = this;
              $.each(ids, function() {
                var thumbnail = that._getThumbnail(this);
                if (!thumbnail) {
                  console.log("id:" + this + ' is not exist in this gallery');
                }
                if (thumbnail.$node.css('display') == 'block') {
                  console.log('Already showed id:' + this);
                }
                thumbnail.$node.show();
              });
              return this;
            },

            getThumbnailData : function(id) {
              if (!id) {
                throw new Error("id:" + id + ' is not defined');
              }
              var thumbnail = this._getThumbnail(id);
              if (!thumbnail) {
                throw new Error("id:" + id + ' is not exist in this gallery');
              }
              return thumbnail;
            },

            getAllJsonData : function() {
              var returnArray = new Array();
              $.each(this._thumbObjectMap, function() {
                returnArray.push(this.thumbnail.jsonData);
              });
              return returnArray;
            },

            getCheckedJsonData : function() {
              if (!this.options.checkOptions.isUseCheck) {
                console.log('This gallery option [checkOptions.isUseCheck] is false.');
                return;
              }
              var returnArray = new Array();
              $.each(this._thumbObjectMap, function() {
                if (this.thumbnail.$node.find('.overCheckedOn').length === 1) {
                  returnArray.push(this.thumbnail.jsonData);
                }
              });
              return returnArray;
            },

            setAllCheck : function(checked) {
              if (!this.options.checkOptions.isUseCheck) {
                console.log('This gallery option [checkOptions.isUseCheck] is false.');
                return;
              }
              $allThumbs = $(this.element).find('.overCheckedOn,.overCheckedOff');
              $allThumbs.removeClass('overCheckedOn overCheckedOff');
              if (checked) {
                $allThumbs.addClass('overCheckedOn');
              } else {
                $allThumbs.addClass('overCheckedOff');
              }
              return this;
            },

            deleteThumbnail : function(ids) {
              if (!ids) {
                throw new Error("ids:" + ids + ' is not defined');
              }
              if (!Array.isArray(ids)) {
                ids = [
                  ids
                ];
              }
              var that = this;
              $.each(ids, function() {
                var thumbnail = that._getThumbnail(this);
                if (!thumbnail) {
                  console.log("id:" + this + ' is not exist in this gallery');
                }
                that._deleteThumbnail(thumbnail, event);
              });
              return this;
            },

            changeImageAndViewPath : function(id, imagePath, viewPath) {
              if (!id) {
                throw new Error("id:" + id + ' is not defined');
              }
              var thumbnail = this._getThumbnail(id);
              thumbnail.$node.find('img').attr('src', imagePath);
              thumbnail.viewSrc = viewPath;
              return this;
            },

            changeImagePath : function(id, imagePath) {
              if (!id) {
                throw new Error("id:" + id + ' is not defined');
              }
              var thumbnail = this._getThumbnail(id);
              thumbnail.$node.find('img').attr('src', imagePath);
              return this;
            },

            changeViewPath : function(id, viewPath) {
              if (!id) {
                throw new Error("id:" + id + ' is not defined');
              }
              var thumbnail = this._getThumbnail(id);
              thumbnail.viewSrc = viewPath;
              return this;
            },

            searchFullText : function(searchResult) {
              this._searchFullText(true, searchResult);
            },

            _activateCarousel : function() {
              if (this.options["carouselOptions"]) {
                this._carouselOptions = {
                  horizontal : 1,
                  itemNav : 'forceCentered',
                  smart : 1,
                  activateMiddle : 1,
                  activateOn : 'click',
                  mouseDragging : 1,
                  touchDragging : 1,
                  releaseSwing : 1,
                  startAt : 3,
                  scrollBy : 1,
                  speed : 300,
                  elasticBounds : 1,
                  easing : 'swing',
                  dragHandle : 1,
                  dynamicHandle : 1,
                  clickBar : 1,
                  activatePageOn : 'click',

                  scrollBar : null,
                  pagesBar : null,

                  prev : null,
                  next : null,
                  prevPage : null,
                  nextPage : null
                };
                this._initCarouselOpt();
                this._bindEvents();
                // var isHorizontal = (this._carouselOptions["horizontal"] === 1);
                // this._setKeyAction(isHorizontal);
                this._setKeyAction();
                var that = this;
                setTimeout(function() {
                  that._initCarousel();
                }, 400);
              }
            },
            _initCarousel : function() {
              var carouselElm = this.element;
              carouselElm.find('li.wapBaseThumb').remove();
              carouselElm.sly(this._carouselOptions);
              $.each(this._thumbObjectMap, function() {
                carouselElm.sly('add', this.thumbnail.$node);
              });
            },

            _initCarouselOpt : function() {
              for (var i = 0; i < this._editableOptArr.length; i++) {
                this._carouselOptions[this._editableOptArr[i]] = this.options.carouselOptions[this._editableOptArr[i]];
              }
              if (this._carouselOptions["activeClass"]) {
                this._carouselOptions["activeClass"] += " active";
              }
              if (this._carouselOptions["horizontal"] === undefined) {
                this._carouselOptions["horizontal"] = 1;
              }
              if (this._carouselOptions["horizontal"] === 1) {
                this.element.addClass('frame');
              } else {
                this.element.addClass('frame-vertical');
              }
              if (this.options.carouselOptions["disp3D"]) {
                this.element.addClass('effects');
              }
            },

            _bindEvents : function() {
              this._toStart(this.options.carouselOptions.toStart);
              this._toEnd(this.options.carouselOptions.toEnd);
            },

            _toStart : function(elm) {
              if (elm) {
                var that = this;
                elm.on('click', function() {
                  var item = $(this).data('item');
                  that.element.sly('toStart', item);
                });
              }
            },

            _toEnd : function(elm) {
              if (elm) {
                var that = this;
                elm.on('click', function() {
                  var item = $(this).data('item');
                  that.element.sly('toEnd', item);
                });
              }
            },

            _setKeyAction : function() {
              var _self = this;
              this.element.hover(function() {
                $(this).addClass('activeCarouselElm');
              }, function() {
                $(this).removeClass('activeCarouselElm');
              });
              $(window).keydown(function(e) {
                var _isHorizontalMode = (_self._carouselOptions["horizontal"] === 1);
                if ($('.activeCarouselElm').length > 0) {
                  e.preventDefault();
                  switch (e.keyCode) {
                  case 35: // end
                    e.preventDefault();
                    $('.activeCarouselElm').sly('toEnd');
                    break;
                  case 36: // home
                    e.preventDefault();
                    $('.activeCarouselElm').sly('toStart');
                    break;
                  case 37: // left-arrow
                    if (_isHorizontalMode) {
                      e.preventDefault();
                      $('.activeCarouselElm').sly('prev');
                      break;
                    } else {
                      break;
                    }
                  case 38: // up-arrow
                    if (!_isHorizontalMode) {
                      e.preventDefault();
                      $('.activeCarouselElm').sly('prev');
                      break;
                    } else {
                      break;
                    }
                  case 39: // right-arrow
                    if (_isHorizontalMode) {
                      e.preventDefault();
                      $('.activeCarouselElm').sly('next');
                      break;
                    } else {
                      break;
                    }
                  case 40: // down-arrow
                    if (!_isHorizontalMode) {
                      e.preventDefault();
                      $('.activeCarouselElm').sly('next');
                      break;
                    } else {
                      break;
                    }
                  default:
                    break;
                  }
                }
              });
            }
          });
}(jQuery));

var InputHistoryData = function(name) {

  this.STORAGE_KEY = 'InputHistoryData' + '-' + name;

  if (!simpleStorage.get(this.STORAGE_KEY)) {
    simpleStorage.set(this.STORAGE_KEY, {});
  }

  this.datumTokenizer = Bloodhound.tokenizers.obj.whitespace('value');
  this.queryTokenizer = Bloodhound.tokenizers.whitespace;
  this.limit = 2;
  this.bloodhound = {};
  this.templetes = {
    suggestion : function(datum) {
      return '<p class="history-suggestion">'
          + '<span class="suggestion-icon"><i class="wap-icon-pencil"></i></span>'
          + '<span class="suggestion-value">'
          + datum['value']
          + '</span>'
          + '<button class="btn btn-link remove-history-button pull-right"><i class="wap-icon-close"></i>remove</button>'
          + '</p>';
    }
  };
  this.isAutoSave = true;

  InputHistoryData.prototype.clearHistory = function() {
    var history = this.getHistory();
    for ( var key in history) {
      delete history[key];
    }
  };

  InputHistoryData.prototype.refreshHistory = function() {
    this.bloodhound.clear();
    this.bloodhound.initialize(true);
  };

  InputHistoryData.prototype.addHistory = function(query) {
    if (!query || query == '') {
      return;
    }

    var timestamp = Date.now();
    var history = this.getHistory();
    history[query] = {
      id : timestamp,
      value : query
    };
    this.setHistory(history);
  };

  InputHistoryData.prototype.removeHistory = function(query) {
    var history = this.getHistory();
    delete history[query];
    this.setHistory(history);
  };

  InputHistoryData.prototype.getHistory = function() {
    return simpleStorage.get(this.STORAGE_KEY);
  };

  InputHistoryData.prototype.setHistory = function(history) {
    return simpleStorage.set(this.STORAGE_KEY, history);
  };

  InputHistoryData.loadHistory = function(self) {
    return function() {
      return _.values(simpleStorage.get(self.STORAGE_KEY));
    };
  };

  InputHistoryData.prototype.setTempletes = function(templetes) {
    this.templetes = templetes;
  };

  InputHistoryData.prototype.setAutoSave = function(isAutoSave) {
    this.isAutoSave = isAutoSave;
  };

  InputHistoryData.prototype.isAutoSave = function() {
    return this.isAutoSave;
  };

  InputHistoryData.prototype.getTypeaheadOptions = function() {

    this.bloodhound = new Bloodhound({
      datumTokenizer : Bloodhound.tokenizers.obj.whitespace('value'),
      queryTokenizer : Bloodhound.tokenizers.whitespace,
      limit : 2,
      vacantQueryLimit : 5,
      sorter : function(datum1, datum2) {
        return -(datum1['id'] - datum2['id']);
      },
      local : InputHistoryData.loadHistory(this)
    });

    this.bloodhound.initialize();
    return {
      name : 'history',
      displayKey : 'value',
      source : this.bloodhound.ttAdapter(),
      templates : this.templetes
    };
  };
};
/**
 * wap.accordion
 * accordion for mobile.
 * @author murata_d@worksap.co.jp
 */
(function($) {
  $.widget('wap.mobileAccordion', $.wap.abstractWidget, {

    options : {
      height : null,
    },
    _create : function() {
      this._initElement();
      this._modifyHeight();
      this._bindEvent();
    },

    $header : null,
    $content : null,
    _isSimpleTouch : false,
    _eventName : 'click',

    _initElement : function(){
      this.element.addClass('wap-mobile-accordion');
      this.$header = this.element.find('.acc-header');
      if(!deviceInfo.desktop()){
        this.$header.smartDeviceComponents();
        this._eventName = 'touch';        
      }
      this.$content = this.element.find('.acc-content');
    },

    _modifyHeight : function(){
      if (isFinite(this.options.height) && 44 < Number(this.options.height)){
        this.$header.get(0).style.height = this.options.height + "px";
      };
    },

    _bindEvent : function(){
      var that = this;
      this.$header.on(this._eventName,function(e){
        that.$content.slideToggle(10);
      });
      this.$content.slideToggle(10);
    },
    
    remove : function(){
      this.element.remove();
    }

  });
}(jQuery));

var wap = wap || {};

(function($) {
  // ------------------------------------------------------------------------
  // constants
  // ------------------------------------------------------------------------
  var ID = 'wap-personalClipboard',

  EVENT_CLICK_ = 'click', //
  EVENT_MOUSEMOVE_ = 'mousemove', //
  EVENT_MOUSEOVER_ = 'mouseover', //
  EVENT_FOCUS_ = 'focus',

  HISTORY = 'history', REGISTER = 'register',

  STORAGE_COPY_HISTORY = 'wap-copyable-history', //
  STORAGE_REGISTER = 'personalRegister', CONTEXT_MENU_ID = 'clipboard-context-menu'; //
  CONTEXT_MENU_ID_GRID = CONTEXT_MENU_ID + '-grid';

  var EMPTY_VALUE_PLACEHOLDER = '空欄';

  /**
   * 
   * @constructor
   */
  var PersonalClipboard = function() {
    this.init_();
  };

  PersonalClipboard.prototype.init_ = function() {
    this.notHide_ = false;
    this.loadHistoryData_();
    this.loadRegisterData_();
  };

  PersonalClipboard.prototype.loadHistoryData_ = function() {
    this.historyData_ = JSON.parse(localStorage.getItem(STORAGE_COPY_HISTORY)) || [];

    this.historyVals_ = [];
    var l = this.historyData_.length;
    for (var i = 0; i < l; i++) {
      this.historyVals_.unshift(this.historyData_[i]['value']);
    }

    this.updateContextMenu_();
  };

  PersonalClipboard.prototype.loadRegisterData_ = function() {
    this.registerData_ = JSON.parse(localStorage.getItem(STORAGE_REGISTER)) || [];
  };

  /**
   * get copied history data
   * 
   * @private
   */
  PersonalClipboard.prototype.getHistoryData = function() {
    return this.historyData_;
  };

  PersonalClipboard.prototype.hasHistory = function() {
    return this.historyData_.length > 0;
  };

  /**
   * get copied history data
   * 
   * @private
   * @param html the html of the element
   * @param str content to show hint
   * @param opt_company isCompany
   * @param opt_object object
   */
  PersonalClipboard.prototype.putCopyData = function(appId, html, str, opt_company, opt_object, opt_pageCopy) {
    // TODO: save capture
    if (str === "") {
      return;
    }
    str = str.replace(/\r\n|\r/g, '\n');
    if (this.historyVals_.indexOf(str) < 0) {
      var date = new Date();
      var newItem;
      if (typeof html === "string") {
        newItem = {
          'appId' : appId,
          'html' : html,
          'value' : str,
          'date' : date.toLocaleDateString() + " " + date.toLocaleTimeString(),
          'key' : (str.length > 20) ? (str.slice(0, 20) + '・・・') : str
        };
      } else {
        newItem = {
          'appId' : appId,
          'html' : html.html(),
          'value' : str,
          'date' : date.toLocaleDateString() + " " + date.toLocaleTimeString(),
          'key' : (str.length > 20) ? (str.slice(0, 20) + '・・・') : str
        };
      }
      if (!!opt_company) {
        newItem['app'] = {
          'title' : '購入依頼申請(一般備品・消耗品の購入依頼申請)',
          'context' : "申請書ID　:　17331",
          'element' : '',
          'url' : location.href,
        };
      }
      if (!!opt_object) {
        newItem["object"] = opt_object;
        newItem["notOperated"] = opt_pageCopy;
      }
      this.historyData_.unshift(newItem);
      this.historyVals_.unshift(str);
    } else {
      var item = this.historyData_.splice(this.historyVals_.indexOf(str), 1)[0];
      this.historyVals_.splice(this.historyVals_.indexOf(str), 1)[0];
      if (!!html) {
        if (typeof html === "object") {
          item['html'] = html.html();
        } else {
          item['html'] = html;
        }
      }
      if (!!opt_object) {
        item["object"] = opt_object;
      }
      this.historyData_.unshift(item);
      this.historyVals_.unshift(str);
    }

    this.storeData();
    this.updateContextMenu_(); // FIXME not good

    if (window.opener && window.opener.wap.Copyable) {
      window.opener.wap.Copyable.getInstance().reloadHistory();
    }
  };

  PersonalClipboard.prototype.storeData = function() {
    var l = this.historyData_.length;
    var storeData = [];
    for (var i = 0; i < l; i++) {
      var item = this.historyData_[i];
      var keys = Object.keys(item);
      var lk = keys.length;
      var newItem = {};
      for (var j = 0; j < lk; j++) {
        var key = keys[j];
        var val = item[key];
        newItem[key] = val;
        if (typeof val === 'object') {
          if (!!val.html) {
            var html = val.html();
            !!val.html() && (newItem[key] = html);
          }
        }
      }
      storeData.push(newItem);
    }
    localStorage.setItem(STORAGE_COPY_HISTORY, JSON.stringify(storeData));
  };

  PersonalClipboard.prototype.updateContextMenu_ = function() {
    var $menus = $('.wap-clipboard-menu');
    var hasNoHistory = this.historyVals_.length === 0;

    $menus.find('li.context-paste').toggleClass('disabled', hasNoHistory);
  };

  /**
   * get registered data
   * 
   * @private
   */
  PersonalClipboard.prototype.getRegisterData = function() {
    return this.registerData_;

  };

  /**
   * save register data
   */
  PersonalClipboard.prototype.registerData = function(key, string) {

  };

  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  var PersonalClipboardComponent = function() {
    this.personalClipboard_ = new PersonalClipboard();
    this.contextMenus_ = [];
    this.init_();
    this.targetElement_ = undefined;
    this.openFolderStack_ = [];
    this.target_ = undefined;
  };

  PersonalClipboardComponent.prototype.init_ = function() {
    this.initElem_();
    this.renderAll_();
    this.bindEvents_();
    this.changed_ = {
      HISTORY : false,
      REGISTER : false
    };
  };

  PersonalClipboardComponent.prototype.reloadHistory = function() {
    this.personalClipboard_.loadHistoryData_();
  };

  PersonalClipboardComponent.prototype.initElem_ = function() {
    /**
     * This element contains the history list and explain panel
     */
    this.elem_ = $('<div>');
    this.elem_.attr('id', ID);

    this.listAreaElem_ = $('<div>');
    this.listAreaElem_.addClass('list-area');
    this.listElems_ = {};

    this.listElems_[HISTORY] = $('<ul>');
    this.listElems_[HISTORY].addClass('history');
    this.listElems_[REGISTER] = $('<ul>');
    this.listElems_[REGISTER].addClass('register');

    this.listAreaElem_.append(this.listElems_[HISTORY]);
    this.listAreaElem_.append(this.listElems_[REGISTER]);

    this.dummyFocusElem_ = $('<input type="text">');
    this.dummyFocusElem_.addClass("dummy-input");

    this.explaneElem_ = $('<div>');
    this.explaneElem_.addClass('explane');

    this.mainContents_ = $('<div>');
    this.mainContents_.addClass('contents');
    this.mainContents_.append(this.searchElem_);
    this.mainContents_.append(this.listAreaElem_);

    // this.headerElem_ = $('<div>');
    // this.headerElem_.addClass('clipboard-header');
    // this.elem_.append(this.headerElem_);
    this.elem_.append(this.mainContents_);
    this.elem_.append(this.explaneElem_);
    this.elem_.append(this.dummyFocusElem_);

    this.dummyPasteElem_ = $('<input type="text">');
    this.dummyPasteElem_.addClass("dummy-paste");
    $('body').append(this.elem_);
    // this.expandContextMenu();
  };

  PersonalClipboardComponent.prototype.expandContextMenu = function(target, isGridMenu) {
    function createMenu(listClassNames, classNames, menuString, disable, eventHandler, eventOption) {
      var li = $("<li>");
      li.toggleClass('disabled', disable);
      var a = $("<a>");
      a.attr("role", "menuitem");
      a.addClass(classNames);
      a.html(menuString);
      li.addClass(listClassNames);
      li.append(a);
      if (eventOption === "submenu") {
        a.append('<i class="wap-icon-caret-right">');
        var hoverTimeout;
        a.on("mouseover", function(e) {
          hoverTimeout = setTimeout(function() {
            eventHandler(e);
          }, 300);
        });
        a.on("mouseout", function() {
          !!hoverTimeout && clearTimeout(hoverTimeout);
        });
      }

      a.on("click", eventHandler);

      return li;
    }
    target = target || $(".wap-clipboard-menu");
    $.each(target, function(idx, elem) {
      $(elem).append(createMenu("context-copy", "wap-icon-copy wap-copy", "コピー", false, this.contextCopy.bind(this)));
      if (isGridMenu) {
        $(elem).append(
            createMenu("context-paste-override context-paste", "wap-icon-paste wap-paste", "上書きしてペースト",
                !this.personalClipboard_.hasHistory(), this.contextPasteOverride_.bind(this)));
        $(elem).append(
            createMenu("context-paste-add context-paste", "wap-icon-paste wap-paste", "追加してペースト",
                !this.personalClipboard_.hasHistory(), this.contextPasteAdd_.bind(this)));// cannnot use with paste-tool
      } else {
        $(elem).append(
            createMenu("context-paste", "wap-icon-paste wap-paste", "ペースト", !this.personalClipboard_.hasHistory(),
                this.contextMultiPaste_.bind(this)));
      }
      $(elem).append(
          createMenu("context-copy-history context-paste", "wap-icon-history wap-copy-history", "コピー履歴からペースト",
              !this.personalClipboard_.hasHistory(), this.contextCopyHistory_.bind(this), "submenu"));
    }.bind(this));
    this.contextMenus_.push(target);
  };

  PersonalClipboardComponent.prototype.mainContextMenu = function(target) {
    function createMenu(classNames, menuString, eventHandler, eventOption) {
      var li = $("<li>");
      var a = $("<a>");
      a.attr("role", "menuitem");
      a.addClass(classNames);
      a.html(menuString);
      li.append(a);
      if (eventOption === "submenu") {
        a.append('<i class="wap-icon-caret-right">');
        var hoverTimeout;
        a.on("mouseover", function(e) {
          hoverTimeout = setTimeout(function() {
            eventHandler(e);
          }, 300);
        });
        a.on("mouseout", function() {
          !!hoverTimeout && clearTimeout(hoverTimeout);
        });
      } else if (eventOption == "hover") {
        var hoverTimeout;
        var clicked = false;
        a.on("mouseover", function(e) {
          eventHandler(e, "over");
        });
        a.on("mouseout", function(e) {
          !clicked && eventHandler(e, "out");
          clicked = false;
        });

        a.on("click", function(e) {
          eventHandler(e, "click");
          clicked = true;
        });

      } else {
        a.on("click", eventHandler);
      }
      return li;
    }
    target = target || $(".wap-clipboard-menu");
    $.each(target, function(idx, elem) {
      $(elem).append(
          createMenu("wap-icon-copy wap-copy-all-select", "全ての項目を選択", this.contextAllSelect_.bind(this), "hover"))
          .append(
              createMenu("wap-icon-copy wap-copy-all-paste", "全ての項目を選択してペースト", this.contextAllPaste_.bind(this),
                  "hover")).append(
              createMenu("wap-icon-history wap-copy-history", "コピー履歴からペースト", this.contextCopyHistory_.bind(this),
                  "submenu"));

    }.bind(this));
    this.contextMenus_.push(target);
  };

  PersonalClipboardComponent.prototype.contextAllSelect_ = function(e, eventType) {
    var rectElem_ = $(".copyable-rect");
    $('[data-copy-target="entry-form"]').remove();
    if (eventType == "over") {
      rectElem_.removeClass("pasted copied focused selected");
      rectElem_.addClass("selected");
      rectElem_.show();
    } else if (eventType == "out") {
      rectElem_.removeClass("selected");
      rectElem_.hide();
    } else if (eventType == "click") {
      $("#copyable-drop-area").hide();
      this.personalClipboard_.getHistoryData()[0]["notOperated"] = false;
      this.personalClipboard_.storeData();
      $("#wap-clipboard-contextmenu-main").hide();
      e.stopImmediatePropagation();
      return false;
    }
  };

  /**
   * reset the state of copyable elements
   * 
   * @param {!jQuery} $rectElement
   */
  PersonalClipboardComponent.prototype.resetRectState_ = function($rectElement) {
    $rectElement.removeClass("pasted copied focused selected");
  };

  PersonalClipboardComponent.prototype.contextAllPaste_ = function(e, eventType) {
    var rectElem_ = $(".copyable-rect");
    $('[data-copy-target="entry-form"]').remove();
    if (eventType == "over") {
      rectElem_.addClass("selected");
      wap.Copyable.getInstance().copy();
      this.tmpObject_ = this.targetObject_;
      rectElem_.removeClass("selected pasted copied focused");
      rectElem_.addClass("pasted");
      rectElem_.show();
      wap.Copyable.getInstance().pasteObject(this.personalClipboard_.getHistoryData()[0]["object"]);
    } else if (eventType == "out") {
      rectElem_.removeClass("pasted");
      rectElem_.hide();
      wap.Copyable.getInstance().pasteObject(this.tmpObject_);
    } else if (eventType == "click") {
      $("#copyable-drop-area").hide();
      this.personalClipboard_.getHistoryData()[0]["notOperated"] = false;
      this.personalClipboard_.storeData();
      $("#wap-clipboard-contextmenu-main").hide();
      e.stopImmediatePropagation();
      return false;
    }
  };

  PersonalClipboardComponent.prototype.setContextMenuTarget = function(target) {
    this.contextMenuTarget_ = target;
  };

  PersonalClipboardComponent.prototype.getContextMenuTarget = function() {
    return this.contextMenuTarget_;
  };

  PersonalClipboardComponent.prototype.hideContextMenu = function() {
    var l = this.contextMenus_.length;
    for (var i = 0; i < l; i++) {
      this.contextMenus_[i].hide();
    }

    this.contextMenuTarget_ = null;
  };

  PersonalClipboardComponent.prototype.getHtml_ = function(obj) {
    var result = "";
    var keys = Object.keys(obj);
    var l = keys.length;
    for (var i = 0; i < l; i++) {
      var key = keys[i];
      result += obj[key].html();
    }
    return result;
  };

  PersonalClipboardComponent.prototype.contextCopy = function(e, pageCopy) {
    wap.Copyable.getInstance().copy();
    var content = this.getJoinedContents_(this.targetObject_);
    this.personalClipboard_.putCopyData("", this.targetHtml_, content, true, this.targetObject_, pageCopy);
    this.changed_[HISTORY] = true;
    this.hideContextMenu();
    e.stopPropagation();
  };

  /**
   * get the values from the element according to the copyableFormat attribute.
   */
  PersonalClipboardComponent.prototype.makeStoreStr_ = function(elem) {
    var result = "";
    var format = elem[0].dataset["copyableFormat"] || ('#' + elem[0].id);
    if (!format) {
      alert('program error: please set data-copyable-format to dom attribute.(' + elem[0].id + ')');
      return "";
    }

    var strs = format.split(/\s/);
    var sl = strs.length;
    var prefix = [
      "#", "["
    ];
    for (var i = 0; i < sl; i++) {
      var tmpstr = strs[i];
      if (prefix.indexOf(tmpstr[0]) >= 0) {
        var elem = $(strs[i]);
        tmpstr = elem.val();
        if (!tmpstr) {
          tmpstr = elem.text();
        }
        if (!tmpstr) {
          tmpstr = "空欄";
        }
      }
      result += tmpstr;
    }
    return result;
  };

  PersonalClipboardComponent.prototype.contextMultiPaste_ = function(e) {
    this.multiPaste_(e, true);
  };

  PersonalClipboardComponent.prototype.multiPaste_ = function(e, isAppend) {
    this.resetRectState_($('.copyable-rect'));
    wap.Copyable.getInstance().multiPaste(this.personalClipboard_.getHistoryData()[0], isAppend);
    this.hide();
    this.hideContextMenu();
    e.stopPropagation();
  };

  PersonalClipboardComponent.prototype.contextPasteOverride_ = function(e) {
    this.multiPaste_(e, false);
  };

  PersonalClipboardComponent.prototype.contextPasteAdd_ = function(e) {
    // the add paste is the default behavior of paste
    this.multiPaste_(e, true);
  };

  PersonalClipboardComponent.prototype.contextCopyHistory_ = function(e) {
    this.hide();
    var rect = $(e.currentTarget).find(".wap-icon-caret-right")[0].getBoundingClientRect();
    this.renderForContext_(HISTORY, rect);
    e.stopPropagation(); // Prevent the menu from dispearing
  };

  PersonalClipboardComponent.prototype.selectItem_ = function(liElem) {
    this.resetRectState_($('.copyable-rect'));

    var dataItem = $.data(liElem, 'personalClipBoard');
    if (dataItem) {
      wap.Copyable.getInstance().multiPaste(dataItem, true);
    }

    this.hide();
    this.hideContextMenu();
  };

  PersonalClipboardComponent.prototype.isShow_ = function() {
    return this.elem_.css('display') !== 'none';
  };

  PersonalClipboardComponent.prototype.showExplane_ = function(liElem) {
    var data = $.data(liElem, 'personalClipBoard');
    if (!!data) {
      if (!!data['type'] && data['type'] === 'folder') {
        this.explaneElem_.hide();
      } else {
        var showData = data['value'].replace(/\n/gi, '<br>');
        if (!!data['date']) {
          if (!!data['object']) {
            showData = '<div class="explain-date">'
                + data['date']
                + "</div><div> - - - - - - - - - - - - - - - - - - </div>";
          } else {
            showData = '<div class="explain-date">'
                + data['date']
                + "</div><div> - - - - - - - - - - - - - - - - - - </div>"
                + showData;
          }
        }
        if (!!data['app']) {
          showData = '<div class="explane-header"><a href="'
              + data['app']['url']
              + '" title="メニュー　:　'
              + data['app']['title']
              + "画面\n"
              + data['app']['context']
              + "\n対象項目　:　"
              + data['app']['element']
              + '" target="_brank"><img src="./images/wap.png">コピー元</a></div>'
              + showData;
        }
        this.explaneElem_.html(showData);
        if (!!data['object']) {
          var dataObject = data.object;
          var outerDiv = $("<div>");
          outerDiv.css({
            "position" : "relative"
          });
          var keys = Object.keys(dataObject);
          var len = keys.length;
          for (var i = 0; i < len; i++) {
            outerDiv.append(this.makeExplainItem_(keys[i], dataObject[keys[i]]));
          }
          this.explaneElem_.append(outerDiv);
        }
        this.explaneElem_.css(this.calcExplanePosition_());
        this.explaneElem_.show();
      }
    } else {
      this.explaneElem_.hide();
    }
  };

  /**
   * Make an item in the explain panel
   * 
   * @param {{caption:string,selfValue:*}} dataItem
   */
  PersonalClipboardComponent.prototype.makeExplainItem_ = function(id, dataItem) {
    var $item = $('<div>');
    $item.addClass('copyable-explain-item');

    var $itemCaption = $('<div>');
    $itemCaption.addClass('copyable-explain-item-caption').text(dataItem.caption);

    var $itemContent = $('<div>');
    $itemContent.addClass('copyable-explain-item-content');
    $itemContent.append(wap.Copyable.getInstance().getPlugin(id).getExplainPanel(dataItem, id));

    $item.append($itemCaption).append($itemContent);

    return $item;
  };

  PersonalClipboardComponent.prototype.setObject = function(object, html) {
    var content = this.getJoinedContents_(object);
    var topObj = this.personalClipboard_.getHistoryData()[0];
    this.targetObject_ = object;
    this.targetHtml_ = html;
    if (topObj && topObj.value === content) {
      this.personalClipboard_.getHistoryData()[0]['object'] = object;
    }
  };

  PersonalClipboardComponent.prototype.getJoinedContents_ = function(object) {
    var result = "";
    Object.keys(object).map(function(item) {
      result += object[item]["contents"] + "\n";
    });
    return result;
  };

  PersonalClipboardComponent.prototype.getFirstObject = function() {
    var object = this.personalClipboard_.getHistoryData()[0]['object'];
    return object;
  };

  PersonalClipboardComponent.prototype.bindEvents_ = function() {
    $(document).on("mouseover", '[role="menuitem"]', function(e) {
      if (!$(e.currentTarget).hasClass("wap-copy-history")) {
        $("#wap-personalClipboard").hide();
      }
    });

    $(document).on(EVENT_CLICK_, "#" + ID + " .selected", function(e) {
      this.selectItem_(e.currentTarget);
      e.stopPropagation();
    }.bind(this));

    var clickPersonalClipboard = false;
    $(document).on(EVENT_CLICK_, "#" + ID, function(e) {
      clickPersonalClipboard = true;
    });

    $(document).on(EVENT_CLICK_, function(e) {
      if (!clickPersonalClipboard) {
        if (!this.notHide_) {
          this.hide();
        }
        this.notHide_ = false;
      }
      clickPersonalClipboard = false;
    }.bind(this));

    $(document).on(EVENT_MOUSEOVER_, "#" + ID + " li", function(e) {
      this.targetElement_.find(".selected").removeClass("selected");
      $(e.currentTarget).addClass("selected");
      this.showExplane_(e.currentTarget);
    }.bind(this));

    $(document).on(EVENT_MOUSEMOVE_, function(e) {
      this.position_ = {
        X : e.clientX,
        Y : e.clientY
      };
    }.bind(this));

    $(document).on(EVENT_FOCUS_, "input, textarea", function(e) {
      var elem = $(e.currentTarget);
      if (!elem.hasClass('dummy-input') && !elem.hasClass('dummy-paste')) {
        this.targetInput_ = {
          'elem' : elem,
          'selection' : elem.selection("getPos")
        };
      }
    }.bind(this));
  };

  PersonalClipboardComponent.prototype.hide = function() {
    this.elem_.hide();
    var l = this.openFolderStack_.length - 1;
    for (var i = 0; i < l; i++) {
      this.openFolderStack_[i].remove();
    }
    this.explaneElem_.hide();
    this.elem_.find('.selected').removeClass('selected');
  };

  PersonalClipboardComponent.prototype.getSelectionHtml_ = function() {
    var html = "";
    if (typeof window.getSelection != "undefined") {
      var sel = window.getSelection();
      if (sel.rangeCount) {
        var container = document.createElement("div");
        for (var i = 0, len = sel.rangeCount; i < len; ++i) {
          container.appendChild(sel.getRangeAt(i).cloneContents());
        }
        html = container.innerHTML;
      }
    } else if (typeof document.selection != "undefined") {
      if (document.selection.type == "Text") {
        html = document.selection.createRange().htmlText;
      }
    }
    return html;
  };

  PersonalClipboardComponent.prototype.calcPosition_ = function(selected) {
    var top = selected[0].getBoundingClientRect()['top'] - this.elem_[0].getBoundingClientRect()['top'];
    var left = parseInt(this.targetElement_.css('left'));
    if (isNaN(left)) {
      left = 0;
    }
    left += this.targetElement_[0].getBoundingClientRect()['width'];
    return {
      'top' : top,
      'left' : left
    };
  };

  PersonalClipboardComponent.prototype.calcExplanePosition_ = function() {
    var top = this.targetElement_.children('.selected')[0].getBoundingClientRect()['top']
        - this.elem_[0].getBoundingClientRect()['top'];
    var left = parseInt(this.targetElement_.css('left'));
    if (isNaN(left)) {
      left = 0;
    }
    left += this.targetElement_[0].getBoundingClientRect()['width'];
    return {
      'top' : top,
      'left' : left
    };
  };

  PersonalClipboardComponent.prototype.renderAll_ = function() {
    this.renderItems_(this.listElems_[HISTORY], this.personalClipboard_.getHistoryData());
    this.renderItems_(this.listElems_[REGISTER], this.personalClipboard_.getRegisterData());
  };

  PersonalClipboardComponent.prototype.renderForContext_ = function(type, rect) {
    var scroll = document.documentElement.scrollTop || document.body.scrollTop;
    this.elem_.css({
      'top' : rect["top"] + scroll,
      'left' : rect["left"] + 30
    });

    if (this.elem_.css('display') === 'none') {
      this.elem_.show();
    }
    this.dummyFocusElem_.focus();

    var targetElem = this.listElems_[type];
    this.renderItems_(targetElem, this.getData_(type), 5);
    if (targetElem.css('display') === 'none') {
      this.listAreaElem_.children().hide();
      targetElem.show();
    }
    this.targetElement_ = targetElem;
    this.openFolderStack_ = [
      targetElem
    ];
  };

  PersonalClipboardComponent.prototype.getData_ = function(type) {
    if (type === HISTORY) {
      return this.personalClipboard_.getHistoryData();
    } else if (type === REGISTER) {
      return this.personalClipboard_.getRegisterData();
    }
  };

  PersonalClipboardComponent.prototype.renderItems_ = function(containerElem, itemData, count) {
    containerElem.empty();

    var $contents = $('#wap-personalClipboard .contents');
    if (this.personalClipboard_.hasHistory())
      $contents.show();
    else
      $contents.hide();

    var l = itemData.length;
    count = count || l;
    for (var i = 0; i < l && i < count; i++) {
      var item = itemData[i];
      var itemElem = $('<li>');
      if (!!item['app']) {
        itemElem.append('<img src="./images/wap.png">');
      } else {
        itemElem.append('<span class="dummy"></span>');
      }

      var $summary = $('<span>');
      $summary.addClass('copyable-history-summary');
      $summary.text(this.makeSummary_(item));
      itemElem.append($summary);

      $.data(itemElem[0], 'personalClipBoard', item);
      if (!!item['type'] && item['type'] === 'folder') {
        var caret = $('<span class="wap-icon-caret-right">');
        itemElem.append(caret);
      }
      containerElem.append(itemElem);
    }
  };

  PersonalClipboardComponent.prototype.makeSummary_ = function(item) {
    if (!item.object)
      return item.key;

    var itemObject = item.object;
    var keys = Object.keys(itemObject);
    var summary = '';

    for (var i = 0, lenI = keys.length; i < lenI && summary.length < 50; ++i) {
      var elementId = keys[i];
      var tmpObj = itemObject[elementId];

      summary += wap.Copyable.getInstance().getPlugin(elementId).getSummary(tmpObj, 50 - summary.length, elementId);
      summary += ' ';
    }

    return summary.substr(0, 50);
  };

  /**
   * Singleton
   */
  PersonalClipboardComponent.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new this();
    }

    return this.instance_;
  };

  /**
   * @constructor
   */
  wap.Copyable = function() {
    /**
     * Sometimes, the copyable component is very complex, so the user need to register the callback function.
     */
    this.plugins_ = {};

    /**
     * @type {wap.Copyable.Plugin}
     */
    this.defaultPlugin_ = new wap.Copyable.Plugin();
  };

  /**
   * Singleton
   */
  wap.Copyable.getInstance = function() {
    if (!this.instance_) {
      this.instance_ = new this();
    }

    return this.instance_;
  };

  wap.Copyable.CLASS = '.wap-copyable';

  wap.Copyable.EVENT = {
    MOUSEOVER : 'mouseover' + wap.Copyable.CLASS // focasable, copyable
    ,
    MOUSEOUT : 'mouseout' + wap.Copyable.CLASS // unfocusable, copyable
    ,
    MOUSEDOWN : 'mousedown' + wap.Copyable.CLASS // select
    ,
    MOUSEUP : 'mouseup' + wap.Copyable.CLASS // end select
    ,
    MOUSEMOVE : 'mousemove' + wap.Copyable.CLASS // select
    ,
    CLICK : 'click' + wap.Copyable.CLASS // focused, pastable
    ,
    DOUBLECLICK : 'dblclick' + wap.Copyable.CLASS // focused, pastable
    // selectable
    ,
    DRAGOVER : 'dragover' + wap.Copyable.CLASS //
    ,
    KEYDOWN : 'keydown' + wap.Copyable.CLASS // copied, pasted
  };

  wap.Copyable.ATTRIBUTE = {
    TABINDEX : 'tabindex'
  };

  /**
   * Init personal clipboard. This method should be called at last step.
   * 
   * @param {{disableContextMenu:boolean=}} opt_options
   */
  wap.Copyable.prototype.init = function(opt_options) {
    opt_options = opt_options || {};

    /**
     * If true, the context menu will NOT be added to the copyable elements.
     * 
     * @type {boolean}
     */
    this.disableContextMenu_ = opt_options.disableContextMenu;

    this.init_();
    this.bindEvent_();
  };

  /**
   * 
   * @param {!string} elementId
   * @param {!Object} plugin
   */
  wap.Copyable.prototype.addPlugin = function(elementId, plugin) {
    this.normalizePlugin(plugin);
    this.plugins_[elementId] = plugin;
  };

  var PLUGIN_METHODS = [
    'getCaption', 'getContextMenuSelector', 'getExplainPanel', 'getSummary', 'getValue', 'setValue'
  ];

  /**
   * Add necessary methods into the plugin from delegatePlugin
   * 
   * @param {!Object} plugin
   * @param {Object=} delegatePlugin
   */
  wap.Copyable.prototype.normalizePlugin = function(plugin, delegatePlugin) {
    delegatePlugin = delegatePlugin || this.defaultPlugin_;

    $.each(PLUGIN_METHODS, function() {
      if (!plugin[this])
        plugin[this] = delegatePlugin[this];
    });
  };

  /**
   * 
   * @param {!string} elementId
   */
  wap.Copyable.prototype.removePlugin = function(elementId) {
    delete this.plugins_[elementId];
  };

  /**
   * 
   * @param {string} elementId
   * @return {!Object}
   */
  wap.Copyable.prototype.getPlugin = function(elementId) {
    return this.plugins_[elementId] || this.defaultPlugin_;
  };

  /**
   * Add menu items to other context menu, instead of creating a independent one.
   * 
   * @param {!Element|string} $element Html Element or css selector.
   * @param {boolean} isMultipleValue If true, copied value could be appended/overriden to this element. The menu items
   *          will be different.
   */
  wap.Copyable.prototype.expandContextMenu = function($element, isMultipleValue) {
    PersonalClipboardComponent.getInstance().expandContextMenu($($element), isMultipleValue);
  };

  wap.Copyable.prototype.init_ = function() {
    this.selectElems_ = [];
    this.copyOnly_ = $("body").hasClass('wap-copyable-copy-only');
    this.initContextMenu_();
    this.initSelectArea_();
    this.initPlugins_();
  };

  wap.Copyable.prototype.initPlugins_ = function() {
    var _self = this;
    $('.wap-copyable').each(function() {
      if ($(this).hasClass('wap-checkbox')) {
        if (!_self.plugins_[this.id]) {
          _self.addPlugin(this.id, new wap.Copyable.CheckboxPlugin());
        }
      } else if ($(this).hasClass('wap-radioGroup')) {
        _self.addPlugin(this.id, new wap.Copyable.RadioGroupPlugin());
      }
    });
  };

  wap.Copyable.prototype.initSelectArea_ = function() {
    var selectRectElem_ = $("<div>");
    selectRectElem_.attr("id", "select-rect");
    $("body").append(selectRectElem_);
    selectRectElem_.on('contextmenu', function(event) {
      PersonalClipboardComponent.getInstance().hideContextMenu();
    }.bind(this));
    selectRectElem_.contextMenu({
      menuSelector : '#wap-clipboard-contextmenu'
    });
  };

  wap.Copyable.prototype.initContextMenu_ = function() {
    var _self = this;
    var dropdown = $("<div>");
    dropdown.addClass("dropdown");
    var ul = $("<ul>");
    ul.addClass("dropdown-menu wap-clipboard-menu");
    ul.attr("id", "wap-clipboard-contextmenu");
    ul.attr("role", "menu");
    $("body").append(ul);
    this.expandContextMenu(ul, false);
    var ul = $("<ul>");
    ul.addClass("dropdown-menu wap-clipboard-menu");
    ul.attr("id", "wap-clipboard-contextmenu-grid");
    ul.attr("role", "menu");
    $("body").append(ul);
    this.expandContextMenu(ul, true);
    var dropdown = $("<div>");
    dropdown.addClass("dropdown");
    var ul2 = $("<ul>");
    ul2.addClass("dropdown-menu wap-clipboard-menu");
    ul2.attr("id", "wap-clipboard-contextmenu-main");
    ul2.attr("role", "menu");
    PersonalClipboardComponent.getInstance().mainContextMenu(ul2);
    $("body").append(ul2);
    $(document).on('loadedPageData', function() {
      $("#title-form").contextMenu({
        menuSelector : '#wap-clipboard-contextmenu-main'
      });
    });

    // Add contextMenu to each copyable element
    if (!this.disableContextMenu_) {
      $('.wap-copyable').each(function() {
        var plugin = _self.getPlugin(this.id);
        var contextMenuSelector = plugin.getContextMenuSelector(this);
        if (contextMenuSelector) {
          $(this).on('contextmenu', function(event) {
            PersonalClipboardComponent.getInstance().hideContextMenu();
            PersonalClipboardComponent.getInstance().setContextMenuTarget($(this));
          }.bind(this));
          $(this).contextMenu({
            menuSelector : contextMenuSelector,
          });
        }
      });
    }
  };

  wap.Copyable.prototype.bindEvent_ = function() {
    // focusable, copyable
    $(document).on(wap.Copyable.EVENT.MOUSEOVER, wap.Copyable.CLASS, function(e) {
      var target = $(e.currentTarget);
      this.mouseover_(target, e);
    }.bind(this));

    // unfocusable, uncopyable
    $(document).on(wap.Copyable.EVENT.MOUSEOUT, wap.Copyable.CLASS, function(e) {
      var target = $(e.currentTarget);
      this.mouseout_(target, e);
    }.bind(this));

    var selecting = false;
    var start = {
      "top" : 0,
      "left" : 0
    };
    var rect = {
      "top" : 0,
      "left" : 0,
      "width" : 0,
      "height" : 0,
      "display" : "none"
    };
    var selectedRectangles = {};
    // select
    $(document).on(wap.Copyable.EVENT.MOUSEDOWN, function(e) {
      if (e.ctrlKey) {
        e.preventDefault();
        return;
      }
      if ($("#wap-clipboard-contextmenu-main").css("display") == "block") {
        return;
      }
      if (this.copyOnly_ && $(e.target).hasClass("copyable-rect")) {
        return;
      }
      if (e.which == 1) {
        if (e.target.id === "select-rect") {
          return;
        }
        if ($(e.target).prop("data-copy-unable") || $(e.target).parents('[data-copy-unable="true"]').length > 0) {
          return;
        }

        if ($(e.target).hasClass("copyable-rect") && $(e.target).hasClass("selected")) {
          return;
        }

        if ($(e.target).parents("#wap-clipboard-contextmenu").length > 0) {
          return;
        }
        if ($(e.target).parents("#wap-clipboard-contextmenu-grid").length > 0) {
          return;
        }
        if ([
          "input", "textarea", "label", 'select'
        ].indexOf(e.target.tagName.toLowerCase()) >= 0 || $(e.target).parents(".wap-copyable").length > 0) {
          $("#select-rect").hide();
          selecting = false;
          return;
        }
        $("#select-rect").hide();
        selecting = true;
        rect["top"] = e.clientY + document.body.scrollTop;
        rect["left"] = e.clientX + document.body.scrollLeft;
        start["top"] = rect["top"];
        start["left"] = rect["left"];
        rect["width"] = 0;
        rect["height"] = 0;
        $("body").css("-webkit-user-select", "none");
        if (!e.ctrlKey && !this.copyOnly_) {
          $(".copyable-rect").hide();
        }
        var initRects = function(rectElem_) {
          rectElem_.removeClass("pasted");
          rectElem_.removeClass("copied");
          rectElem_.removeClass("focused");
          rectElem_.removeClass("selected");
          rectElem_.show();
          var selectedRect = rectElem_[0].getBoundingClientRect();
          selectedRectangles[rectElem_[0].dataset["copyTarget"]] = {
            "elem" : rectElem_,
            "top" : selectedRect["top"] + document.body.scrollTop,
            "left" : selectedRect["left"] + document.body.scrollLeft,
            "width" : selectedRect["width"],
            "height" : selectedRect["height"]
          };
          if (!this.copyOnly_) {
            rectElem_.hide();
          } else {
            rectElem_.removeClass("selected");
            rectElem_.addClass("copyable");
          }
        }.bind(this);
        $('.copyable-rect.selected').removeClass("selected");
        $.each($(".wap-copyable"), function(idx, el) {
          var elem = $(el);
          var rectElem_ = this.renderCopyable(elem);
          initRects(rectElem_);
          if (!!el.dataset["notCopyableMulti"]) {
            rectElem_.hide();
            delete selectedRectangles[el.id];
          }
        }.bind(this));
      }
    }.bind(this));

    // end select
    $(document).on(wap.Copyable.EVENT.MOUSEUP, function(e) {
      selecting = false;
      if (e.ctrlKey) {
        e.preventDefault();
      }
    }.bind(this));

    // select
    $(document).on(
        wap.Copyable.EVENT.MOUSEMOVE,
        function(e) {
          if (selecting) {
            var top = e.clientY + document.body.scrollTop;
            var left = e.clientX + document.body.scrollLeft;
            if (top > start["top"]) {
              rect["height"] = top - rect['top'];
            } else {
              rect["height"] = start['top'] - top;
              rect["top"] = top;
            }

            if (left > start["left"]) {
              rect["width"] = left - rect['left'];
            } else {
              rect["width"] = start['left'] - left;
              rect['left'] = left;
            }
            if (rect["width"] > 5 || rect["height"] > 5) {
              rect["display"] = "block";
              $("#select-rect").css(rect);
              var keys = Object.keys(selectedRectangles);
              var l = keys.length;
              for (var i = 0; i < l; i++) {
                var selected = selectedRectangles[keys[i]];
                var top00 = rect["top"];
                var top01 = rect["top"] + rect["height"];
                var top10 = selected["top"];
                var top11 = selected["top"] + selected["height"];
                var left00 = rect["left"];
                var left01 = rect["left"] + rect["width"];
                var left10 = selected["left"];
                var left11 = selected["left"] + selected["width"];
                var target = selectedRectangles[keys[i]];
                if ((!e.ctrlKey && top00 < top11 && top10 < top01 && left00 < left11 && left10 < left01)
                    || (e.ctrlKey && top00 < top10 && top11 < top01 && left00 < left10 && left11 < left01)) {
                  // selected
                  if (this.copyOnly_) {
                    target["elem"].addClass("selected");
                    target["elem"].removeClass("copyable");
                  } else {
                    target["elem"].show();
                    target["elem"].addClass("selected");
                  }
                } else {
                  if (this.copyOnly_) {
                    target["elem"].removeClass("selected");
                    target["elem"].addClass("copyable");
                  } else {
                    target["elem"].hide();
                    target["elem"].removeClass("selected");
                  }
                }
              }
            } else {
              $("#select-rect").hide();
            }
          }
        }.bind(this));

    // select multiple copyable elements using ctrl + click
    $(document).on(wap.Copyable.EVENT.CLICK, wap.Copyable.CLASS, this.click_.bind(this));

    // focused, pastable
    $(document).on(wap.Copyable.EVENT.DOUBLECLICK, wap.Copyable.CLASS, function(e) {
      if ($(e.target).hasClass("copyable-rect")) {
        if (this.copyOnly_) {
          $(e.target).hide();
        }
        return;
      }
    }.bind(this));

    // close copy rects
    $(document).on(wap.Copyable.EVENT.CLICK, function(e) {
      if ($("#select-rect").css("display") === "none") {
        if (e.ctrlKey) {
          if ($(e.target).hasClass("copyable-rect")) {
            $(e.target).removeClass("selected");
            $(e.target).hide();
          }
        } else if (this.copyOnly_) {
          e.stopPropagation();
        } else {
          $('.paste-tools').removeClass('selected').hide(100);
          var l = this.selectElems_.length;
          for (var i = 0; i < l; i++) {
            this.selectElems_[i].hide();
          }
          this.originalItems = null;
        }
      } else {
        $("#select-rect").hide();
      }
    }.bind(this));
  };

  wap.Copyable.prototype.mouseover_ = function(elem, e) {
    if (elem.attr(wap.Copyable.ATTRIBUTE.TABINDEX) === undefined && elem.attr('id') != 'title') {
      elem.attr(wap.Copyable.ATTRIBUTE.TABINDEX, '-1');
    }
    this.renderCopyable(elem);
  };

  wap.Copyable.prototype.mouseout_ = function(elem, e) {
  };

  wap.Copyable.prototype.toggleSelect_ = function(elem) {
    elem.removeClass("copied");
    elem.removeClass("pasted");
    elem.removeClass("focused");
    if (elem.hasClass("selected")) {
      elem.removeClass("selected");
      elem.addClass("copyable");
    } else {
      elem.addClass("selected");
      elem.removeClass("copyable");
    }
  };

  wap.Copyable.prototype.click_ = function(event) {
    if (event.ctrlKey) {
      var rectElem = this.getRect_($(event.target).closest(wap.Copyable.CLASS));
      if (rectElem.length > 0) {
        if (rectElem.hasClass('selected')) {
          rectElem.removeClass('selected');
          rectElem.hide();
        } else {
          rectElem.removeClass('pasted copied focused');
          rectElem.addClass('selected');
          rectElem.show();
        }
      }

      event.stopPropagation();
    }
  };

  wap.Copyable.prototype.copy = function() {
    var rectElems_ = $('.copyable-rect.selected');

    if (rectElems_.length == 0) {
      var contextMenuTarget = PersonalClipboardComponent.getInstance().getContextMenuTarget();
      if (contextMenuTarget) {
        rectElems_ = this.getRect_(contextMenuTarget);
        rectElems_.show();
      }
    }

    rectElems_.removeClass("selected");
    rectElems_.removeClass("pasted");
    rectElems_.addClass("copied");
    var storeObj = {};
    var html = "";
    var rectl = rectElems_.length;
    for (var recti = 0; recti < rectl; recti++) {
      if (!rectElems_[recti].dataset["copyTarget"]) {
        continue;
      }
      var tmpElem = $("#" + rectElems_[recti].dataset["copyTarget"]);

      if (tmpElem.length === 0) {
        continue;
      }

      html += tmpElem.html();

      var plugin = this.getPlugin(tmpElem[0].id);
      var value = plugin.getValue(tmpElem[0]);
      if (value.caption === undefined)
        value.caption = plugin.getCaption(tmpElem[0]);

      if (value.values === undefined)
        value.values = [];

      storeObj[tmpElem[0].id] = value;
    }

    PersonalClipboardComponent.getInstance().setObject(storeObj, html);
    rectElems_.show();

    return storeObj;
  };

  wap.Copyable.prototype.setValue_ = function(elem, item, isAddMode) {
    var hasValue = this.getPlugin(elem[0].id).setValue(elem[0], item, {
      isAddMode : isAddMode,
    });

    if (hasValue) {
      var rectElem_ = elem.siblings('[data-copy-target="' + elem.attr("id") + '"]');
      if (rectElem_.length == 0) {
        rectElem_ = this.renderCopyable(elem);
      }
      rectElem_.removeClass("copied");
      rectElem_.removeClass("selected");
      rectElem_.addClass("pasted");
      rectElem_.show();
      // TODO currently, paste tool is not supported.
      // this.renderPasteTools_(elem);
    }
  };

  /**
   * @param data
   * @param {boolean} isAppend append the data or override the data
   */
  wap.Copyable.prototype.multiPaste = function(data, isAppend) {
    var object = data.object;
    if (!!object) {
      var keys = Object.keys(object);
      var kl = keys.length;
      for (var ki = 0; ki < kl; ki++) {
        var key = keys[ki];
        var item = object[key];
        var elem = $("#" + key);
        this.setValue_(elem, item, isAppend);
      }
    }
  };

  wap.Copyable.prototype.pasteObject = function(object) {
    if (!!object) {
      var keys = Object.keys(object);
      var kl = keys.length;
      for (var ki = 0; ki < kl; ki++) {
        var key = keys[ki];
        var item = object[key];
        var elem = $("#" + key);
        this.setValue_(elem, item, false);
        if (key == "title") {
          elem.typeahead("val", elem.val());
        }
      }
    }
  };

  wap.Copyable.prototype.paste = function(targetElem, e, isAddMode) {
    var object = PersonalClipboardComponent.getInstance().getFirstObject();
    var keys = Object.keys(object);
    var kl = keys.length;
    for (var ki = 0; ki < kl; ki++) {
      var key = keys[ki];
      var item = object[key];
      var elem = $("#" + key);
      if (elem[0] === targetElem[0]) {
        this.setValue_(elem, item, isAddMode);
      }
      break;
    }
  };

  wap.Copyable.prototype.getRect_ = function(elem) {
    return elem.siblings('[data-copy-target="' + elem[0].id + '"]');
  };

  wap.Copyable.prototype.showCopyable = function() {
    $.each($(".wap-copyable"), function(idx, el) {
      if (!!el.dataset["notCopyableMulti"]) {
        return;
      }
      var elem = $(el);
      var rectElem_ = this.renderCopyable(elem);
      rectElem_.removeClass("copied");
      rectElem_.removeClass("pasted");
      rectElem_.removeClass("focused");
      rectElem_.removeClass("selected");
      rectElem_.addClass("copyable");
      rectElem_.show();
    }.bind(this));
  };

  wap.Copyable.prototype.hideCopyable = function() {
    $.each($(".wap-copyable"), function(idx, el) {
      if (!!el.dataset["notCopyableMulti"]) {
        return;
      }
      var elem = $(el);
      var rectElem_ = this.renderCopyable(elem);
      rectElem_.removeClass("copied");
      rectElem_.removeClass("pasted");
      rectElem_.removeClass("focused");
      rectElem_.removeClass("selected");
      rectElem_.removeClass("copyable");
      rectElem_.hide();
    }.bind(this));
  };

  /**
   * render functions
   */
  wap.Copyable.prototype.getParentRelativePosition_ = function(elem) {
    var rectEl = elem[0].getBoundingClientRect();
    var rectParent = elem[0].parentElement.getBoundingClientRect();
    return {
      'top' : (rectEl['top'] - rectParent['top'] - 1),
      'left' : (rectEl['left'] - rectParent['left'] - 1),
      'width' : rectEl['width'] + 2,
      'height' : rectEl['height'] + 2
    };
  };

  wap.Copyable.prototype.renderPasteTools_ = function(elem) {
    var pasteToolElem_ = elem.find('.paste-tools');
    if (pasteToolElem_.length === 0) {
      var pasteToolElemHtml = '<div class="paste-tools">'
          + '<i class="wap-icon-paste"></i><i class="wap-icon-caret-down"></i>'
          +
          // '<div class="paste-tools-header">置き換えて貼り付け</div>' +
          '<div class="paste-tools-sub paste-replace">'
          +
          // '<div class="subitem paste-all wap-icon-paste" title="すべて貼り付け"></div>' +
          '<div class="subitem paste-name wap-icon-paste" title="商品名称のみ貼り付け"></div>'
          + '<div class="subitem paste-quantity wap-icon-paste" title="数量・単位のみ貼り付け"></div>'
          + '</div>'
          +
          // '<div class="paste-tools-header">追加して貼り付け</div>' +
          // '<div class="paste-tools-sub paste-add">' +
          // '<div class="subitem paste-all wap-icon-paste" title="すべて貼り付け"></div>' +
          // '<div class="subitem paste-name wap-icon-paste" title="商品名称のみ貼り付け"></div>' +
          // '<div class="subitem paste-quantity wap-icon-paste" title="数量・単位のみ貼り付け"></div>' +
          // '</div>' +
          '</div>';

      elem.append($(pasteToolElemHtml));

      $(document).on('click', '.paste-tools', function(e) {
        $(e.currentTarget).addClass('selected');
        // $(e.currentTarget).hide();
      }.bind(this));

      $(document).on('mouseenter', '.paste-tools .subitem', function(e) {
        this.execPasteTool($(e.target));
      }.bind(this));

      $(document).on('mouseleave', '.paste-tools', function(e) {
        this.revertPasteTool();
      }.bind(this));

      $(document).on('click', '.paste-tools .subitem', function(e) {
        this.execPasteTool($(e.target));
        this.originalItems = null;
        $(e.target).parent().parent().hide();
      }.bind(this));
    }
    pasteToolElem_.show(200);
  };

  wap.Copyable.prototype.renderCopyable = function(elem) {
    var _self = this;
    var rectElem_ = elem.siblings('[data-copy-target="' + elem.attr("id") + '"]');
    if (rectElem_.length === 0) {
      var menuSelectorId = (elem.attr("id") === 'dtl-table') ? '#wap-clipboard-contextmenu-grid'
          : '#wap-clipboard-contextmenu';
      var rectElem_ = $("<div>");
      rectElem_.addClass("copyable-rect");
      rectElem_.attr("data-copy-target", elem.attr("id"));
      rectElem_.attr("draggable", "true");

      var borderTop = $("<div>");
      borderTop.addClass("top");
      var borderRight = $("<div>");
      borderRight.addClass("right");
      var borderBottom = $("<div>");
      borderBottom.addClass("bottom");
      var borderLeft = $("<div>");
      borderLeft.addClass("left");

      rectElem_.append(borderTop);
      rectElem_.append(borderRight);
      rectElem_.append(borderBottom);
      rectElem_.append(borderLeft);

      elem.after(rectElem_);
      if (elem.parent().css('position') === 'static') {
        elem.parent().css('position', 'relative');
      }
      this.selectElems_.push(rectElem_);
      rectElem_.on('mouseover', function() {
      }.bind(this));
      rectElem_.on('contextmenu', function(event) {
        PersonalClipboardComponent.getInstance().setContextMenuTarget($("#" + this.dataset["copyTarget"]));
        PersonalClipboardComponent.getInstance().hideContextMenu();
      });
      rectElem_.contextMenu({
        menuSelector : menuSelectorId
      });
      var pastableIcon = $("<div>");
      pastableIcon.addClass("wap-icon-paragraph-justify menu");
      pastableIcon.append("メニュー");
      pastableIcon.contextMenu({
        eventOn : "click",
        menuSelector : menuSelectorId
      });
      rectElem_.append(pastableIcon);
    }
    rectElem_.css(this.getParentRelativePosition_(elem));
    // rectElem_.show();
    return rectElem_;
  };

  wap.Copyable.prototype.revert = function() {
    if (!this.originalItems) {
      return;
    }
    var object = PersonalClipboardComponent.getInstance().getFirstObject();
    var keys = Object.keys(object);
    var kl = keys.length;
    for (var ki = 0; ki < kl; ki++) {
      var key = keys[ki];
      var item = $.extend(true, {}, object[key]);
      item.values = $.extend(true, [], this.originalItems);
      var elem = $("#" + key);
      this.setValue_(elem, item);
      break;
    }
  };

  // TODO paste tool should be 'keep original' and 'change'.
  wap.Copyable.prototype.execPasteTool = function($target) {
    if ($target.hasClass('paste-all')) {
      this.pasteAll();
    } else if ($target.hasClass('paste-name')) {
      this.pasteName();
    } else if ($target.hasClass('paste-quantity')) {
      this.pasteQuantity();
    }
  };

  wap.Copyable.prototype.revertPasteTool = function() {
    if (!this.originalItems) {
      return;
    }
    var object = PersonalClipboardComponent.getInstance().getFirstObject();
    var keys = Object.keys(object);
    var kl = keys.length;
    for (var ki = 0; ki < kl; ki++) {
      var key = keys[ki];
      var item = object[key];
      var elem = $("#" + key);
      this.setValue_(elem, item);
      break;
    }
  };

  wap.Copyable.prototype.pasteAll = function() {
    var object = PersonalClipboardComponent.getInstance().getFirstObject();
    var keys = Object.keys(object);
    var kl = keys.length;
    for (var ki = 0; ki < kl; ki++) {
      var key = keys[ki];
      var item = $.extend(true, {}, object[key]);
      var elem = $("#" + key);
      this.setValue_(elem, item);
      break;
    }
  };

  wap.Copyable.prototype.reloadHistory = function() {
    PersonalClipboardComponent.getInstance().reloadHistory();
  };

  /**
   * @constructor
   */
  wap.Copyable.Plugin = function() {
  };

  /**
   * 
   * @param {!Element} $element
   * @return {*}
   */
  wap.Copyable.Plugin.prototype.getValue = function($element) {
    var itemVals = {};
    var inputTags = [
      "input", "textarea", 'select'
    ];

    itemVals["values"] = [];

    if (inputTags.indexOf($element.tagName.toLowerCase()) >= 0) {
      itemVals["selfValue"] = $($element).val();
    }

    var inputs = $($element).find("input, textarea");
    var l = inputs.length;
    for (var i = 0; i < l; i++) {
      itemVals["values"].push($(inputs[i]).val());
    }

    itemVals["contents"] = PersonalClipboardComponent.getInstance().makeStoreStr_($($element));

    return itemVals;
  };

  /**
   * 
   * @param {!Element} $element
   * @param {*} value
   * @param {Object.<string,*>=} opt_options
   * @return {boolean} value is set or not.
   */
  wap.Copyable.Plugin.prototype.setValue = function($element, item, opt_options) {
    if (!$element || $element.dataset["copyUnable"]) {
      return;
    }

    var hasValue = false;
    var elem = $($element);

    if (item["selfValue"] !== undefined) {
      elem.val(item["selfValue"]);
      elem.trigger('focusout'); // FIXME it's only force fix. validator runs before paste and not run after paste.#18730
      hasValue = true;
    }

    if (item.values.length > 0) {
      var values = item.values;
      var inputs = elem.find("input, textarea, select");
      var l = inputs.length;
      for (var i = 0; i < l; i++) {
        var value = values[i];
        if (value !== undefined) {
          $(inputs[i]).val(values[i]);
        }
      }

      hasValue = true;
    }

    return hasValue;
  };

  wap.Copyable.Plugin.prototype.getCaption = function($element) {
    return $element.dataset.copyableCaption;
  };

  wap.Copyable.Plugin.prototype.getExplainPanel = function(value, elementId) {
    var $panel = $('<span>');
    if (value.selfValue != null && value.selfValue !== '')
      $panel.text(value.selfValue);
    else if (value.values && value.values.length > 0)
      $panel.text(value.values);
    else
      $panel.text(EMPTY_VALUE_PLACEHOLDER);

    return $panel;
  };

  /**
   * Get the context menu selector for this element. If there is no context menu, return null.
   * 
   * @param {!Element} $element
   * @return {String} css selector
   */
  wap.Copyable.Plugin.prototype.getContextMenuSelector = function($element) {
    return '#wap-clipboard-contextmenu';
  };

  /**
   * Get summary of the value
   * 
   * @param {{caption:string, selfValue:*=, values:Array=}} item
   * @param {number} maxLengthHint
   * @param {string} elementId
   * @return {string}
   */
  wap.Copyable.Plugin.prototype.getSummary = function(item, maxLengthHint, elementId) {
    var summary = item.caption + ': ';

    if (item.selfValue != null && item.selfValue !== '') {
      summary += item.selfValue;
    } else if (item.values.length > 0) {
      var values = item.values;
      for (var i = 0, len = values.length; i < len && summary.length < maxLengthHint; ++i) {
        summary += values[i];

        if (i < len - 1) {
          summary += ',';
        }
      }
    } else {
      summary += EMPTY_VALUE_PLACEHOLDER;
    }

    return summary;
  };

  /**
   * @constructor
   * @param grid
   * @param {!Array.<string>=} displayColumns
   */
  wap.Copyable.GridPlugin = function(grid, displayColumns) {
    this.grid_ = grid;
    /**
     * @type {!Array.<string>}
     */
    this.displayColumns_ = displayColumns;
    this.displayColumnNames_ = {};

    var self = this;
    $.each(this.grid_.getColumns(), function() {
      var columnId = this.getId();
      if (self.displayColumns_.indexOf(columnId) >= 0)
        self.displayColumnNames_[columnId] = this.getTitle();
    });
  };

  /**
   * @override
   */
  wap.Copyable.GridPlugin.prototype.getValue = function($element) {
    return {
      values : this.grid_.getItems(),
      contents : PersonalClipboardComponent.getInstance().makeStoreStr_($($element)),
    };
  };

  /**
   * @override
   */
  wap.Copyable.GridPlugin.prototype.setValue = function($element, item, opt_options) {
    if (!$element || $element.dataset["copyUnable"]) {
      return false;
    }

    opt_options = opt_options || {};

    var hasValue = false;
    var elem = $($element);
    var values = item.values;

    if (item["selfValue"] !== undefined) {
      elem.val(item["selfValue"]);
      elem.trigger('focusout'); // FIXME it's only force fix. validator runs before paste and not run after paste.#18730
      hasValue = true;
    }

    if (values.length > 0) {
      var grid = this.grid_;

      if (opt_options.isAddMode) {
        var dataView = grid.getDataView();
        var idProperty = dataView.getIdProperty();

        $.each(values, function(index, value) {
          var id = value[idProperty];
          var rowIdx = dataView.getRowIdxById(id);
          if (rowIdx != undefined) {
            value = this.mergeItems($element, value, dataView.getRow(rowIdx));
            grid.updateItem(id, value);
          } else {
            grid.addItem(value);
          }
        }.bind(this));
      } else {
        grid.deleteAllItems();
        grid.setItems(values);
      }

      hasValue = true;
    }

    return hasValue;
  };

  /**
   * In Add mode, when a new item has the same id with the oldItem, this is the strategy to merge these two items.
   */
  wap.Copyable.GridPlugin.prototype.mergeItems = function($element, newItem, oldItem) {
    return newItem;
  };

  /**
   * @override
   */
  wap.Copyable.GridPlugin.prototype.getExplainPanel = function(value, elementId) {
    var self = this;
    var $table = $('<table>');
    $table.addClass('table');

    var $thead = $('<thead>');
    var $tr = $('<tr>');
    $.each(this.displayColumnNames_, function() {
      var $th = $('<th>');
      $th.text(this);
      $tr.append($th);
    });
    $thead.append($tr);

    var $tbody = $('<tbody>');
    $.each(value.values, function() {
      var values = this;
      var $tr = $('<tr>');

      $.each(self.displayColumns_, function() {
        var $td = $('<td>');
        $td.text(values[this]);
        $tr.append($td);
      });

      $tbody.append($tr);
    });

    $table.append($thead);
    $table.append($tbody);

    return $table;
  };

  /**
   * @override
   */
  wap.Copyable.GridPlugin.prototype.getContextMenuSelector = function($element) {
    return '#wap-clipboard-contextmenu-grid';
  };

  /**
   * @override
   */
  wap.Copyable.GridPlugin.prototype.getSummary = function(item, maxLengthHint, elementId) {
    var summary = item.caption + ': ';
    var values = item.values;

    if (values && values.length > 0) {
      for (var i = 0, len = values.length; i < len && summary.length < maxLengthHint; ++i) {
        summary += '(';
        summary += $.map(this.displayColumns_, function(columnId) {
          return values[i][columnId];
        }).join(',');
        summary += ')';

        if (i < len - 1)
          summary += ',';
      }
    } else {
      summary += EMPTY_VALUE_PLACEHOLDER;
    }

    return summary;
  };

  wap.Copyable.CheckboxPlugin = function() {
  };

  /**
   * @override
   */
  wap.Copyable.CheckboxPlugin.prototype.getValue = function($element) {
    return {
      selfValue : $($element).checkbox('isChecked'),
    };
  };

  /**
   * @override
   */
  wap.Copyable.CheckboxPlugin.prototype.setValue = function($element, item, opt_options) {
    $($element).checkbox('checked', !!item.selfValue);
    return true;
  };

  wap.Copyable.RadioGroupPlugin = function() {
  };

  /**
   * @override
   */
  wap.Copyable.RadioGroupPlugin.prototype.getValue = function($element) {
    var value = $($element).radioGroup('getCheckedValue');
    return {
      selfValue : $($element).find('.wap-radio[value="' + value + '"]').text(),
      realValue : value,
    };
  };

  /**
   * @override
   */
  wap.Copyable.RadioGroupPlugin.prototype.setValue = function($element, item, opt_options) {
    $($element).radioGroup('setCheckValue', item.realValue);
    return true;
  };
})(jQuery);

/**
 * radioGroup
 * 
 * div要素を1Groupとしてラジオの操作します。
 * 
 * @author Hajime Kurakata
 */

(function($) {
  $.widget("wap.radioGroup", $.wap.abstractWidget, {

    // default-option
    options : {
      caption : "wap-radioGroup",
      id : null,
      value : null
    },

    _create : function() {
      this._super();
      if (this.options.id) {
        this.setCheckId(this.options.id);
      }
      if (this.options.value) {
        this.setCheckValue(this.options.value);
      }
      if (this.options.disabled) {
        this.disabled();
      }
      var element = $(this.element);
      this._setOnClickFunction(element, this.options);
    },

    _setOnClickFunction : function(element, options) {
      var that = this;
      element.on('click keyup', function(ev) {
        if (ev.type === 'keyup' && ev.keyCode !== 32) {
          return;
        }
        if (!options.disabled) {
          var item = $(ev.target);
          var disabled = false;
          if (item.hasClass("wap-radio")) {
            disabled = item.radio("isDisabled");
          } else {
            disabled = item.prop("disabled");
          }
          // radioの範囲外クリックでdisabled == null
          if (disabled != undefined && !disabled) {
            that.clear();
            that._setProperty("checked", item);
            that._trigger('click');
          }
        }
      });
    },

    clear : function() {
      this.element.find(":radio").prop("checked", false);
      // expended radio
      if (this.element.find(".wap-radio").length > 0) {
        this.element.find(".wap-radio").radio("checked", false);
      }
    },

    isChecked : function(checked) {
      var ret = _isCheckedRadio(this.element.find(":radio"), checked);
      if (!ret) {
        ret = _isCheckedWapRadio(this.element.find(".wap-radio"), checked);
      }
      return ret;

      function _isCheckedRadio(items, checked) {
        var ret = false;
        for (var i = 0; i < items.length; i++) {
          if ($(items[i]).prop('checked') == checked) {
            ret = true;
            break;
          }
        }
        return ret;
      }

      function _isCheckedWapRadio(items, checked) {
        var ret = false;
        for (var i = 0; i < items.length; i++) {
          // TODO to property
          if ($(items[i]).radio("isChecked")) {
            ret = true;
            break;
          }
        }
        return ret;
      }
    },

    getCheckedId : function() {
      return this.getChecked("id");
    },

    getCheckedValue : function() {
      return this.getChecked("value");
    },

    getChecked : function(tag) {
      var value = _getRadio(this.element.find(":radio"), tag);
      if (!value) {
        value = _getRadioWap(this.element.find(".wap-radio"), tag);

      }
      return value;

      function _getRadio(items, tag) {
        var value = null;
        for (var i = 0; i < items.length; i++) {
          if ($(items[i]).prop("checked")) {
            value = $(items[i]).attr(tag);
            break;
          }
        }
        return value;
      }

      function _getRadioWap(items, tag) {
        var value = null;
        for (var i = 0; i < items.length; i++) {
          if ($(items[i]).radio("isChecked")) {
            value = $(items[i]).attr(tag);
            break;
          }
        }
        return value;
      }
    },

    setCheckId : function(id) {
      this.clear();
      this._setProperty("checked", $("#" + id));
    },

    setDisabledIdList : function(list) {
      for (var i = 0; i < list.length; i++) {
        this._setProperty("disabled", $("#" + list[i]));
      }
    },

    _setProperty : function(property, item) {
      if (item.hasClass("wap-radio")) {
        item.radio(property, true);
      } else {
        item.prop(property, true);
      }
    },

    setCheckValue : function(value) {
      this.clear();
      this._setValueProperty("checked", value);
    },

    setDisabledValueList : function(list) {
      for (var i = 0; i < list.length; i++) {
        this._setValueProperty("disabled", list[i]);
      }
    },

    _setValueProperty : function(property, value) {
      var items = this.element.find(":radio");
      for (var j = 0; j < items.length; j++) {
        if ($(items[j]).attr("value") == value) {
          $(items[j]).prop(property, true);
        }
      }
      var items = this.element.find(".wap-radio");
      for (var j = 0; j < items.length; j++) {
        if ($(items[j]).attr("value") == value) {
          $(items[j]).radio(property, true);
        }
      }
    },

    focus : function(value) {
      var selectorString;
      if (null != value) {
        selectorString = '[value=' + value + ']';
      } else {
        selectorString = ':first';
      }
      this.element.find(":radio" + selectorString).focus();
      // expended CSS checkbox
      if (this.element.find(".wap-radio" + selectorString).length > 0) {
        this.element.find(".wap-radio" + selectorString).focus();
        ;
      }
    },

    disabled : function(disabled) {
      this.options.disabled = disabled;
      this.element.find(":radio").prop("disabled", disabled);
      if (this.element.find(".wap-radio").length > 0) {
        this.element.find(".wap-radio").radio("disabled", disabled);
      }
    },
  });

  $(function() {
    var autoInstantiationClass = $.wap.radioGroup.prototype.widgetFullName;
    $('.' + autoInstantiationClass).radioGroup();
  });

}(jQuery));

/**
 * Radio
 * 
 * @author Hajime Kurakata
 */

(function($) {
  $.widget("wap.radio", $.wap.abstractWidget, {

    // default-option
    options : {
      caption : 'wap-radio',
      on : "wap-icon-radio-checked",
      off : "wap-icon-radio-unchecked",
      checked : false,
    },

    _create : function() {

      this._super();

      var element = $(this.element);
      this._setCheckeActiveClass(element, this.options);
      this._setOnClickFunction(element, this.options);
      this._setTabIndex();
    },

    _setCheckeActiveClass : function(element, options) {

      if (options.checked == true) {
        element.addClass(options.on);
      } else {
        element.addClass(options.off);
      }
    },

    _setOnClickFunction : function(element, options) {
      var that = this;
      element.on('click keyup', function(ev) {
        if (ev.type === 'keyup' && ev.keyCode !== 32) {
          return;
        }
        var tag = $(ev.target);
        if (!options.disabled) {
          if (tag.hasClass(options.on)) {
            tag.addClass(options.off).removeClass(options.on);
          } else {
            tag.addClass(options.on).removeClass(options.off);
          }
          that._trigger('click');
        }
      });
    },

    _setTabIndex : function() {
      if (!this.element.attr('tabindex')) {
        this.element.attr('tabindex', 0);
      }
    },

    isChecked : function() {

      var ret = false;
      if (this.element.hasClass(this.options.on)) {
        ret = true;
      }
      return ret;
    },

    checked : function(checked) {
      if (checked) {
        if (this.element.hasClass(this.options.off)) {
          this.element.addClass(this.options.on).removeClass(this.options.off);
        }
      } else {
        if (this.element.hasClass(this.options.on)) {
          this.element.addClass(this.options.off).removeClass(this.options.on);
        }
      }
    },

    disabled : function(disabled) {
      if (disabled) {
        this.element.radio("disable");
      } else {
        this.element.radio("enable");
      }
    },

    isDisabled : function() {
      return this.options.disabled;
    }

  });

  $(function() {
    var autoInstantiationClass = $.wap.radio.prototype.widgetFullName;
    $('.' + autoInstantiationClass).radio();
  });

}(jQuery));

// This plugin makes it easier to resume suspended input.
// To resume input-values into components like wap.TextField or wap.DatePicker, please follow two rules following:
// (1) Use formController.
// (2) Give 'data-field-id' to every input field in your html.
// To resume wap.slickGrid, call 'watchGrid()' in advance.
// If you have to hold some values which doesn't related to any input component, use 'saveToAdditional()'.

(function($) {
  $.widget('wap.inputResumer', $.wap.abstractWidget, {
    options : {
      grids : {},
      functionId : 'default', // Specify unique id of your function (ex:'purchase-entry/entry-main'
      dataKey : 'default', // Specify key to manage multiple saved data in your function. (e.g. query-string in
      // URL)
      excludeDataFields : [],// specify dataFieldId to excluded it in resuming
      generations : 0, // count of generations in stack. 0 and 1 are equal.
      additionalSave : function() {
        // (your function)
      },
    },

    _create : function() {
      var RESEUME_DIALOG_TEMPLATE = "wap-resume-dialog-template";// this is const
      var RESEUME_DIALOG = "wap-resume-dialog";// this is const
      this._super();
      this.grids = this.options.grids;
      this.functionId = this.options.functionId;
      this.dataTag = 'resume';// used in truncate
      this.dataKey = this.options.dataKey;
      this.excludeDataFields = this.options.excludeDataFields;
      this.$dialog = $('.' + RESEUME_DIALOG_TEMPLATE).clone().removeClass(RESEUME_DIALOG_TEMPLATE).addClass(
          RESEUME_DIALOG);
      $(document.body).append(this.$dialog);
      this.$dialog.find('.btn.resume').on("click", function(event) {
        var targetGeneration = app.inputResumer.$dialog.find('input[type="radio"]:checked').val();
        $target = $(document);
        $target.trigger('submitResumeDialog', targetGeneration);
        if (app.inputResumer.$dialog.callback) {
          app.inputResumer.$dialog.callback(event, targetGeneration);
        }
      });
      if (null != app) {
        app.inputResumer = $(document.body).data('wapInputResumer');

        // set automatically save data after user operate any field
        $.each(app.formController.fields, function(index, val) {
          var $inputEle = $(val.inputElement.context);
          if ($inputEle.attr('data-controller') === 'radioField') {
            $inputEle.radioGroup().on('change click', function() {
              app.inputResumer.save();
            });
          } else if ($inputEle.attr('data-controller') === 'checkboxField') {
            $inputEle.checkboxGroup().on('change click', function() {
              app.inputResumer.save();
            });
          } else {
            $inputEle.on('input propertychange change changeDate', function() {
              app.inputResumer.save();
            });
          }
        });
        // trigger save action and clear history data before refresh or leave current page
        $(window).bind('beforeunload', function() {
          app.inputResumer.deleteData();
          app.inputResumer.save();
        });

        console.log('wap.inputResumer: app.inputResumer have been registered.');
      } else {
        // TODO: make it if not exists?
      }
    },

    _setOption : function(key, value) {
    },

    _destroy : function() {
      this.$dialog.remove();
    },

    _getTag : function() {
      return this.dataTag + '_' + this.functionId + '_' + this.dataKey;
    },

    showDialog : function(callback) {
      if (!this.hasData()) {
        // do something?
      } else {
        var RESUME_DIALOG_ITEM_TEMPLATE = 'wap-resume-dialog-item-template'; // this is const
        var RESUME_DIALOG_ITEM = 'wap-resume-dialog-item'; // this is const
        var items = this.getDataOfAllGenerations(this.options.functionId, this.options.dataKey);
        this.$dialog.find("." + RESUME_DIALOG_ITEM).remove();
        var $resume_dialog_item_template = $('.' + RESUME_DIALOG_ITEM_TEMPLATE);

        for (var i = 0; i < items.length; i++) {
          var gen = items[i].properties.generation;
          var _prcDate = new Date(items[i].properties.prcDate);
          var _code = items[i].properties.code;
          var _name = items[i].properties.name;
          var _comment = items[i].properties.comment;
          var $item = $resume_dialog_item_template.clone().removeClass(RESUME_DIALOG_ITEM_TEMPLATE).addClass(
              RESUME_DIALOG_ITEM);
          if (null != _prcDate) {
            $item.find(".item-prcdate").text(_prcDate.toDateString() + ' ' + _prcDate.toLocaleTimeString());
            $item.find(".item-code").text(_code);
            $item.find(".item-name").text(_name);
            $item.find(".item-comment").text(_comment);
          }
          $item.find("input[type='radio']").attr({
            "id" : "gen" + i,
            "value" : i
          });
          $item.find(".item-label").attr({
            "for" : "gen" + i,
          });
          this.$dialog.find(".wap-resume-dialog-item-group").append($item);
        }
        this.$dialog.find("#gen0").attr("checked", true);
        this.$dialog.modal('show');
        this.$dialog.callback = callback;
      }
    },

    saveToAdditional : function(key, val) {
      // save to ls
      var datas = this.getDataOfAllGenerations();
      if (datas.length > 0) {
        var data = datas[0];
        if (!data.additional) {
          data.additional = {};
        }
        var temp = {};
        temp.key = key;
        temp.value = val;
        eval("data.additional['" + key + "'] = temp;");

        var dataAll = {
          "list" : datas,
          "properties" : {
            "dataTag" : this.dataTag,
            "functionId" : this.options.functionId,
            "dataKey" : this.options.dataKey,
          }
        };
        localStorage[this._getTag()] = JSON.stringify(dataAll);
      }
    },

    save : function(properties) {
      // save to ls
      var datas = this.getDataOfAllGenerations();
      var data = {};
      data.properties = this._setupPropertiesData(properties);
      data.window = this._setupWindowData();
      data.document = this._setupDocumentData();
      data.components = this._setupComponentsData();
      data.grids = this._setupGridsData();
      datas.push(data);

      datas.sort(function(a, b) {
        return (new Date(b.properties.prcDate) - new Date(a.properties.prcDate));
      });
      if (this.options.generations === 0) {
        datas.splice(1, datas.length);
      } else {
        datas.splice(this.options.generations, datas.length);
      }

      var dataAll = {
        "list" : datas,
        "properties" : {
          "dataTag" : this.dataTag,
          "functionId" : this.options.functionId,
          "dataKey" : this.options.dataKey,
        }
      };
      localStorage[this._getTag()] = JSON.stringify(dataAll);
      this._trigger('additionalSave', {});
    },

    getData : function(generation) {
      return this.getDataBykey(this.options.functionId, this.options.dataKey, generation);
    },

    getDataOfAllGenerations : function() {
      var result = [];
      if (localStorage[this._getTag()]) {
        var all = JSON.parse(localStorage[this._getTag()]);
        if (all.list) {
          result = all.list;
        }
      }
      result.sort(function(a, b) {
        return (new Date(b.properties.prcDate) - new Date(a.properties.prcDate));
      });
      return result;
    },

    getDataBykey : function(functionId, dataKey, generation) {
      if (null == generation) {
        generation = 0;
      }
      return this.getDataBykeyOfAllGenerations(this.options.functionId, this.options.dataKey)[generation];
    },

    getDataBykeyOfAllGenerations : function(functionId, dataKey) {
      var result = [];
      var ls;
      for (key in localStorage) {
        if (key.indexOf(this.dataTag) >= 0) {
          ls = JSON.parse(localStorage[key]);
          if (ls && ls.properties && ls.properties.dataTag && (ls.properties.dataTag === this.dataTag)) {
            if ((ls.properties.functionId === functionId) && (ls.properties.dataKey === dataKey)) {
              result = ls.list;
            }
          }
        }
      }
      result.sort(function(a, b) {
        return (new Date(b.properties.prcDate) - new Date(a.properties.prcDate));
      });
      return result;
    },

    getDataListByFunctionId : function(functionId) {
      // get array of data by functionId
      var ls;
      var result = [];
      for (key in localStorage) {
        if (key.indexOf(this.dataTag) >= 0) {
          ls = JSON.parse(localStorage[key]);
          if (ls && ls.properties && ls.properties.dataTag && (ls.properties.dataTag === this.dataTag)) {
            if (ls.properties.functionId === functionId) {
              result.push(ls);
            }
          }
        }
      }
      return result;
    },

    watchGrid : function(key, grid) {
      // call this after grid is created
      eval("this.grids['" + key + "'] = grid;");
    },

    deleteData : function() {
      // remove from ls
      localStorage.removeItem(this._getTag());
    },

    deleteDataByKey : function(functionId, dataKey) {
      var ls;
      for (key in localStorage) {
        if (key.indexOf(this.dataTag) >= 0) {
          ls = JSON.parse(localStorage[key]);
          if (ls && ls.properties && ls.properties.dataTag && (ls.properties.dataTag === this.dataTag)) {
            if ((ls.properties.functionId === functionId) && (ls.properties.dataKey === dataKey)) {
              localStorage.removeItem(key);
            }
          }
        }
      }
    },

    deleteDataByFunctionId : function(functionId) {
      // remove all suspended data which functionId matches
      var ls;
      for (key in localStorage) {
        if (key.indexOf(this.dataTag) >= 0) {
          ls = JSON.parse(localStorage[key]);
          if (ls && ls.properties && ls.properties.dataTag && (ls.properties.dataTag === this.dataTag)) {
            if (ls.properties.functionId === functionId) {
              localStorage.removeItem(key);
            }
          }
        }
      }
    },

    truncateData : function() {
      // remove all & every suspended data without any condition (remove evenif functionID differs)
      var ls;
      for (key in localStorage) {
        if (key.indexOf(this.dataTag) >= 0) {
          ls = JSON.parse(localStorage[key]);
          if (ls && ls.properties && ls.properties.dataTag && (ls.properties.dataTag === this.dataTag)) {
            localStorage.removeItem(key);
          }
        }
      }
    },

    hasData : function() {
      if (localStorage[this._getTag()]) {
        return true;
      } else {
        return false;
      }
    },

    resumeComponents : function(generation) {
      if (null == generation) {
        generation = 0;
      }
      // Resume input components.
      var data = this.getData(generation);
      if (data && data.components) {
        for ( var key in data.components) {
          var tgt = data.components[key];
          if ((null != tgt.key) && (null != tgt.data)) {
            if (this.excludeDataFields.indexOf(tgt.key) >= 0) {
              continue;
            }
            var controller = app.formController.getFieldController(tgt.key);
            if (controller instanceof $.wap.checkboxField) {
              app.formController.getFieldController(tgt.key).setAllUnChecked(); // workaround for checkBoxGroup
              app.formController.setData(tgt.key, tgt.data);

            } else if (controller instanceof $.wap.datePickerField) {
              app.formController.setData(tgt.key, new Date(tgt.data));

            } else {
              // controller instanceof $.wap.textField, or so
              app.formController.setData(tgt.key, tgt.data);
            }
          }
        }
      }
    },

    resumeFocus : function(generation) {
      if (null == generation) {
        generation = 0;
      }
      var data = this.getData(generation);
      if (data && data.document && data.document.activeElement) {
        if (null != data.document.activeElement.dataFieldId) {
          var fieldCon = app.formController.getFieldController(data.document.activeElement.dataFieldId);
          if (fieldCon) {
            if (data.document.activeElement.dataFieldValue) {
              fieldCon.focus(data.document.activeElement.dataFieldValue);
            } else {
              fieldCon.focus();
            }
          }
        }
      }
    },

    resumeGrid : function(key, grid, generation) {
      if (null == generation) {
        generation = 0;
      }
      function resumeCellRangeSelector(gridData) {
        /*
         * note: 2014/07/07 kikuchi
         * 
         * this method won't work well when multiple columns are selected, because cellRangeSelector won't work well on
         * multiple ranges. However, I won't do any workaround for this problem now because I think this method itself
         * is correct and will work well when cellRangeSelector will have been fixed.
         */
        if (gridData.plugins.cellRangeSelector) {
          if (null != (gridData.plugins.cellRangeSelector.selectedRanges)) {
            var cellRangeSelector = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.CELL_RANGE_SELECTOR);
            if (cellRangeSelector) {
              for ( var key in gridData.plugins.cellRangeSelector.selectedRanges) {
                var selectedRange = gridData.plugins.cellRangeSelector.selectedRanges[key];
                // FIXME multiple ranges
                var range = [
                  new wap.fw.ui.SlickGrid.Range(selectedRange.fromRow_, selectedRange.fromCell_, selectedRange.toRow_,
                      selectedRange.toCell_)
                ];
                cellRangeSelector.setSelectedRanges(range);
              }
            }
          }
        }
      }
      function resumeColumnSorter(gridData) {
        if (gridData.plugins.columnSorter) {
          if (null != (gridData.plugins.columnSorter.currentColumnId)
              && null != (gridData.plugins.columnSorter.sortAsc)) {
            var columnSorter = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.COLUMN_SORTER);
            if (columnSorter) {
              columnSorter.sort(gridData.plugins.columnSorter.currentColumnId, gridData.plugins.columnSorter.sortAsc,
                  false);
            }
          }
        }
      }
      function resumeMultiColumnSort(gridData) {
        if (gridData.plugins.multiColumnSort) {
          if ((null != (gridData.plugins.multiColumnSort.sortOrderArray))
              && (gridData.plugins.multiColumnSort.sortOrderArray.length > 0)) {
            var multiColumnSort = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.MULTI_COLUMN_SORT);
            if (multiColumnSort) {
              var arrayOfColumnId = [];
              var arrayOfAscending = [];
              gridData.plugins.multiColumnSort.getLastSortingConditions().forEach(function(sortOrder) {
                arrayOfColumnId.push(sortOrder.columnId);
                arrayOfAscending.push(sortOrder.ascending ? "asc" : "desc");
              });
              var sorterArray = multiColumnSort.composeMultiComparer_(arrayOfColumnId, arrayOfAscending);
              grid.sorter_.multisort(sorterArray);
            }
          }
        }
      }
      function resumeCellComment(gridData) {
        if (gridData.plugins.cellComment) {
          if (null != (gridData.plugins.cellComment.commentAll)) {
            var cellComment = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.CELL_COMMENT);
            if (cellComment) {
              cellComment.setCommentAll(gridData.plugins.cellComment.commentAll);
            }
          }
        }
      }
      // Resume grid
      var data = this.getData(generation);
      var gridData = this.getGrid(key, data);
      if (gridData) {
        var keyFieldName = gridData.keyFieldName;
        if (gridData.data) {
          grid.deleteAllItems(); // FIXME temporary fix
          grid.setItems(gridData.data.items_, keyFieldName);
        }
        if (gridData.scrollTop_) {
          grid.$viewportScrollContainerY_.scrollTop = gridData.scrollTop_;
        }
        if (gridData.scrollLeft_) {
          grid.$viewportScrollContainerX_.scrollLeft = gridData.scrollLeft_;
        }
        if (gridData.selectedRows) {
          grid.setSelectedRows(gridData.selectedRows);
        }
        if (gridData.selectedColumns) {
          var selectedColumns = [];
          for ( var key in gridData.selectedColumns) {
            var col = gridData.selectedColumns[key];
            selectedColumns.push(grid.getColumn(col.id_));
          }
          grid.setSelectedColumns(selectedColumns);
        }
        if (gridData.activeCell && (null != (gridData.activeCell.row)) && (null != (gridData.activeCell.cell))) {
          grid.setActiveCell(gridData.activeCell.row, gridData.activeCell.cell);
        }

        if (gridData.plugins) {
          resumeCellRangeSelector(gridData);
          resumeColumnSorter(gridData);
          resumeMultiColumnSort(gridData);
          resumeCellComment(gridData);
        }
      }
    },

    prepareGridColumns : function(columns_orig, columns_saved) {
      function getSavedColumn(columnId, columns) {
        var result = undefined;
        for ( var key in columns) {
          var column = columns[key];
          if (column.id_ === columnId) {
            result = column;
          }
        }
        return result;
      }
      function getSavedColumnWidth(columnId, columns) {
        var result = getSavedColumn(columnId, columns);
        if (null != (result.width)) {
          return result.width;
        } else {
          return undefined;
        }
      }
      function compareColumn(a, b) {
        return columns_saved.indexOf(getSavedColumn(a.id, columns_saved))
            - columns_saved.indexOf(getSavedColumn(b.id, columns_saved));
      }
      var result = columns_orig;

      // resume column reordering
      columns_orig.sort(compareColumn);

      // resume column width
      for ( var key in result) {
        var col = result[key];
        var temp = getSavedColumnWidth(col.id, columns_saved);
        if (null != (temp)) {
          col.width = temp;
        }
      }
      return result;
    },

    getGrid : function(key, data) {
      if (null == data) {
        data = this.getData();
      }
      if (data && data.grids && data.grids[key]) {
        return data.grids[key];
      } else {
        return null;
      }
    },

    _setupPropertiesData : function(properties) {
      var code = '';
      var name = '';
      if (properties && properties.code) {
        code = properties.code;
      }
      if (properties && properties.name) {
        name = properties.name;
      }
      var _properties = {};
      _properties.dataTag = this.dataTag;
      _properties.dataKey = this.dataKey;
      _properties.functionId = this.functionId;
      _properties.code = code;
      _properties.name = name;
      _properties.prcDate = new Date();
      return _properties;
    },

    _setupWindowData : function() {
      var _window = {};
      _window.scrollX = window.scrollX;
      _window.scrollY = window.scrollY;
      return _window;
    },

    _setupDocumentData : function() {
      var _document = {};
      _document.activeElement = {};
      _document.activeElement.dataFieldId = app.formController.getFocusedDataFieldId();
      if (document.activeElement
          && (null != document.activeElement.attributes.value)
          && (null != document.activeElement.attributes.value.value)) {
        // necessary when checkbox, radio
        _document.activeElement.dataFieldValue = document.activeElement.attributes.value.value;
      } else {
        _document.activeElement.dataFieldValue = null;
      }
      if (document.activeElement && isSelectable(document.activeElement) && document.activeElement.selectionStart) {
        _document.activeElement.selectionStart = document.activeElement.selectionStart;
      }
      if (document.activeElement && isSelectable(document.activeElement) && document.activeElement.selectionEnd) {
        _document.activeElement.selectionEnd = document.activeElement.selectionEnd;
      }

      _document.lastActiveElement = {};// could be usefull, 'cause activElem is button when clicked
      _document.lastActiveElement.dataFieldId = app.formController.getLastFocusedDataFieldId();

      return _document;
      function isSelectable(element) {
        if (element.tagName == "INPUT") {
          if (element.type == "password" || element.type == "search" || element.type == "text") {
            return true;
          }
        } else if (element.tagName == "TEXTAREA") {
          return true;
        }
        return false;
      }
    },

    _setupComponentsData : function() {
      var _components = {};
      Object.keys(app.formController.fieldDictionary).forEach(function(key) {
        var temp = {};
        temp.key = key;
        temp.data = app.formController.getData(key);
        eval("_components['" + key + "'] = temp;");
      }, this);
      return _components;
    },

    _setupGridsData : function() {
      var _grids = {};
      for ( var key in this.grids) {
        var grid = this.grids[key];
        _grid = {};
        _grid.keyFieldName = grid.getDataView().getIdProperty();
        _grid.options = grid.getOptions();
        _grid.options.editorLock = null;// temporally fix
        _grid.columns = grid.getColumns();

        _grid.data = grid.getData();
        if (grid.getCurrentEditor() != null) {
          var targetCell = grid.getActiveCell(), //
          colId = grid.getColumnByIndex(targetCell.cell).getId();
          _grid.data.getRow(targetCell.row)[colId] = grid.getCurrentEditor().getValue();
        }
        _grid.activeCell = grid.getActiveCell();
        _grid.scrollTop_ = grid.scrollTop_;
        _grid.scrollLeft_ = grid.scrollLeft_;
        _grid.selectedRows = grid.getSelectedRows();
        _grid.selectedColumns = grid.getSelectedColumns();

        _grid.plugins = {};

        var cellRangeSelector = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.CELL_RANGE_SELECTOR);
        if (cellRangeSelector) {
          _grid.plugins.cellRangeSelector = {};
          _grid.plugins.cellRangeSelector.selectedRanges = cellRangeSelector.getSelectedRanges();
        }

        var columnSorter = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.COLUMN_SORTER);
        if (columnSorter) {
          _grid.plugins.columnSorter = {};
          _grid.plugins.columnSorter.currentColumnId = columnSorter.currentColumnId_;
          _grid.plugins.columnSorter.sortAsc = columnSorter.sortAsc_;
        }

        var multiColumnSort = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.MULTI_COLUMN_SORT);
        if (multiColumnSort) {
          _grid.plugins.multiColumnSort = {};
          var _sortOrderArray = [];
          multiColumnSort.getLastSortingConditions().forEach(function(sortOrder) {
            var _sortOrder = {};
            _sortOrder.ascending = sortOrder.ascending;
            _sortOrder.field = sortOrder.columnId;
            _sortOrderArray.push(_sortOrder);
          });
          _grid.plugins.multiColumnSort.sortOrderArray = _sortOrderArray;
        }

        var cellComment = grid.getPlugin(wap.fw.ui.SlickGrid.PluginKey.CELL_COMMENT);
        if (cellComment) {
          _grid.plugins.cellComment = {};
          _grid.plugins.cellComment.commentAll = cellComment.getCommentAll();
        }

        eval("_grids['" + key + "'] = _grid;");
      }
      return _grids;
    },

  });

  // クラス名を使った自動インスタンス化はdocument.readyで行うこと。
  // $(function(){})と書くと渡した関数をdocument.readyで実行してくれます。(jQueryの仕組み)
  $(function() {
    var autoInstantiationClass = $.wap.inputResumer.prototype.widgetFullName;// プラグイン外部から既定のクラス名をとるときはこう書きます。
    $('.' + autoInstantiationClass).inputResumer();
  });

}(jQuery));

/**
 * wap.slidePanel
 * 
 * @author murata_d
 */
(function($) {
  $.widget('wap.slidePanel', $.wap.abstractWidget, {

    options : {
      area : null, // area panel will show.
      showButton : false,
      isOverlay : {
      	desktop: false,
      	phone: false,
      	tablet: false
      },
      showLandscape : false,
      slideBody : null,
    },
    _create : function() {
      this._initShowType();
      this._initPanel();
      this._showButton();
      this._handleOrientationChange();
    },

    _elementSize : {
      height : 0,
      width : 0
    },

    SHOW_TYPE_LIST : {
    	DESKTOP_SLIDE : 1,
    	DESKTOP_OVERLAY : 2,
    	PHONE_SLIDE : 3,
    	PHONE_OVERLAY : 4,
    	TABLET_SLIDE : 5,
    	TABLET_OVERLAY : 6
    },

    _showType : null, 

    _hideStyle : null,

    _showStyle : null,

    _hideStyleForBody : null,

    _showStyleForBody : null,

    _showStyleForBtn : null,

    _hideStyleForBtn : null,

    _scrollTop : 0,

    _scrollMode : 'down',

    _$slideBodyElm : null,

    _$transparentBody : null,

    _$toggleBtn : null,

    _dblTapFlg : false,

    _initShowType : function(){
    	if(deviceInfo.desktop()){
    		this._showType = this.options.isOverlay.desktop ? this.SHOW_TYPE_LIST.DESKTOP_OVERLAY : this.SHOW_TYPE_LIST.DESKTOP_SLIDE;
    	}else if(deviceInfo.tablet()){
    		this._showType = this.options.isOverlay.tablet ? this.SHOW_TYPE_LIST.TABLET_OVERLAY : this.SHOW_TYPE_LIST.TABLET_SLIDE;
    	}else if(deviceInfo.mobile()){
    		this._showType = this.options.isOverlay.phone ? this.SHOW_TYPE_LIST.PHONE_OVERLAY : this.SHOW_TYPE_LIST.PHONE_SLIDE;
    	}
    },

    _initPanel : function() {
      if(!this.element.hasClass('slidePanel')){
      	this.element.addClass('slidePanel');
      }
      this.element.addClass(this.options.area);
      this._elementSize.height = this.element.height();
      this._elementSize.width = this.element.width();
      switch (this.options.area) {
      case "left":
        this._hideStyle = "left:-" + this._elementSize.width + "px;";
        this._hideStyleForBody = "padding-left:0px;";
        this._showStyle = "left:0px;";
        this._showStyleForBody = "padding-left:" + this._elementSize.width + "px;";
        this._showStyleForBtn = "left:" + this._elementSize.width + "px;";
        if(this._showType == this.SHOW_TYPE_LIST.PHONE_SLIDE){
        	this._showStyleForBody = this._showStyleForBody + "right:-" + this._elementSize.width + "px;";
        }
        break;
      case "right":
        this._hideStyle = "right:-" + this._elementSize.width + "px;";
        this._hideStyleForBody = "padding-right:0px;";
        this._showStyle = "right:0px;";
        this._showStyleForBody = "padding-right:" + this._elementSize.width + "px;";
        this._showStyleForBtn = "right:" + this._elementSize.width + "px;";
        if(this._showType == this.SHOW_TYPE_LIST.PHONE_SLIDE){
        	this._showStyleForBody = this._showStyleForBody + "left:-" + this._elementSize.width + "px;";
        }
        break;
      case "top":
        this._hideStyle = "top:-" + this._elementSize.height + "px;";
        this._hideStyleForBody = "top:0px;";
        this._showStyle = "top:0px; display:block;";
        this._showStyleForBody = "padding-top:" + this._elementSize.height + "px;";
        this._showStyleForBtn = "top:" + this._elementSize.height + "px;";
        break;
      case "bottom":
        this._hideStyle = "bottom:-" + this._elementSize.height + "px;";
        this._hideStyleForBody = "bottom:0px;";
        this._showStyle = "bottom:0px; display:block;";
        this._showStyleForBody = "padding-bottom:" + this._elementSize.height + "px;";
        this._showStyleForBtn = "bottom:" + this._elementSize.height + "px;";
        break;
      default:
        console.log('Not acceptable showing area.');
        break;
      }
      this.element.attr('style', this._hideStyle);
      if (this.options.slideBody) {
        this._$slideBodyElm = this.options.slideBody;
      } else {
        this._$slideBodyElm = $('body')[0];
      }
      this._$slideBodyElm.classList.add('animate');
      if ($('.clearPanel').length < 1) {
        this._$transparentBody = $("<div/>");
        this._$transparentBody.addClass('clearPanel');
        if(deviceInfo.tablet()){
        	this._$transparentBody.addClass('tablet');
        }
        this._$slideBodyElm.appendChild(this._$transparentBody[0]);
      } else {
        this._$transparentBody = $('.clearPanel');
      }
      var that = this;
      this._$transparentBody.on('click touchend',function(){
        that.hide();
      });
      if(!deviceInfo.desktop()){
      	this._prependDblTap();
      }
    },

    _showButton : function(){
    	if(this.options.showButton){
    		var icon = $('<i/>').addClass('wap-icon-menulist  icon-size-32');
    		this._$toggleBtn = $('<button/>').addClass('slidePanelBtn').addClass(this.options.area);
    		this._$toggleBtn.append(icon);
    		this._$slideBodyElm.appendChild(this._$toggleBtn[0]);
    		var eventName = deviceInfo.desktop() ? 'click' : 'touchend';
    		var that = this;
			this._$toggleBtn.on(eventName,function(e){
				e.preventDefault();
				that.toggle();
			});
			if(this.options.area == "bottom"){
				if(deviceInfo.desktop()){
					this._handleWithPageTop();
				}else{
					this._handleWithPageTopTouch();
				}
			};
    	}
    },

    _handleWithPageTop : function(){
    	var that = this;
    	var $pageTop = $('.btn-page-top');
    	if($pageTop.length < 1){
    		return;
    	};
    	window.onscroll = function(){
    		if(that._scrollTop > $(this).scrollTop()){
    			that._$toggleBtn.hide();
    			$pageTop.show();
    		}else{
    			$pageTop.hide();
    			that._$toggleBtn.show();
    		}
    		that._scrollTop = $(this).scrollTop();
    	};
    },

    _handleWithPageTopTouch : function(){
    	var that = this;
    	var $pageTop = $('.btn-page-top');
    	if($pageTop.length < 1){
    		return;
    	};
    	window.onscroll = function(){
    		if ('none' != that._$toggleBtn.css('display')){
    			$pageTop.hide();
    		}
    	}
    	$(document).on("touchmove", function(){
    		if(that._scrollTop > $(this).scrollTop()){
    			that._$toggleBtn.hide();
    			$pageTop.show();
    		}else{
    			that._$toggleBtn.show();
    			$pageTop.hide();
    		}
    		that._scrollTop = $(this).scrollTop();
    	});
    },

    _prependDblTap : function(){
    	var that = this;
    	this.element.on('touchstart',function(e){
    		if(that._dblTapFlg){
    			e.preventDefault();
    			that._dblTapFlg = false;
    			return;
    		}
    		that._dblTapFlg = true;
    		setTimeout(function(){
    			that._dblTapFlg = false;
    		},500);
    	});
    },

    _handleOrientationChange : function(){
    	var that = this;
    	if(deviceInfo.tablet() && this.options.showLandscape){
    		if(deviceInfo.landscape()){
    			this.showImmediate();
    		}
    		$(window).on('orientationchange',function(){
    			if(deviceInfo.landscape()){
    				that.showImmediate();
    			}else{
    				that.hideImmediate();
    			}
    		});
    	}
    },

    show : function() {
      this.element.attr('style', this._showStyle);
      if(this._showType == this.SHOW_TYPE_LIST.TABLET_OVERLAY){
      	this._$transparentBody.show();
      }
      if(this.options.showButton){
      	this._$toggleBtn.attr('style', this._showStyleForBtn);
      }
      if (this._showType == this.SHOW_TYPE_LIST.DESKTOP_SLIDE || 
    	this._showType == this.SHOW_TYPE_LIST.TABLET_SLIDE ||
    	this._showType == this.SHOW_TYPE_LIST.PHONE_SLIDE ) {
        this._$slideBodyElm.setAttribute('style', this._showStyleForBody);
      }
    },

    hide : function() {
      if(this._showType == this.SHOW_TYPE_LIST.TABLET_OVERLAY){
      	this._$transparentBody.hide();
      }
      this.element.attr('style', this._hideStyle);
      if(this.options.showButton){
      	this._$toggleBtn.attr('style', this._hideStyleForBody);
      }
      if (this._showType == this.SHOW_TYPE_LIST.DESKTOP_SLIDE || 
    	this._showType == this.SHOW_TYPE_LIST.TABLET_SLIDE ||
    	this._showType == this.SHOW_TYPE_LIST.PHONE_SLIDE ) {
        this._$slideBodyElm.setAttribute('style', this._hideStyleForBody);
      }
    },

    showImmediate : function() {
      this.element.attr('style', 'transition-property:none;' + this._showStyle);
      if(this._showType == this.SHOW_TYPE_LIST.TABLET_OVERLAY){
      	this._$transparentBody.show();
      }
      if(this.options.showButton){
      	this._$toggleBtn.attr('style', 'transition-property:none;' + this._showStyleForBtn);
      }
      if (this._showType == this.SHOW_TYPE_LIST.DESKTOP_SLIDE || 
    	this._showType == this.SHOW_TYPE_LIST.TABLET_SLIDE ||
    	this._showType == this.SHOW_TYPE_LIST.PHONE_SLIDE ) {
        this._$slideBodyElm.setAttribute('style', 'transition-property:none;' + this._showStyleForBody);
      }
    },

    hideImmediate : function() {
      if(this._showType == this.SHOW_TYPE_LIST.TABLET_OVERLAY){
      	this._$transparentBody.hide();
      }
      this.element.hide();
      if(this.options.showButton){
      	this._$toggleBtn.attr('style', 'transition-property:none;' + this._hideStyleForBody);
      }
      if (this._showType == this.SHOW_TYPE_LIST.DESKTOP_SLIDE || 
    	this._showType == this.SHOW_TYPE_LIST.TABLET_SLIDE ||
    	this._showType == this.SHOW_TYPE_LIST.PHONE_SLIDE ) {
        this._$slideBodyElm.setAttribute('style', 'transition-property:none;' + this._hideStyleForBody);
      }
    },

    toggle : function() {
      if (this.element.attr('style') == this._hideStyle) {
        this.show();
      } else {
      	this.hide();
      }
    },

  });
}(jQuery));

deviceInfo = {};
deviceInfo = {
  _user_agent : "",

  /**
   * @returns {boolean} whether iOS
   */
  ios : function() {
    return deviceInfo.iphone() || deviceInfo.ipod() || deviceInfo.ipad();
  },

  /**
   * @returns {boolean} whether iPhone
   */
  iphone : function() {
    return deviceInfo._find('iphone');
  },

  /**
   * @returns {boolean} whether iPod
   */
  ipod : function() {
    return deviceInfo._find('ipod');
  },

  /**
   * @returns {boolean} whether iPad
   */
  ipad : function() {
    return deviceInfo._find('ipad');
  },

  /**
   * @returns {boolean} whether android
   */
  android : function() {
    return deviceInfo._find('android');
  },

  /**
   * @returns {boolean} whether android Phone
   */
  androidPhone : function() {
    return deviceInfo.android() && deviceInfo._find('mobile');
  },

  /**
   * @returns {boolean} whether android Tablet
   */
  androidTablet : function() {
    return deviceInfo.android() && !deviceInfo._find('mobile');
  },

  /**
   * @returns {boolean} whether BlackBerry
   */
  blackberry : function() {
    return deviceInfo._find('blackberry') || deviceInfo._find('bb10') || deviceInfo._find('rim');
  },

  /**
   * @returns {boolean} whether BlackBerry Phone
   */
  blackberryPhone : function() {
    return deviceInfo.blackberry() && !deviceInfo._find('tablet');
  },

  /**
   * @returns {boolean} whether BlackBerry Tablet
   */
  blackberryTablet : function() {
    return deviceInfo.blackberry() && deviceInfo._find('tablet');
  },

  /**
   * @returns {boolean} whether Windows
   */
  windows : function() {
    return deviceInfo._find('windows');
  },

  /**
   * @returns {boolean} whether Windows Phone
   */
  windowsPhone : function() {
    return deviceInfo.windows() && deviceInfo._find('phone');
  },

  /**
   * @returns {boolean} whether Windows Tablet
   */
  windowsTablet : function() {
    return deviceInfo.windows() && deviceInfo._find('touch');
  },

  /**
   * @returns {boolean} whether FireFoxOS
   */
  fxos : function() {
    return (deviceInfo._find('(mobile;') || deviceInfo._find('(tablet;')) && deviceInfo._find('; rv:');
  },

  /**
   * @returns {boolean} whether FireFox Phone
   */
  fxosPhone : function() {
    return deviceInfo.fxos() && deviceInfo._find('mobile');
  },

  /**
   * @returns {boolean} whether FireFox Tablet
   */
  fxosTablet : function() {
    return deviceInfo.fxos() && deviceInfo._find('tablet');
  },

  /**
   * @returns {boolean} whether meego
   */
  meego : function() {
    return deviceInfo._find('meego');
  },

  /**
   * @returns {boolean} whether cordova
   */
  cordova : function() {
    return window.cordova && location.protocol === 'file:';
  },

  /**
   * @returns {boolean} whether smart-phone terminal
   */
  mobile : function() {
    return deviceInfo.androidPhone()
        || deviceInfo.iphone()
        || deviceInfo.ipod()
        || deviceInfo.windowsPhone()
        || deviceInfo.blackberryPhone()
        || deviceInfo.fxosPhone()
        || deviceInfo.meego();
  },

  /**
   * @returns {boolean} whether tablet terminal
   */
  tablet : function() {
    return deviceInfo.ipad()
        || deviceInfo.androidTablet()
        || deviceInfo.blackberryTablet()
        || deviceInfo.windowsTablet()
        || deviceInfo.fxosTablet();
  },

  /**
   * @returns {boolean} whether desktop terminal
   */
  desktop : function() {
    return !deviceInfo.tablet() && !deviceInfo.mobile();
  },

  /**
   * @returns {boolean} whether portrait
   */
  portrait : function() {
    return (window.innerHeight / window.innerWidth) > 1;
  },

  /**
   * @returns {boolean} whether landscape
   */
  landscape : function() {
    return (window.innerHeight / window.innerWidth) < 1;
  },

  /**
   * @param {string}
   * @returns {boolean} whether argument string is included in user agent string
   */
  _find : function(needle) {
    return deviceInfo._user_agent.indexOf(needle) !== -1;
  }
};

deviceInfo._user_agent = window.navigator.userAgent.toLowerCase();

/*
 * offlineAlert @author nishio_t
 */
window.offLineFlg = null;

(function($) {
  $.widget('wap.offlineAlert', $.wap.abstractWidget, {
    options : {
      alertMessage : '',
      warningMessage : '',
      infoMessage : ''
    },

    _create : function() {
      this._super();// 継承元を呼びます。これを呼ぶとhtmlのデータアトリビュートをcamelCaseした内容をthis.optionsにマージしてくれます。
      this._createDom();
      this._initDisplayStatus();
      this._eventBind();
    },

    _createDom : function() {
      var $targetElement = $(this.element);
      var $alertArea = '<div class="col-xs-12"><div class="alert alert-danger"><div class="media-left">'
          + '<i class="wap-icon-blocked"></i>&nbsp;<strong>'
          + this.options.alertMessage
          + '</strong></div></div></div>';
      var $warningArea = '<div class="col-xs-12">'
          + '<div class="alert alert-warning">'
          + this.options.warningMessage
          + '</div>'
          + '</div>';
      var $infoArea = '<div class="col-xs-12">'
          + '<div class="alert alert-info">'
          + this.options.infoMessage
          + '</div>'
          + '</div>';
      $targetElement.append($alertArea);

      if (this.options.warningMessage !== '') {
        $targetElement.append($warningArea);
      }

      if (this.options.infoMessage !== '') {
        $targetElement.append($infoArea);
      }
    },

    _removeDom : function() {
      var $targetElement = $(this.element);
      $targetElement.html("");
    },

    _initDisplayStatus : function() {
      var $targetElement = $(this.element);
      if (navigator.onLine === true) {
        window.offLineFlg = false;
        $targetElement.hide();
      } else if (navigator.onLine === false) {
        window.offLineFlg = true;
        $targetElement.show();
      }
    },

    _eventBind : function() {
      var $targetElement = $(this.element);
      $(window).on("offline", function(e) {
        $targetElement.show();
        window.offLineFlg = true;
      });
      $(window).on("online", function(e) {
        $targetElement.hide();
        window.offLineFlg = false;
      });
    },

    changeMessage : function(alertMessage, warningMessage, infoMessage) {
      this.options.alertMessage = alertMessage;
      this.options.warningMessage = warningMessage;
      this.options.infoMessage = infoMessage;
      this._removeDom();
      this._createDom();
      return this;
    },

    hide : function() {
      var $targetElement = $(this.element);
      $targetElement.hide();
    },

    show : function() {
      var $targetElement = $(this.element);
      $targetElement.show();
    },

  });
}(jQuery));
pullToRefresh = {};
pullToRefresh = {
  startTxt : "<span style='font-size:31px;'><i class='wap-icon-arrow-down'></i><b>pull to refresh</b></span>",
  limitTxt : "<span style='font-size:31px;'><i class='wap-icon-arrow-up'></i><b>release to refresh</b></span>",
  loadTxt : "<i class='fa fa-3x wap-icon-refresh fa-spin' state='non-flip'></i><span style='font-size:31px;'><b> loading...</b></span>",

  maxpx : 50,
  pullLimit : 150,
  hd : "pullToRefreshHead",
  head : function() {
    return document.getElementsByClassName(pullToRefresh.hd)[0];
  },
  messageStatus : 1,// 1:'pull..' 2:'release..'
  firstDownY : 0,
  nowY : 0,
  isDragging : false,
  isLimited : false,
  mouseDown : function(e) {
    if (document.body.scrollTop == 0 && pullToRefresh.head() != null) {

      /* 初期化 */
      pullToRefresh.head().style.overflowY = 'hidden';
      pullToRefresh.head().style.margin = '0px';
      pullToRefresh.head().style.textAlign = 'center';
      pullToRefresh.head().innerHTML = pullToRefresh.startTxt;
      document.getElementsByClassName(pullToRefresh.hd)[0].style.display = "block";
      pullToRefresh.head().style.height = 0 + "px";
      pullToRefresh.firstDownY = 0;
      pullToRefresh.nowY = 0;
      pullToRefresh.isLimited = false;
      pullToRefresh.isDragging = true;

      if (e.touches == undefined) {
        pullToRefresh.firstDownY = e.pageY;
        pullToRefresh.nowY = e.pageY;
      } else {
        pullToRefresh.firstDownY = e.touches[0].pageY;
        pullToRefresh.nowY = e.touches[0].pageY;
      }
    }
  },
  mouseMoving : function(e) {
    if (document.body.scrollTop == 0
        && (e.touches[0].pageY - pullToRefresh.firstDownY) > 0
        && pullToRefresh.head() != null) {
      e.preventDefault();
    }
    if (pullToRefresh.isDragging && pullToRefresh.head() != null) {
      pullToRefresh.nowY = e.touches[0].pageY;
      pullToRefresh.isLimited = true;
      var d = e.touches[0].pageY - pullToRefresh.firstDownY;
      if (d > pullToRefresh.pullLimit) {
        return;
      }
      if (d > pullToRefresh.maxpx && pullToRefresh.messageStatus === 1) {
        pullToRefresh.head().innerHTML = pullToRefresh.limitTxt;
        pullToRefresh.messageStatus = 2;
      } else if (d < pullToRefresh.maxpx && pullToRefresh.messageStatus === 2) {
        pullToRefresh.head().innerHTML = pullToRefresh.startTxt;
        pullToRefresh.messageStatus = 1;
      }
      pullToRefresh.head().style.height = d + "px";
    }
  },
  mouseUp : function() {
    pullToRefresh.cancelDrag();
    pullToRefresh.headClose();
  },
  headClose : function() {
    /* アニメーションの一部にjQueryを使用 */
    //
    if ((pullToRefresh.nowY - pullToRefresh.firstDownY) >= pullToRefresh.maxpx && pullToRefresh.head() != null) {
      $("." + pullToRefresh.hd).animate({
        height : pullToRefresh.maxpx + 'px'
      });
      pullToRefresh.head().innerHTML = pullToRefresh.loadTxt;
      pullToRefresh.callback();
      setTimeout(function() {
        $("." + pullToRefresh.hd).slideUp();
      }, 500);
    } else {
      $("." + pullToRefresh.hd).slideUp();
    }

  },
  setCoin : function(cb) {
    pullToRefresh.callback = cb;
  },
  limitedUp : function() {
    if (pullToRefresh.isLimited) {
      pullToRefresh.isLimited = false;
      pullToRefresh.mouseUp();
    }
  },
  cancelDrag : function() {
    pullToRefresh.isDragging = false;
  },
};

/* DOMとイベントの設置 */
if (false && $(document.body).has(".pullToRefreshHead").length === 0) {
  $(document.body).prepend("<div class='pullToRefreshHead'></div>");
}
if ($(document.body).has(".pullToRefreshHead").length === 1) {
  window.addEventListener("touchstart", pullToRefresh.mouseDown, false);
  window.addEventListener("touchmove", pullToRefresh.mouseMoving, false);
  window.addEventListener("touchend", pullToRefresh.limitedUp, false);
}

pullToRefresh.setCoin(function() {
  window.location.reload();
});
/*
 * @fileoverview autocomplete for SmartDevice.
 * suggest lists will not hide automatically with focus out.
 * @author murata_d@worksap.co.jp
 */

(function($) {
  $.widget('wap.smartDeviceAutocomplete', $.wap.abstractWidget, {

    options : {
      limit : 5,
      data : []
    },

    $input : null,
    $suggest : null,
    $parent : null,
    _bloodhound : null,

    _height : null,

    _create : function() {
      this._super();
      this.$parent = this.element.parent();
      this.$input = this.element;
      this._height = this.element.outerHeight();
      this._initBloodhound();
      this._bindEvents();
    },

    _destroy : function() {

    },

    _initBloodhound : function(){
      this._bloodhound = new Bloodhound({
        name: 'autocomplete',
        local: this.options.data,
        datumTokenizer: function(d) {
          function createDatum(str, num){
            var d = [];
            for (var i = 0; i < str.length-num; i++) {
              d.push(str.slice(i,i + num +1));
            };
            return d;
          };
          var arr = d.split('\s');
          var datum = [];
          arr.forEach(function(array){
            for (var i = 0; i < array.length; i++) {
              datum = datum.concat(createDatum(array,i));
            };
          });
          return datum;
        },
        limit: this.options.limit,
        queryTokenizer: Bloodhound.tokenizers.whitespace
      });
      this._bloodhound.initialize();
    },

    _bindEvents : function(){
      var that = this;
      this.$input.on('keyup focus',function(){
        that._search();
      });
    },

    _search : function(){
      var that = this;
      var txt = this.$input.val();
      this._bloodhound.get(txt,function(resArr){
        that._suggest(resArr);
      });
    },

    _suggest : function(result){
      var that = this;
      if (result.length === 0){
        //console.log('no matched candidates.');
      };
      var suggests = "<div class='wap-suggest-area'>";
      result.forEach(function(txt){
        suggests += that._createSuggestDom(txt);
      });
      suggests += "</div>";
      if(this.$suggest !== null){
        this.$suggest.remove();
      }
      this.$suggest = $(suggests);
      this.$parent.append(this.$suggest);
      this.$suggest.find('.wap-suggest').on('click',function(e){
        that.$input.val($(this).text());
        that.hide();
        e.preventDefault();
      });
    },

    _createSuggestDom : function(text){
      return '<div class="wap-suggest" style="height:' + this._height + 'px;">' + text + '</div>';
    },

    hide : function(){
      this.$suggest.hide();
    },

  });

}(jQuery));
/*
 * Custom events peculiar to SmartDevice. @author murata_d
 */

(function($) {
  $.widget('wap.smartDeviceComponents', $.wap.abstractWidget, {
    options : {
      swipemove : false,
      rightmoveFunc: null,
      leftmoveFunc: null,
    },

    _create : function() {
      this._super();
      this.startx = 0;
      this.starty = 0;
      this.movex = 0;
      this.currentx = 0;
      this.endx = 0;
      this.endy = 0;
      this.gestureStartx = 0;
      this.gestureStarty = 0;
      this.dblTapFlg = false;
      this.longTapFlg = false;
      this.simpleTouchFlg = true;
      this.left = 0;
      this._initEventHandler();
    },

    _initEventHandler : function() {
      var that = this;
      var touch = null;
      var changedTouch = null;
      this.element.on('touchstart touchmove touchend gesturestart gesturechange gestureend', function(e) {
        switch (e.type) {
        case "touchstart":
          e.preventDefault();
          touches = e.originalEvent.touches;
          that.startx = touches[0].clientX;
          that.starty = touches[0].clientY;
          if (touches.length > 1) {
            that.gestureStartx = (touches[1].clientX + that.startx) / 2;
            that.gestureStarty = (touches[1].clientY + that.starty) / 2;
          }
          var elm = $(that.element);
          if (that.dblTapFlg) {
            elm.trigger("dblTap");
            that.dblTapFlg = false;
          }
          setTimeout(function() {
            if (that.longTapFlg) {
              elm.trigger("longTap");
              that.longTapFlg = false;
            }
          }, 1000);
          setTimeout(function() {
            that.dblTapFlg = false;
          }, 500);
          that.longTapFlg = true;
          that.dblTapFlg = true;
          that.simpleTouchFlg = true;
          break;
        case "touchmove":
          e.preventDefault();
          that.simpleTouchFlg = false;
          if(that.options.swipemove){
            changedTouches = e.originalEvent.changedTouches;
            that.movex = changedTouches[0].clientX;
            var xmove = that.movex - that.startx;
            if(Math.abs(xmove - that.currentx) > 30){
              that.currentx = xmove;
              that.element[0].style.left = that.left + xmove + 'px';
            }
          }
          break;
        case "touchend":
          e.preventDefault();
          changedTouches = e.originalEvent.changedTouches;
          that.endx = changedTouches[0].clientX;
          that.endy = changedTouches[0].clientY;
          that.longTapFlg = false;
          var xmove = that.endx - that.startx;
          var ymove = that.endy - that.starty;
          if (Math.abs(xmove) > 20 || Math.abs(ymove) > 20) {
            $(that.element).trigger(
                "swipe",
                ((Math.abs(xmove) - Math.abs(ymove)) > 0) ? ((xmove > 0) ? "right" : "left") : ((ymove > 0) ? "down"
                    : "top"));
          };
          if(that.options.swipemove){
            if(xmove > 100){
              if(that.options.rightmoveFunc){
                that.options.rightmoveFunc(that.element);
                that.element[0].style.left = "";
              }else{
                that._remove();
              }
            }else if(xmove < -100){
              if(that.options.leftmoveFunc){
                that.options.leftmoveFunc(that.element);
                that.element[0].style.left = "";
              }else{
                that._remove();
              }
            }else{
              that.element[0].style.left = "";
            }
          }

          if(that.simpleTouchFlg){
            $(that.element).trigger("touch");
          };
          break;
        case "gesturestart":
          e.preventDefault();
          break;
        case "gesturechange":
          e.preventDefault();
          $(that.element).trigger("pinching", [
            e.originalEvent.scale, that.gestureStartx, that.gestureStarty
          ]);
          break;
        case "gestureend":
          e.preventDefault();
          if (e.originalEvent.scale > 1) {
            $(that.element).trigger("pinchout", [
              e.originalEvent.scale, that.gestureStartx, that.gestureStarty
            ]);
          } else {
            $(that.element).trigger("pinchin", [
              e.originalEvent.scale, that.gestureStartx, that.gestureStarty
            ]);
          }
          break;
        }
      });
    },

    _remove : function(){
      var $elm = $(this.element);
      $elm.fadeTo(250,0,function(){$elm.remove();});
    }
  });
}(jQuery));
(function($) {
  $.widget('wap.stepNavi', $.wap.abstractWidget, {
    options : {
      position : 1, // 1 origin
      color : undefined,
      operatable : false,
      navisize : 'medium'
    },

    _SIZE : {
      XS : {// 30%
        option : 'extrasmall',
        classProgress : 'wap-step-navi-progress-size-xs',
        classCircle : 'wap-step-navi-circle-size-xs',
        fontSizeNormal : '30%',
        fontSizeCurrent : '45%'
      },
      S : {// 50%
        option : 'small',
        classProgress : 'wap-step-navi-progress-size-s',
        classCircle : 'wap-step-navi-circle-size-s',
        fontSizeNormal : '50%',
        fontSizeCurrent : '75%'
      },
      M : {// 100%
        option : 'medium',
        classProgress : 'wap-step-navi-progress-size-m',
        classCircle : 'wap-step-navi-circle-size-m',
        fontSizeNormal : '100%',
        fontSizeCurrent : '150%'
      }
    // ,
    // L : {// 150%
    // option : 'large',
    // classProgress : 'wap-step-navi-progress-size-l',
    // classCircle : 'wap-step-navi-circle-size-l',
    // fontSizeNormal : '100%',
    // fontSizeCurrent : '150%'
    // },
    // XL : {// 200%
    // option : 'extralarge',
    // classProgress : 'wap-step-navi-progress-size-xl',
    // classCircle : 'wap-step-navi-circle-size-xl',
    // fontSizeNormal : '100%',
    // fontSizeCurrent : '150%'
    // }
    },

    _sizeObj : null,

    // コンストラクタ
    _create : function() {
      this._super();
      this.stepCount = 0;
      if (this.element.attr('data-position')) {
        this.options.position = parseInt(this.element.attr('data-position'));
      }
      if (this.element.attr('data-color')) {
        this.options.color = this.element.attr('data-color');
      }
      if (this.element.attr('data-operatable')) {
        this.options.operatable = this.element.attr('data-operatable');
      }
      this._setSizeOptionAndObj();
      this._prepare();
      this._refresh();
    },

    // デストラクタ
    _destroy : function() {
    },

    _setSizeOptionAndObj : function() {
      if (!this.element.attr('data-navisize')) {
        setDefault(this);
        return;
      }
      var specified = this.element.attr('data-navisize');
      for ( var key in this._SIZE) {
        if (this._SIZE[key].option === specified) {
          this.options.navisize = this._SIZE[key].option;
          this._sizeObj = this._SIZE[key];
          return;
        }
      }
      console.error('【StepNavi】invalid navi size is specified, so medium is set. stepNavi:' + specified);
      setDefault(this);
      return;

      function setDefault(widget) {
        widget.options.navisize = widget._SIZE.M.option;
        widget._sizeObj = widget._SIZE.M;
      }
    },

    _prepare : function() {
      var $stepProgress = $('<div />').addClass('steps-progress').addClass(this._sizeObj.classProgress);
      var $indicator = this.element.find('.progress-indicator');
      $indicator.css('background-color', this._getColor());
      $indicator.wrapAll($stepProgress);
      var $form = $('<form />').attr('method', 'post').addClass('form-horizontal').addClass('form-wizard');
      this.element.children().wrapAll($form);
      this._applyOperatable();
    },

    _applyOperatable : function() {
      var that = this;
      var $lis = this.element.find('ul>li');
      $.each($lis, function(index, li) {
        $(li).off('click');
        if (that.options.operatable) {
          $(li).on('click', function() {
            that.changeStep(index + 1);
          });
        }
      });
      $lis.find('a span').addClass(this._sizeObj.classCircle);
    },

    _refresh : function() {
      var $steps = this.element.find('ul>li');
      if (this.stepCount != $steps.length) {
        // change step count
        this.element.find('.steps-progress').removeClass(function(index, css) {
          return (css.match(/\bbar-steps-\S+/g) || []).join(' ');
        });
        var className = 'bar-steps-';
        if ($steps.length > 10) {
          className = className + 'over-10';
        } else {
          className = className + $steps.length;
        }
        this.element.find('.steps-progress').addClass(className);
      }
      this.stepCount = $steps.length;
      var that = this;
      var progressWidth = 0;
      $.each($steps, function(index, step) {
        var $step = $(step);
        var $span = $step.find('span');
        var $label = $step.find('label');
        var statusClass = '';
        var cursorStyle = that.options.operatable ? 'pointer' : 'auto';
        if (index + 1 < that.options.position) {
          statusClass = 'completed';
          $span.css('background-color', that._getColor());
          $span.css('box-shadow', '0px 0px 0px 3px ' + that._getColor());
          $span.css('color', '#FFFFFF');
          $span.css('font-size', that._sizeObj.fontSizeNormal);
          $span.css('cursor', cursorStyle);
          $label.css('color', that._getColor());
          $label.css('font-weight', 'normal');
        } else if (index + 1 == that.options.position) {
          statusClass = 'active';
          $span.css('background-color', '');
          $span.css('box-shadow', '0px 0px 0px 3px ' + that._getColor());
          $span.css('color', that._getColor());
          $span.css('font-size', that._sizeObj.fontSizeCurrent);
          $span.css('cursor', cursorStyle);
          $label.css('color', that._getColor());
          $label.css('font-weight', 'bold');
        } else {
          $span.css('background-color', '#ebebeb');
          $span.css('box-shadow', '0px 0px 0px 3px #ebebeb');
          $span.css('color', '#8e9094');
          $span.css('font-size', that._sizeObj.fontSizeNormal);
          $span.css('cursor', cursorStyle);
          $label.css('color', '#8e9094');
          $label.css('font-weight', 'normal');
        }
        $step.addClass(statusClass);

        // calculate bar width
        if (index + 1 < that.options.position) {
          if (index == 0) {
            progressWidth += $step.width() / 2;
          } else {
            progressWidth += $step.width();
          }
        } else if (index > 0 && index + 1 == that.options.position) {
          progressWidth += $step.find('span').position().left;
        }
      });
      var $indicator = this.element.find('.progress-indicator');
      var parsent = progressWidth * 100 / this.element.find('.steps-progress').width();
      $indicator.css('width', parsent + '%');
    },

    _getColor : function() {
      return this.options.color || '#4285f4';
    },

    nextStep : function() {
      if (this.options.position < this.stepCount) {
        this.options.position++;
      }
      this._refresh();
    },

    previousStep : function() {
      if (this.options.position > 1) {
        this.options.position--;
      }
      this._refresh();
    },

    changeStep : function(stepNumber) {
      if (stepNumber > 0 && stepNumber <= this.stepCount) {
        this.options.position = stepNumber;
      }
      this._refresh();
    },

    setOperatable : function(enabled) {
      this.options.operatable = enabled;
      this._applyOperatable();
      this._refresh();
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.stepNavi.prototype.widgetFullName;
    $('.' + autoInstantiationClass).stepNavi({});
  });

}(jQuery));

/**
 * @fileoverview Sticky Label (aka. Post it, ふせん) Design Selector Component.
 * @author tsujii_n
 * 
 * Copyright (C) 2014 Works Applications Co., Ltd. All rights reserved.
 */

(function($) {
  // ------------------------------------------------------------------------
  // constants
  // ------------------------------------------------------------------------
  var TYPE = 'wap.stickyLabelDesignSelector', //

  RAWCLS_STICKY_LABEL_DESIGN_SELECT_DLG = 'wap-stickyLabel-designSelectDlg', //
  CLS_STICKY_LABEL_DESIGN_SELECT_DLG = '.' + RAWCLS_STICKY_LABEL_DESIGN_SELECT_DLG, //
  CLS_SAVE_CHANGES = '.save-changes', //
  RAWCLS_WAP_STICKY_LABEL = 'wap-stickyLabel', //
  CLS_WAP_STICKY_LABEL = '.' + RAWCLS_WAP_STICKY_LABEL, //
  RAWCLS_STICKY_LABEL_WRAPPER = 'sticky-label-wrapper', //
  CLS_STICKY_LABEL_WRAPPER = '.' + RAWCLS_STICKY_LABEL_WRAPPER, //
  RAWCLS_SELECTED = 'selected', //
  CLS_SELECTED = '.' + RAWCLS_SELECTED, //

  ATTR_DATA_DESIGN_NAME = 'data-design-name', //

  EVENT_CLICK = 'click', //
  EVENT_DBLCLICK = 'dblclick', //

  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  /** @type {Array} array of design definitions */
  designs = [
    {
      name : 'Left blue',
      leftMarkerColorClass : 'bg-color-primary',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Right blue',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-primary'
    },

    {
      name : 'Blue',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-primary-soft',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Left sky',
      leftMarkerColorClass : 'bg-color-info',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Right sky',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-info'
    },

    {
      name : 'Sky',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-info-soft',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Left green',
      leftMarkerColorClass : 'bg-color-success',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Right green',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-success'
    },

    {
      name : 'Green',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-success-soft',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Left yellow',
      leftMarkerColorClass : 'bg-color-warning',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Right yellow',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-warning'
    },

    {
      name : 'Yellow',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-warning-soft',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Left red',
      leftMarkerColorClass : 'bg-color-danger',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'Right red',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-danger'
    },

    {
      name : 'Red',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-danger-soft',
      rightMarkerColorClass : 'bg-color-transparent'
    },

    {
      name : 'White',
      leftMarkerColorClass : 'bg-color-transparent',
      cardColorClass : 'bg-color-white',
      rightMarkerColorClass : 'bg-color-transparent'
    }
  ], //

  designMap = _arrayToMap(designs, 'name'); //

  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  $.widget(TYPE, $.wap.abstractWidget, {

    /**
     * options.
     */
    options : {
      /** @type {wap.stickyLabel} StickyLabel component. */
      stickyLabel : null,

      /** @type {Number} Selected design name. */
      selectedDesignName : 'White'
    },

    /**
     * @constructor
     */
    _create : function() {
      this._super();
      this._isDomCreated = false;
    }

  });

  // ------------------------------------------------------------------------
  // public methods
  // ------------------------------------------------------------------------
  /**
   * Open dialog.
   */
  $.wap.stickyLabelDesignSelector.prototype.open = function() {
    if (!this._isDomCreated) {
      this._createDom();
      setTimeout($.proxy(this._enterDocument, this), 100);
      this._isDomCreated = true;
    }

    this._selectDesignName(this.options.stickyLabel.options.designName);
    this.element.modal('show');
  };

  // ------------------------------------------------------------------------
  // private methods
  // ------------------------------------------------------------------------
  /**
   * Create DOM of this widget.
   */
  $.wap.stickyLabelDesignSelector.prototype._createDom = function() {
    var html = '' //
        + '  <div class="modal-dialog">' //
        + '    <div class="modal-content">' //
        //
        + '      <div class="modal-header">' //
        + '        <button type="button" class="close" data-dismiss="modal" aria-hidden="true">&times;</button>' //
        + '        <h4 class="modal-title">Select design</h4>' //
        + '      </div>' //
        //
        + '      <div class="modal-body">' //
        + '        <div class="row sticky-labels-wrapper">' //

        + '          {{#designs}}' //
        + '          <div class="col-sm-4 '
        + RAWCLS_STICKY_LABEL_WRAPPER
        + '" data-design-name="{{name}}">' //
        + '            <div>' //
        + '              <div class="'
        + RAWCLS_WAP_STICKY_LABEL
        + '" data-message="{{name}}<br>&nbsp;" data-design-name="{{name}}">' //
        + '              </div>' //
        + '            </div>' //

        + '          </div>' // .sticky-label-wrapper.col-sm-4
        + '          {{/designs}}' //

        + '        </div>' // .sticky-labels-wrapper
        + '      </div>' // .modal-body
        //
        + '      <div class="modal-footer">' //
        + '        <button type="button" class="btn btn-default close-dialog" data-dismiss="modal">Close</button>' //
        + '        <button type="button" class="btn btn-info save-changes" data-dismiss="modal">Save changes</button>' //
        + '      </div>' //
        //
        + '    </div>' // .modal-content
        + '  </div>' // .modal-dialog
    , //
    template = Hogan.compile(html); //

    this.element.append(template.render({
      designs : designs
    }));

    this.element.find(CLS_WAP_STICKY_LABEL).stickyLabel();

  };

  /**
   * Bind event.
   */
  $.wap.stickyLabelDesignSelector.prototype._enterDocument = function() {
    var self = this;

    // select sticky label
    this.element.on(EVENT_CLICK, CLS_STICKY_LABEL_WRAPPER, function(event) {
      var designName = $(event.currentTarget).attr(ATTR_DATA_DESIGN_NAME);
      self._selectDesignName(designName);
    });

    // double click sticky label
    this.element.on(EVENT_DBLCLICK, CLS_STICKY_LABEL_WRAPPER, function(event) {
      self.element.find(CLS_SAVE_CHANGES).trigger(EVENT_CLICK);
    });

    // click save changes button
    this.element.on(EVENT_CLICK, CLS_SAVE_CHANGES, function(event) {
      self.options.stickyLabel.setDesignName(self.options.selectedDesignName);
    });

  };

  /**
   * Select design name.
   * 
   * @param {String} designName
   * @private
   */
  $.wap.stickyLabelDesignSelector.prototype._selectDesignName = function(designName) {
    if (this.options.selectedDesignName === designName) {
      return;
    }

    this.options.selectedDesignName = designName;
    this.element.find(CLS_STICKY_LABEL_WRAPPER + CLS_SELECTED).removeClass(RAWCLS_SELECTED);
    this.element.find(CLS_STICKY_LABEL_WRAPPER + _getSelectorOfAttr(ATTR_DATA_DESIGN_NAME, designName)).addClass(
        RAWCLS_SELECTED);
  };

  // ------------------------------------------------------------------------
  // accessors
  // ------------------------------------------------------------------------
  /**
   * (setter) StickyLabel
   * 
   * @param {wap.stickyLabel} stickyLabel
   */
  $.wap.stickyLabelDesignSelector.prototype.setStickyLabel = function(stickyLabel) {
    this.options.stickyLabel = stickyLabel;
  };

  // ------------------------------------------------------------------------
  // public constants
  // ------------------------------------------------------------------------
  /** Design kind. */
  $.wap.stickyLabelDesignSelector.DesignKind = {
    CARD_COLOR : 'cardColorClass',
    LEFT_MARKER_COLOR : 'leftMarkerColorClass',
    RIGHT_MARKER_COLOR : 'rightMarkerColorClass'
  };

  // ------------------------------------------------------------------------
  // public static methods
  // ------------------------------------------------------------------------
  /**
   * Get design select dialog.
   * 
   * @returns {jQuery} dialog element.
   */
  $.wap.stickyLabelDesignSelector.getDialog = function() {
    var result = $(CLS_STICKY_LABEL_DESIGN_SELECT_DLG);

    if (0 === result.length) {
      result = $('<div class="' + RAWCLS_STICKY_LABEL_DESIGN_SELECT_DLG + ' modal fade"></div>')
          .stickyLabelDesignSelector().appendTo('body');
    }

    return result;
  };

  /**
   * Get design.
   * 
   * @param {String} name Design name.
   */
  $.wap.stickyLabelDesignSelector.getDesign = function(name) {
    return designMap[name];
  };

  // ------------------------------------------------------------------------
  // private static methods
  // ------------------------------------------------------------------------
  /**
   * (Selector getter) Attribute selector.
   * 
   * @param {String} attribute
   * @param {String} value.
   * @returns {String}
   * @private
   */
  function _getSelectorOfAttr(attribute, value) {
    return '[' + attribute + '="' + value + '"]';
  }

  /**
   * Convert array to map.
   * 
   * @param {Array} array
   * @param {String} key
   * @private
   */
  function _arrayToMap(array, key) {
    var result = {};
    $.each(array, function(index, value) {
      result[value[key]] = value;
    });
    return result;
  }
})(jQuery);

/**
 * @fileoverview Sticky Label (aka. Post it, ふせん) Message Editor Component.
 * @author tsujii_n
 * 
 * Copyright (C) 2014 Works Applications Co., Ltd. All rights reserved.
 */

(function($) {
  // ------------------------------------------------------------------------
  // constants
  // ------------------------------------------------------------------------
  var TYPE = 'wap.stickyLabelMessageEditor', //

  RAWID_STICKY_LABEL_EDIT_MESSAGE_DIALOG = 'wap-stickyLabelMessageEditor', //
  ID_STICKY_LABEL_EDIT_MESSAGE_DIALOG = '#' + RAWID_STICKY_LABEL_EDIT_MESSAGE_DIALOG, //

  RAWCLS_MESSAGE_INPUT = 'message-input', //
  CLS_MESSAGE_INPUT = '.' + RAWCLS_MESSAGE_INPUT, //
  RAWCLS_SAVE_CHANGES = 'save-changes', //
  CLS_SAVE_CHANGES = '.' + RAWCLS_SAVE_CHANGES, //

  RAWCLS_CLOSE_DIALOG = 'close-dialog', //
  CLS_CLOSE_DIALOG = '.' + RAWCLS_CLOSE_DIALOG, //

  EVENT_CLICK = 'click'; //

  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  $.widget(TYPE, $.wap.abstractWidget, {

    /**
     * options.
     */
    options : {
      /** @type {wap.stickyLabel} StickyLabel component. */
      stickyLabel : null,

      /** @type {String} Message. */
      message : ''
    },

    /**
     * @constructor
     */
    _create : function() {
      this._super();
      this._isDomCreated = false;
    }

  });

  // ------------------------------------------------------------------------
  // public methods
  // ------------------------------------------------------------------------
  /**
   * Open dialog.
   */
  $.wap.stickyLabelMessageEditor.prototype.open = function() {
    if (!this._isDomCreated) {
      this._createDom();
      setTimeout($.proxy(this._enterDocument, this), 100);
      this._isDomCreated = true;
    }

    this._setMessage(this.options.stickyLabel.options.message);
    this.element.modal('show');
  };

  // ------------------------------------------------------------------------
  // private methods
  // ------------------------------------------------------------------------
  /**
   * Create DOM of this widget.
   */
  $.wap.stickyLabelMessageEditor.prototype._createDom = function() {
    var html = '' //
        + '<div class="modal-dialog">' //
        + '  <div class="modal-content">' //
        + '    <div class="modal-header">' //
        + '      <button type="button" class="close close-dialog" data-dismiss="modal" aria-hidden="true">&times;</button>' //
        + '      <h4 class="modal-title">Edit Message</h4>' //
        + '    </div>' //

        + '    <div class="modal-body">' //
        + '      <div class="row">' //
        + '        <div class="col-md-6">' //
        + '          <div class="form-group">' //
        + '            <label for="field-1" class="control-label">Message</label>' //
        + '            <textarea id="field-1" class="form-control '
        + RAWCLS_MESSAGE_INPUT
        + '" cols="40" rows="3" placeholder="Input message"></textarea>' //
        + '          </div>' //
        + '        </div>' //
        + '      </div>' //
        + '    </div>' // .modal-body

        + '    <div class="modal-footer">' //
        + '      <button type="button" class="btn btn-default '
        + RAWCLS_CLOSE_DIALOG
        + '" data-dismiss="modal">Close</button>' //
        + '      <button type="button" class="btn btn-info '
        + RAWCLS_SAVE_CHANGES
        + '" data-dismiss="modal">Save changes</button>' //
        + '    </div>' //

        + '  </div>' //
        + '</div>' //
    ;

    this.element.append(html);
  };

  /**
   * Bind event.
   */
  $.wap.stickyLabelMessageEditor.prototype._enterDocument = function() {
    var self = this, //
    $messageInput = this.element.find(CLS_MESSAGE_INPUT);

    // click close button
    this.element.on(EVENT_CLICK, CLS_CLOSE_DIALOG, function(event) {
      self.options.stickyLabel.editorCloseCallback();
    });

    // click save changes button
    this.element.on(EVENT_CLICK, CLS_SAVE_CHANGES, function(event) {
      self.options.stickyLabel.setMessage($messageInput.val());
      self.options.stickyLabel.editorSaveCallback();
    });

  };

  /**
   * Set message.
   * 
   * @param {String} message
   * @private
   */
  $.wap.stickyLabelMessageEditor.prototype._setMessage = function(message) {
    var textareaMessage;
    if (this.options.message === message) {
      return;
    }

    this.options.message = message;
    textareaMessage = message;
    textareaMessage.replace(/\\n/g, "\n");
    this.element.find(CLS_MESSAGE_INPUT).val(message);
  };

  // ------------------------------------------------------------------------
  // accessors
  // ------------------------------------------------------------------------
  /**
   * (setter) StickyLabel
   * 
   * @param {wap.stickyLabel} stickyLabel
   */
  $.wap.stickyLabelMessageEditor.prototype.setStickyLabel = function(stickyLabel) {
    this.options.stickyLabel = stickyLabel;
  };

  // ------------------------------------------------------------------------
  // public static methods
  // ------------------------------------------------------------------------
  /**
   * Get message edit dialog.
   * 
   * @returns {jQuery.Widget} dialog widget.
   */
  $.wap.stickyLabelMessageEditor.getDialog = function() {
    var dlg = $(ID_STICKY_LABEL_EDIT_MESSAGE_DIALOG);

    if (0 === dlg.length) {
      dlg = $('<div class="' + RAWID_STICKY_LABEL_EDIT_MESSAGE_DIALOG + ' modal fade"></div>')
          .stickyLabelMessageEditor().appendTo('body');
    }

    return dlg.data($.wap.stickyLabelMessageEditor.prototype.widgetFullName);
  };

})(jQuery);

/**
 * @fileoverview Sticky Label (aka. Post it, ふせん) Component.
 * @author tsujii_n
 * 
 * Copyright (C) 2014 Works Applications Co., Ltd. All rights reserved.
 * 
 */

(function($) {
  // ------------------------------------------------------------------------
  // constants
  // ------------------------------------------------------------------------
  var TYPE = 'wap.stickyLabel', //

  RAWCLS_LEFT_MARKER = 'left-marker', //
  CLS_LEFT_MARKER = '.' + RAWCLS_LEFT_MARKER, //
  RAWCLS_CARD = 'card', //
  CLS_CARD = '.' + RAWCLS_CARD, //
  RAWCLS_RIGHT_MARKER = 'right-marker', //
  CLS_RIGHT_MARKER = '.' + RAWCLS_RIGHT_MARKER, //
  RAWCLS_EDIT_BUTTON = 'edit-button', //
  CLS_EDIT_BUTTON = '.' + RAWCLS_EDIT_BUTTON, //
  RAWCLS_DESIGN_BUTTON = 'design-button';
  CLS_DESIGN_BUTTON = '.' + RAWCLS_DESIGN_BUTTON, //
  RAWCLS_REMOVE_BUTTON = 'remove-button', //
  CLS_REMOVE_BUTTON = '.' + RAWCLS_REMOVE_BUTTON, //
  RAWCLS_MESSAGE_EDITOR = 'message-editor', //
  CLS_MESSAGE_EDITOR = '.' + RAWCLS_MESSAGE_EDITOR, //

  RAWCLS_EMP_INFO = 'wap-stickyLabel-emp-info', //
  RAWCLS_EMP_PIC = 'wap-stickyLabel-emp-pic', //
  RAWCLS_EMP_NAME = 'wap-stickyLabel-emp-name', //

  CLS_MESSAGE = '.message', //

  RAWCLS_EDITABLE = 'editable', //

  EVENT_CLICK = 'click'; //
  EVENT_KEYUP = 'keyup'; //

  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  $.widget(TYPE, $.wap.abstractWidget, {
    /**
     * options.
     */
    options : {
      /** @type {String} Sticky Label message. */
      message : '',

      /** @type {String} Author name. */
      author : '',

      /**
       * <b>Attention!!</b><br>
       * To use this variable you must <b>import employee-datautil.js</b>.<br>
       * And <b>the EMPLOYEE.Data must be loaded</b> ex.) EMPLOYEE.Data.load()<br>
       * When Employee number is set in this option, the label will show picture and name of the employee<br>
       * inside the label.
       * 
       * @type {String} Author employee number.If not null show picture and name.
       * @requires EMPLOYEE.Data
       */
      authorEmpNo : null,

      /** @type {Number} Design name. */
      designName : 'White',

      /** @type {boolean} Editable flag. */
      editable : false,

      /** @type {boolean} Direct Input flag. */
      directInput : false,

      /** @type {String} Selector of message edit dialog. */
      messageEditor : $.wap.stickyLabelMessageEditor,

      /** @type {Boolean} Draggable flag. */
      draggable : false,

      editorSaveCallback : function() {
      },

      /** This function will not be callded when it is directInput mode */
      editorCloseCallback : function() {
      },

      removeCallback : function() {
      }
    },

    /**
     * @constructor
     */
    _create : function() {
      /** @type {boolean} at least saved by user one time. */
      this.savedByUser = false;
      this.usedbyMyselft = false;
      this.editing = false;
      this._super();
      this._design = $.wap.stickyLabelDesignSelector.getDesign(this.options.designName);
      this._createDom();
      this._setEditable(this.options.editable);
      this._enterDocument();
      this.element.uniqueId();
    }

  });

  // ----------------------------------------------------------------------
  // public methods
  // ----------------------------------------------------------------------
  /**
   * Open message edit dialog.
   */
  $.wap.stickyLabel.prototype.openMessageEditor = function() {
    if (this.options.directInput) {
      // direct input
      if (this.editing) {
        this._closeDirectInput();
      } else {
        this._openDirectInput();
      }
    } else {
      // with editor
      var dlg = this.options.messageEditor.getDialog(this);
      dlg.setStickyLabel(this);
      dlg.open();
    }
  };

  $.wap.stickyLabel.prototype.resizeTextarea = function() {
    var $editor = this.element.find(CLS_MESSAGE).find(CLS_MESSAGE_EDITOR);
    var value = $editor.val();
    var lines = 1;
    for (var i = 0, l = value.length; i < l; i++) {
      if (value.charAt(i) == '\n')
        lines++;
    }
    $editor.attr("rows", lines);
    // window.status = lines;
  };

  /**
   * Set message.
   * 
   * @param {String} message
   * @private
   */
  $.wap.stickyLabel.prototype.setMessage = function(message) {
    var $messageElement = this.element.find(CLS_MESSAGE), //
    lines, i; //

    this.options.message = message;
    if (!message) {
      message = '';
    }
    message.replace(/\\n/g, '\n');
    lines = message.split('\n');
    $messageElement.empty();
    for (i = 0; i < lines.length; ++i) {
      if (i > 0) {
        $messageElement.append('<br />');
      }
      $messageElement.append(document.createTextNode(lines[i]));
    }
  };

  /**
   * Set design.
   * 
   * @param {String} designName
   */
  $.wap.stickyLabel.prototype.setDesignName = function(designName) {
    var $cardElement = $(this.element).find(CLS_CARD), //
    $leftMarkerElement = $(this.element).find(CLS_LEFT_MARKER), //
    $rightMarkerElement = $(this.element).find(CLS_RIGHT_MARKER), //
    currentDesign = $.wap.stickyLabelDesignSelector.getDesign(this.options.designName), //
    newDesign = $.wap.stickyLabelDesignSelector.getDesign(designName); //

    $cardElement.removeClass(currentDesign[$.wap.stickyLabelDesignSelector.DesignKind.CARD_COLOR]) //
    .addClass(newDesign[$.wap.stickyLabelDesignSelector.DesignKind.CARD_COLOR]);
    $leftMarkerElement.removeClass(currentDesign[$.wap.stickyLabelDesignSelector.DesignKind.LEFT_MARKER_COLOR]) //
    .addClass(newDesign[$.wap.stickyLabelDesignSelector.DesignKind.LEFT_MARKER_COLOR]);
    $rightMarkerElement.removeClass(currentDesign[$.wap.stickyLabelDesignSelector.DesignKind.RIGHT_MARKER_COLOR]) //
    .addClass(newDesign[$.wap.stickyLabelDesignSelector.DesignKind.RIGHT_MARKER_COLOR]);

    this.options.designName = designName;
  };

  // ----------------------------------------------------------------------
  // private methods
  // ----------------------------------------------------------------------
  /**
   * Create DOM of this widget.
   */
  $.wap.stickyLabel.prototype._createDom = function() {
    var self = this;
    var sb = [];
    sb.push('<div class="shadow"></div>');
    sb.push('<div class="' + RAWCLS_CARD + ' clearfix ');
    sb.push(this._design[$.wap.stickyLabelDesignSelector.DesignKind.CARD_COLOR]);
    sb.push('">');

    sb.push('<div class="' + RAWCLS_LEFT_MARKER + ' ');
    sb.push(this._design[$.wap.stickyLabelDesignSelector.DesignKind.LEFT_MARKER_COLOR]);
    sb.push('">&nbsp;</div>');

    if (this.options.authorEmpNo != null) {
      sb.push(getEmpInfoHtml());
    }

    sb.push('<div style="width:100%;" class="message pull-left">');
    sb.push(this.options.message);
    sb.push('</div>');

    sb.push('<div class="clearfix"></div>');

    sb.push('<div class="user pull-right">');
    if (this.options.authorEmpNo == null) {
      sb.push(this.options.author);
    }
    sb.push('<div class="' + RAWCLS_EDIT_BUTTON + ' space-out-m-left"><i class="wap-icon-pencil"></i></div>');
    sb.push('<div class="' + RAWCLS_DESIGN_BUTTON + ' space-out-m-left"><i class="wap-icon-paint-format"></i></div>');
    sb.push('<div class="' + RAWCLS_REMOVE_BUTTON + ' space-out-m-left"><i class="wap-icon-remove"></i></div>');
    sb.push('</div>');

    sb.push('<div class="' + RAWCLS_RIGHT_MARKER + ' ');
    sb.push(this._design[$.wap.stickyLabelDesignSelector.DesignKind.RIGHT_MARKER_COLOR]);
    sb.push('">&nbsp;</div>');

    sb.push('</div>'); // .card

    this.element.append(sb.join(''));

    function getEmpInfoHtml() {
      if (typeof EMPLOYEE == 'undefined' || typeof EMPLOYEE.Data == 'undefined') {
        console.error('EMPLOYEE.Data is not found. Hint: Did you import employee-datautil.js?');
        return '';
      } else if (EMPLOYEE.Data.syainjhDao == undefined) {
        console.error('EMPLOYEE.Data.syainjhDao is not found. Hint: OK, you imported, but did you EMPLOYEE.Data.load?');
        return '';
      } else {
        var imgSrc = EMPLOYEE.Data.getEmpImgPath(self.options.authorEmpNo);
        var name = EMPLOYEE.Data.getSyainjh(self.options.authorEmpNo).sya_nm;
        var $container = $('<div></div>');
        var $div = $('<div></div>');
        $div.addClass(RAWCLS_EMP_INFO);
        var $img = $('<img>', {
          src : imgSrc
        });
        $img.addClass(RAWCLS_EMP_PIC + ' img-circle img-32');
        var $span = $('<span></span>', {
          text : name
        });
        $span.addClass(RAWCLS_EMP_NAME);
        $div.append($img).append($span);
        $container.append($div);
        return $container.html();
      }
    }
  };

  /**
   * Bind event.
   */
  $.wap.stickyLabel.prototype._enterDocument = function() {
    var self = this;
    var $editButton = this.element.find(CLS_EDIT_BUTTON); //
    var $designButton = this.element.find(CLS_DESIGN_BUTTON); //
    var $removeButton = this.element.find(CLS_REMOVE_BUTTON); //

    $editButton.on(EVENT_CLICK, $.proxy(this.openMessageEditor, this));
    $designButton.on(EVENT_CLICK, $.proxy(this.openDesignSelector, this));
    $removeButton.on(EVENT_CLICK, $.proxy(this.remove, this));

    if (this.options.draggable) {
      this.element.draggable();
    }
  };

  /**
   * Open design select dialog.
   * 
   * @private
   */
  $.wap.stickyLabel.prototype.openDesignSelector = function() {
    var dlg = $.wap.stickyLabelDesignSelector.getDialog(this);
    dlg.stickyLabelDesignSelector('setStickyLabel', this);
    dlg.stickyLabelDesignSelector('open');
  };

  /**
   * Remove this StickyLabel
   * 
   * @private
   */
  $.wap.stickyLabel.prototype.remove = function() {
    this.options.removeCallback(this);
    this.destroy();
    this.element.remove();
  };

  /**
   * Set editable attribute.
   * 
   * @param {boolean} isEditable
   * @private
   */
  $.wap.stickyLabel.prototype._setEditable = function(isEditable) {
    this.options.editable = isEditable;

    if (isEditable) {
      this.element.addClass(RAWCLS_EDITABLE);
    } else {
      this.element.removeClass(RAWCLS_EDITABLE);
    }
  };

  /**
   * Open direct input
   * 
   * @private
   */
  $.wap.stickyLabel.prototype._closeDirectInput = function() {
    var $messageElement = this.element.find(CLS_MESSAGE);
    var message = this.element.find(CLS_MESSAGE_EDITOR).val();
    this.setMessage(message);
    this.editing = false;
    $(document).off(EVENT_CLICK + '.' + this.element.uniqueId().attr('id'));
    this.options.editorSaveCallback(this);
  };

  /**
   * Close direct input
   * 
   * @private
   */
  $.wap.stickyLabel.prototype._openDirectInput = function() {
    var self = this;
    var $messageElement = this.element.find(CLS_MESSAGE);
    var $editor = $('<textarea></textarea>');
    $editor.addClass(RAWCLS_MESSAGE_EDITOR).css('width', '100%').css('resize', 'vertical').css('overflow', 'hidden');
    $editor.val(this.options.message);
    $editor.on(EVENT_KEYUP, $.proxy(this.resizeTextarea, this));
    $messageElement.html('');
    $messageElement.append($editor);
    $editor.focus();
    $editor.trigger(EVENT_KEYUP);
    $editor.select();
    // close when clicked
    $(document).on(EVENT_CLICK + '.' + this.element.uniqueId().attr('id'), function(e) {
      if (!$.contains(self.element[0], e.target)) {
        self._closeDirectInput();
      }
    });
    this.editing = true;
  };
  // ------------------------------------------------------------------------
  // static methods
  // ------------------------------------------------------------------------
  /**
   * StickyLabel factory method.
   * 
   * @param {Object} options
   * @returns {jQuery} Newly created StickyLabel element.
   */
  $.wap.stickyLabel.createStickyLabel = function(options) {
    var result = $('<div class="wap-stickyLabel"></div>').stickyLabel(options);

    return result;
  };

  $.wap.stickyLabel.prototype.editorSaveCallback = function() {
    this.savedByUser = true;
    this.options.editorSaveCallback(this);
  };

  $.wap.stickyLabel.prototype.editorCloseCallback = function() {
    this.options.editorCloseCallback(this);
  };

  $.wap.stickyLabel.prototype.isSavedByUser = function() {
    return this.savedByUser;
  };

  $.wap.stickyLabel.prototype.isUsedbyMyselft = function() {
    return this.usedbyMyselft;
  };

  $.wap.stickyLabel.prototype.setUsedbyMyselft = function(useOrnot) {
    this.usedbyMyselft = useOrnot;
  };

  $.wap.stickyLabel.prototype.setRemoveCallback = function(removeCallback) {
    this.options.removeCallback = removeCallback;
  };

  // ------------------------------------------------------------------------
  // automatically initialize widget.
  // ------------------------------------------------------------------------
  $(function() {
    var autoInstantiationClass = $.wap.stickyLabel.prototype.widgetFullName;
    $('.' + autoInstantiationClass).stickyLabel();
  });

})(jQuery);

/**
 * タグ
 */
;
(function($) {
  $.widget('wap.tag', $.wap.abstractWidget, {

    options : {
      active : false,
      caption : '',
      clickable : false,
      colorType : '',
      iconClass : '',
      iconSize : '',
      click : function(e) {
      }
    },
    _iconClass : {
      'tag' : 'wap-icon-tag',
      'tags' : 'wap-icon-tags',
      'flag' : 'wap-icon-flag',
      'bookmark' : 'wap-icon-bookmark'
    },
    _iconSize : {
      'size-tree' : 'font-size-l',
      'size-list' : 'font-size-ll',
      'size-info' : 'font-size-xl'
    },
    _iconColorType : {
      'primary' : 'text-primary',
      'success' : 'text-success',
      'info' : 'text-info',
      'warning' : 'text-warning',
      'danger' : 'text-danger'
    },
    _textColorType : {
      'default' : 'wap-tag-default-color',
      'primary' : 'bg-color-primary',
      'success' : 'bg-color-success',
      'info' : 'bg-color-info',
      'warning' : 'bg-color-warning',
      'danger' : 'bg-color-danger'
    },

    _create : function() {
      this._super();
      var $elem = this.element;
      var opt = this.options;
      this._setDefaultCaption(opt, $elem);

      this.refresh();

      // クリッカブル
      if (opt.clickable) {
        $elem.addClass(this._getActiveClass(opt.active));
        this._bindEvent();
      }
    },

    _getActiveClass : function(active) {
      if (active) {
        return 'tag-active';
      }
      return 'tag-inactive';
    },

    _bindEvent : function() {
      var that = this;
      this.element.click(function(ev) {
        var opt = that.options;
        var $elem = that.element;
        if (opt.active) {
          $elem.addClass('tag-inactive').removeClass('tag-active');
          opt.active = false;
        } else {
          $elem.addClass('tag-active').removeClass('tag-inactive');
          opt.active = true;
        }
        that._trigger('click', ev);
      });
    },

    setActive : function(active) {
      var $elem = this.element;
      var opt = this.options;

      if (!opt.clickable) {
        return;
      }
      opt.active = active;
      if (opt.active) {
        $elem.addClass('tag-active').removeClass('tag-inactive');
      } else {
        $elem.addClass('tag-inactive').removeClass('tag-active');
      }
    },

    setCaption : function(caption) {
      var opt = this.options;
      if (opt.iconClass) {
        return;
      }

      opt.caption = caption;
    },

    setClick : function(click) {
      var opt = this.options;
      opt.click = click;
    },

    setClickable : function(clickable) {
      var $elem = this.element;
      var opt = this.options;

      opt.clickable = clickable;
      $elem.removeClass('tag-inactive').removeClass('tag-active');
      $elem.off('click');
      if (opt.clickable) {
        $elem.addClass(this._getActiveClass(opt.active));
        this._bindEvent();
      }
    },

    setColorType : function(colorType) {
      var opt = this.options;

      opt.colorType = colorType;
    },

    setIconClass : function(iconClass) {
      var opt = this.options;

      opt.iconClass = iconClass;
    },

    setIconSize : function(iconSize) {
      var opt = this.options;
      if (!opt.iconClass) {
        return;
      }

      opt.iconSize = iconSize;
    },

    _destroy : function() {
      this.element.off('click');
    },
    _setDefaultCaption : function(opt, $elem) {
      opt.caption = $elem.text();
    },

    refresh : function() {
      var $elem = this.element;
      var opt = this.options;
      // 文字列の初期化
      $elem.text('');
      // クラスの初期化
      $elem.removeClass('label');
      $elem.removeClass(opt.iconClass);
      for ( var key in this._iconClass) {
        $elem.removeClass(this._iconClass[key]);
      }
      // 色の初期化
      $elem.removeClass(opt.colorType);
      for ( var key in this._textColorType) {
        $elem.removeClass(this._textColorType[key]);
      }
      for ( var key in this._iconColorType) {
        $elem.removeClass(this._iconColorType[key]);
      }
      // サイズの初期化
      $elem.removeClass(opt.iconSize);
      for ( var key in this._iconSize) {
        $elem.removeClass(this._iconSize[key]);
      }
      if (opt.iconClass) { // アイコンタグ
        // クラスの指定
        var iconClass = this._iconClass[opt.iconClass];
        if (iconClass) {
          $elem.addClass(iconClass);
        } else {
          $elem.addClass(opt.iconClass);
        }
        // サイズの指定
        if (opt.iconSize) {
          var iconSize = this._iconSize[opt.iconSize];
          if (iconSize) {
            $elem.addClass(iconSize);
          } else {
            $elem.addClass(opt.iconSize);
          }
        } else {
          $elem.addClass(this._iconSize['size-list']);
        }
        // 色の指定
        if (opt.colorType) {
          var colorType = this._iconColorType[opt.colorType];
          if (colorType) {
            $elem.addClass(colorType);
          } else {
            $elem.addClass(opt.colorType);
          }
        }
      } else { // テキストタグ
        // 文字列の指定
        $elem.text(opt.caption);
        // クラスの指定
        $elem.addClass('label');
        // 色の指定
        if (opt.colorType) {
          var colorType = this._textColorType[opt.colorType];
          if (colorType) {
            $elem.addClass(colorType);
          } else {
            $elem.addClass(opt.colorType);
          }
        } else {
          $elem.addClass(this._textColorType['default']);
        }
      }
    }
  });

  // クラス名を使った自動インスタンス化はdocument.readyで行うこと。
  $(function() {
    $('.' + $.wap.tag.prototype.widgetFullName).tag();
  });

}(jQuery));

/**
 * wap.thumbnail
 * 
 * This widget help joint thumbamil image and file viewer.<br>
 * 
 * @author nishiyama-k
 * @since 2014/05/14
 */
(function($) {
  $.widget('wap.thumbnail', $.wap.abstractWidget, {

    options : {
      viewIconClass : 'wap-icon-zoom-in',
      viewSrc : null,
      viewType : 'modal'// modal or tab
    },

    _tagType : null,
    _TAG_TYPE : {
      A : 'A',
      IMG : 'IMG'
    },

    _CLASS : {
      THUMB_AREA : 'wap-thumbnail-area',
      THUMB_OPTIONS : 'wap-image-options'
    },

    _create : function() {
      this._super();
      this._setTagType();
      this._setOptionsViewSrc();
      this._getTagTypeObj().createNode();
    },

    _setTagType : function() {
      if (this.element[0].tagName === this._TAG_TYPE.A) {
        this._tagType = this._TAG_TYPE.A;
        return;
      } else if (this.element[0].tagName === this._TAG_TYPE.IMG) {
        this._tagType = this._TAG_TYPE.IMG;
        return;
      } else {
        console.log('Wrong tag type :' + this.element[0].tagName);
      }
    },

    _getImageTag : function() {
      switch (this._tagType) {
      case this._TAG_TYPE.A:
        return this.element.find('img');
        break;
      case this._TAG_TYPE.IMG:
        return this.element;
        break;
      default:
        console.log('Wrong tag type :' + this.element[0].tagName);
      }
    },

    _setOptionsViewSrc : function() {
      if (!this.options.viewSrc) {
        this.options.viewSrc = $(this._getImageTag()).attr('src');
      }
    },

    _getTagTypeObj : function() {
      var that = this;
      switch (this._tagType) {
      case this._TAG_TYPE.A:
        return {
          createNode : function() {
            $(that.element).wrapAll($('<div/>').addClass(that._CLASS.THUMB_AREA));// hoverの領域
            $(that.element).after(_createCpationTag(that));

            function _createCpationTag(thumbnail) {
              var $captionDiv = $('<div/>').addClass(thumbnail._CLASS.THUMB_OPTIONS);
              var $span = $('<span/>').append($('<i/>').addClass(thumbnail.options.viewIconClass));
              $span.on('click', function() {
                thumbnail._onclick();
              });
              $captionDiv.append($span);
              return $captionDiv;
            }
          }
        };
        break;
      case this._TAG_TYPE.IMG:
        return {
          createNode : function() {
            $(that.element).attr('style', 'cursor:pointer');
            $(that.element).on('click', function() {
              that._onclick();
            });
          }
        };
        break;
      }
    },

    _onclick : function() {
      if (!this.options.viewSrc) {
        console.log('src is undefined');
        return;
      }
      switch (this.options.viewType) {
      case 'modal':
        fileViewer(this.options.viewSrc);
        break;
      case 'tab':
        fileViewerTab(this.options.viewSrc);
        break;
      default:
        console.log('unsupported viewType:' + this.options.viewType);
      }
    },

    _destory : function() {
      this.contentElement.remove();
    },

    changeFile : function(filePath) {
      this.changeOnlyImg(filePath);
      this.changeOnlyView(filePath);
      return this;
    },

    changeOnlyImg : function(filePath) {
      var $img = this._getImageTag();
      $img.attr('src', filePath);
      return this;
    },

    changeOnlyView : function(filePath) {
      this.options.viewSrc = filePath;
      return this;
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.thumbnail.prototype.widgetFullName;// wapThumbnail'
    $('.' + autoInstantiationClass).thumbnail();
  });
}(jQuery));

(function($) {
  $.widget('wap.toolbar', $.wap.abstractWidget, {
    options : {},

    // コンストラクタ
    _create : function() {
      this._super();
      this._applyStyle();
    },

    // デストラクタ
    _destroy : function() {
    },

    _applyStyle : function() {
      // apply NEON
      this.element.addClass("input-group");
      // button group
      $buttonGroup = this.element.children('div,span');
      if ($buttonGroup.length > 0) {
        $buttonGroup.each(function() {
          $(this).addClass('input-group-btn');
        });
      }
      // single button
      $buttons = this.element.children('button');
      if ($buttons.length > 0) {
        $buttons.each(function() {
          $(this).wrap('<span class="input-group-btn"></span>');
        });
      }
      // input
      $inputs = this.element.children('input,select,textarea');
      if ($inputs.length > 0) {
        $inputs.each(function() {
          $(this).addClass('form-control');
        });
      }
    }

  });

  $(function() {
    var autoInstantiationClass = $.wap.toolbar.prototype.widgetFullName;
    $('.' + autoInstantiationClass).toolbar({});
  });

}(jQuery));

jQuery(function($) {
  if (!$.datepicker || !$.datepicker.regional) {
    return;
  }
  $.datepicker.regional['en-GB'] = {
    closeText : 'Done',
    prevText : 'Prev',
    nextText : 'Next',
    currentText : 'Today',
    monthNames : [
      'January', 'February', 'March', 'April', 'May', 'June', 'July', 'August', 'September', 'October', 'November',
      'December'
    ],
    monthNamesShort : [
      'Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep', 'Oct', 'Nov', 'Dec'
    ],
    dayNames : [
      'Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'
    ],
    dayNamesShort : [
      'Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'
    ],
    dayNamesMin : [
      'Su', 'Mo', 'Tu', 'We', 'Th', 'Fr', 'Sa'
    ],
    weekHeader : 'Wk',
    dateFormat : 'dd/mm/yyyy',
    firstDay : 1,
    isRTL : false,
    showMonthAfterYear : false,
    yearSuffix : ''
  };
});
/* datePickerの日本語化 */
jQuery(function($) {
  if (!$.datepicker || !$.datepicker.regional) {
    console
        .log('$.datepickerが存在しないので、日本語化の処理を飛ばします。意図していない場合はcommon/lib/Datejs-all/build/date-ja-JP.jsをscriptタグに追加して下さい。')
    return;
  }
  $.datepicker.regional['ja'] = {
    closeText : '閉じる',
    prevText : '',// '&#x3c;前',
    nextText : '',// '次&#x3e;',
    currentText : '今日',
    monthNames : [
      '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'
    ],
    monthNamesShort : [
      '1月', '2月', '3月', '4月', '5月', '6月', '7月', '8月', '9月', '10月', '11月', '12月'
    ],
    dayNames : [
      '日曜日', '月曜日', '火曜日', '水曜日', '木曜日', '金曜日', '土曜日'
    ],
    dayNamesShort : [
      '日', '月', '火', '水', '木', '金', '土'
    ],
    dayNamesMin : [
      '日', '月', '火', '水', '木', '金', '土'
    ],
    weekHeader : '週',
    dateFormat : 'yy年mm月dd日(D)',
    firstDay : 0,
    isRTL : false,
    showMonthAfterYear : true,
    yearSuffix : '年'
  };
  $.datepicker.setDefaults($.datepicker.regional['ja']);
});

/*
 * 祝日の定義。 mockでは、ベタ書きでいく。 2012～2016まで対応。必要になったら適時追加してほしい。
 */
var holidays = {
  "20120101" : {

    title : "元日"
  },
  "20120102" : {

    title : "振替休日"
  },
  "20120109" : {

    title : "成人の日"
  },
  "20120211" : {

    title : "建国記念の日"
  },
  "20120320" : {

    title : "春分の日"
  },
  "20120429" : {

    title : "昭和の日"
  },
  "20120430" : {

    title : "振替休日"
  },
  "20120503" : {

    title : "憲法記念日"
  },
  "20120504" : {

    title : "みどりの日"
  },
  "20120505" : {

    title : "こどもの日"
  },
  "20120716" : {

    title : "海の日"
  },
  "20120917" : {

    title : "敬老の日"
  },
  "20120922" : {

    title : "秋分の日"
  },
  "20121008" : {

    title : "体育の日"
  },
  "20121103" : {

    title : "文化の日"
  },
  "20121123" : {

    title : "勤労感謝の日"
  },
  "20121223" : {

    title : "天皇誕生日"
  },
  "20121224" : {

    title : "振替休日"
  },
  "20130101" : {

    title : "元日"
  },
  "20130114" : {

    title : "成人の日"
  },
  "20130211" : {

    title : "建国記念の日"
  },
  "20130320" : {

    title : "春分の日"
  },
  "20130429" : {

    title : "昭和の日"
  },
  "20130503" : {

    title : "憲法記念日"
  },
  "20130504" : {

    title : "みどりの日"
  },
  "20130505" : {

    title : "こどもの日"
  },
  "20130506" : {

    title : "振替休日"
  },
  "20130715" : {

    title : "海の日"
  },
  "20130916" : {

    title : "敬老の日"
  },
  "20130923" : {

    title : "秋分の日"
  },
  "20131014" : {

    title : "体育の日"
  },
  "20131103" : {

    title : "文化の日"
  },
  "20131104" : {

    title : "振替休日"
  },
  "20131123" : {

    title : "勤労感謝の日"
  },
  "20131223" : {

    title : "天皇誕生日"
  },
  "20140101" : {
    type : 0,
    title : "元日"
  },
  "20140113" : {
    type : 0,
    title : "成人の日"
  },
  "20140211" : {
    type : 0,
    title : "建国記念の日"
  },
  "20140321" : {
    type : 0,
    title : "春分の日"
  },
  "20140429" : {
    type : 0,
    title : "昭和の日"
  },
  "20140503" : {
    type : 0,
    title : "憲法記念日"
  },
  "20140504" : {
    type : 0,
    title : "みどりの日"
  },
  "20140505" : {
    type : 0,
    title : "こどもの日"
  },
  "20140506" : {
    type : 0,
    title : "振替休日"
  },
  "20140721" : {
    type : 0,
    title : "海の日"
  },
  "20140915" : {
    type : 0,
    title : "敬老の日"
  },
  "20140923" : {
    type : 0,
    title : "秋分の日"
  },
  "20141013" : {
    type : 0,
    title : "体育の日"
  },
  "20141103" : {
    type : 0,
    title : "文化の日"
  },
  "20141123" : {
    type : 0,
    title : "勤労感謝の日"
  },
  "20141124" : {
    type : 0,
    title : "振替休日"
  },
  "20141223" : {
    type : 0,
    title : "天皇誕生日"
  },
  "20150101" : {
    type : 0,
    title : "元日"
  },
  "20150112" : {
    type : 0,
    title : "成人の日"
  },
  "20150211" : {
    type : 0,
    title : "建国記念の日"
  },
  "20150321" : {
    type : 0,
    title : "春分の日"
  },
  "20150429" : {
    type : 0,
    title : "昭和の日"
  },
  "20150503" : {
    type : 0,
    title : "憲法記念日"
  },
  "20150504" : {
    type : 0,
    title : "みどりの日"
  },
  "20150505" : {
    type : 0,
    title : "こどもの日"
  },
  "20150506" : {
    type : 0,
    title : "振替休日"
  },
  "20150720" : {
    type : 0,
    title : "海の日"
  },
  "20150921" : {
    type : 0,
    title : "敬老の日"
  },
  "20150923" : {
    type : 0,
    title : "秋分の日"
  },
  "20151012" : {
    type : 0,
    title : "体育の日"
  },
  "20151103" : {
    type : 0,
    title : "文化の日"
  },
  "20151123" : {
    type : 0,
    title : "勤労感謝の日"
  },
  "20151223" : {
    type : 0,
    title : "天皇誕生日"
  },
  "20160101" : {
    type : 0,
    title : "元日"
  },
  "20160111" : {
    type : 0,
    title : "成人の日"
  },
  "20160211" : {
    type : 0,
    title : "建国記念の日"
  },
  "20160320" : {
    type : 0,
    title : "春分の日"
  },
  "20160321" : {
    type : 0,
    title : "振替休日"
  },
  "20160429" : {
    type : 0,
    title : "昭和の日"
  },
  "20160503" : {
    type : 0,
    title : "憲法記念日"
  },
  "20160504" : {
    type : 0,
    title : "みどりの日"
  },
  "20160505" : {
    type : 0,
    title : "こどもの日"
  },
  "20160718" : {
    type : 0,
    title : "海の日"
  },
  "20160919" : {
    type : 0,
    title : "敬老の日"
  },
  "20160922" : {
    type : 0,
    title : "秋分の日"
  },
  "20161010" : {
    type : 0,
    title : "体育の日"
  },
  "20161103" : {
    type : 0,
    title : "文化の日"
  },
  "20161123" : {
    type : 0,
    title : "勤労感謝の日"
  },
  "20161223" : {
    type : 0,
    title : "天皇誕生日"
  }
};

function convertYearFromJpFormatYear(dateStr) {
  if (dateStr == null) {
    return null;
  }
  return dateStr.replace('大正13', '1924').replace('大正14', '1925').replace('大正15', '1926').replace('昭和10', '1935')
      .replace('昭和11', '1936').replace('昭和12', '1937').replace('昭和13', '1938').replace('昭和14', '1939').replace('昭和15',
          '1940').replace('昭和16', '1941').replace('昭和17', '1942').replace('昭和18', '1943').replace('昭和19', '1944')
      .replace('昭和20', '1945').replace('昭和21', '1946').replace('昭和22', '1947').replace('昭和23', '1948').replace('昭和24',
          '1949').replace('昭和25', '1950').replace('昭和26', '1951').replace('昭和27', '1952').replace('昭和28', '1953')
      .replace('昭和29', '1954').replace('昭和30', '1955').replace('昭和31', '1956').replace('昭和32', '1957').replace('昭和33',
          '1958').replace('昭和34', '1959').replace('昭和35', '1960').replace('昭和36', '1961').replace('昭和37', '1962')
      .replace('昭和38', '1963').replace('昭和39', '1964').replace('昭和40', '1965').replace('昭和41', '1966').replace('昭和42',
          '1967').replace('昭和43', '1968').replace('昭和44', '1969').replace('昭和45', '1970').replace('昭和46', '1971')
      .replace('昭和47', '1972').replace('昭和48', '1973').replace('昭和49', '1974').replace('昭和50', '1975').replace('昭和51',
          '1976').replace('昭和52', '1977').replace('昭和53', '1978').replace('昭和54', '1979').replace('昭和55', '1980')
      .replace('昭和56', '1981').replace('昭和57', '1982').replace('昭和58', '1983').replace('昭和59', '1984').replace('昭和60',
          '1985').replace('昭和61', '1986').replace('昭和62', '1987').replace('昭和63', '1988').replace('昭和64', '1989')
      .replace('昭和01', '1926').replace('昭和02', '1927').replace('昭和03', '1928').replace('昭和04', '1929').replace('昭和05',
          '1930').replace('昭和06', '1931').replace('昭和07', '1932').replace('昭和08', '1933').replace('昭和09', '1934')
      .replace('昭和1', '1926').replace('昭和2', '1927').replace('昭和3', '1928').replace('昭和4', '1929').replace('昭和5',
          '1930').replace('昭和6', '1931').replace('昭和7', '1932').replace('昭和8', '1933').replace('昭和9', '1934').replace(
          '平成10', '1998').replace('平成11', '1999').replace('平成12', '2000').replace('平成13', '2001').replace('平成14',
          '2002').replace('平成15', '2003').replace('平成16', '2004').replace('平成17', '2005').replace('平成18', '2006')
      .replace('平成19', '2007').replace('平成20', '2008').replace('平成21', '2009').replace('平成22', '2010').replace('平成23',
          '2011').replace('平成24', '2012').replace('平成25', '2013').replace('平成26', '2014').replace('平成27', '2015')
      .replace('平成28', '2016').replace('平成29', '2017').replace('平成30', '2018').replace('平成31', '2019').replace('平成32',
          '2020').replace('平成33', '2021').replace('平成34', '2022').replace('平成35', '2023').replace('平成36', '2024')
      .replace('平成37', '2025').replace('平成38', '2026').replace('平成39', '2027').replace('平成40', '2028').replace('平成41',
          '2029').replace('平成42', '2030').replace('平成43', '2031').replace('平成44', '2032').replace('平成45', '2033')
      .replace('平成46', '2034').replace('平成01', '1989').replace('平成02', '1990').replace('平成03', '1991').replace('平成04',
          '1992').replace('平成05', '1993').replace('平成06', '1994').replace('平成07', '1995').replace('平成08', '1996')
      .replace('平成09', '1997').replace('平成1', '1989').replace('平成2', '1990').replace('平成3', '1991').replace('平成4',
          '1992').replace('平成5', '1993').replace('平成6', '1994').replace('平成7', '1995').replace('平成8', '1996').replace(
          '平成9', '1997').replace('T13', '1924').replace('T14', '1925').replace('T15', '1926').replace('S10', '1935')
      .replace('S11', '1936').replace('S12', '1937').replace('S13', '1938').replace('S14', '1939').replace('S15',
          '1940').replace('S16', '1941').replace('S17', '1942').replace('S18', '1943').replace('S19', '1944').replace(
          'S20', '1945').replace('S21', '1946').replace('S22', '1947').replace('S23', '1948').replace('S24', '1949')
      .replace('S25', '1950').replace('S26', '1951').replace('S27', '1952').replace('S28', '1953').replace('S29',
          '1954').replace('S30', '1955').replace('S31', '1956').replace('S32', '1957').replace('S33', '1958').replace(
          'S34', '1959').replace('S35', '1960').replace('S36', '1961').replace('S37', '1962').replace('S38', '1963')
      .replace('S39', '1964').replace('S40', '1965').replace('S41', '1966').replace('S42', '1967').replace('S43',
          '1968').replace('S44', '1969').replace('S45', '1970').replace('S46', '1971').replace('S47', '1972').replace(
          'S48', '1973').replace('S49', '1974').replace('S50', '1975').replace('S51', '1976').replace('S52', '1977')
      .replace('S53', '1978').replace('S54', '1979').replace('S55', '1980').replace('S56', '1981').replace('S57',
          '1982').replace('S58', '1983').replace('S59', '1984').replace('S60', '1985').replace('S61', '1986').replace(
          'S62', '1987').replace('S63', '1988').replace('S64', '1989').replace('S01', '1926').replace('S02', '1927')
      .replace('S03', '1928').replace('S04', '1929').replace('S05', '1930').replace('S06', '1931').replace('S07',
          '1932').replace('S08', '1933').replace('S09', '1934').replace('S1', '1926').replace('S2', '1927').replace(
          'S3', '1928').replace('S4', '1929').replace('S5', '1930').replace('S6', '1931').replace('S7', '1932')
      .replace('S8', '1933').replace('S9', '1934').replace('H10', '1998').replace('H11', '1999').replace('H12', '2000')
      .replace('H13', '2001').replace('H14', '2002').replace('H15', '2003').replace('H16', '2004').replace('H17',
          '2005').replace('H18', '2006').replace('H19', '2007').replace('H20', '2008').replace('H21', '2009').replace(
          'H22', '2010').replace('H23', '2011').replace('H24', '2012').replace('H25', '2013').replace('H26', '2014')
      .replace('H27', '2015').replace('H28', '2016').replace('H29', '2017').replace('H30', '2018').replace('H31',
          '2019').replace('H32', '2020').replace('H33', '2021').replace('H34', '2022').replace('H35', '2023').replace(
          'H36', '2024').replace('H37', '2025').replace('H38', '2026').replace('H39', '2027').replace('H40', '2028')
      .replace('H41', '2029').replace('H42', '2030').replace('H43', '2031').replace('H44', '2032').replace('H45',
          '2033').replace('H46', '2034').replace('H01', '1989').replace('H02', '1990').replace('H03', '1991').replace(
          'H04', '1992').replace('H05', '1993').replace('H06', '1994').replace('H07', '1995').replace('H08', '1996')
      .replace('H09', '1997').replace('H1', '1989').replace('H2', '1990').replace('H3', '1991').replace('H4', '1992')
      .replace('H5', '1993').replace('H6', '1994').replace('H7', '1995').replace('H8', '1996').replace('H9', '1997');
}

function convertYearFromJpYear(dateStr) {
  return (dateStr.substr(0, 4)).replace('大正13', '1924').replace('大正14', '1925').replace('大正15', '1926').replace('昭和10',
      '1935').replace('昭和11', '1936').replace('昭和12', '1937').replace('昭和13', '1938').replace('昭和14', '1939').replace(
      '昭和15', '1940').replace('昭和16', '1941').replace('昭和17', '1942').replace('昭和18', '1943').replace('昭和19', '1944')
      .replace('昭和20', '1945').replace('昭和21', '1946').replace('昭和22', '1947').replace('昭和23', '1948').replace('昭和24',
          '1949').replace('昭和25', '1950').replace('昭和26', '1951').replace('昭和27', '1952').replace('昭和28', '1953')
      .replace('昭和29', '1954').replace('昭和30', '1955').replace('昭和31', '1956').replace('昭和32', '1957').replace('昭和33',
          '1958').replace('昭和34', '1959').replace('昭和35', '1960').replace('昭和36', '1961').replace('昭和37', '1962')
      .replace('昭和38', '1963').replace('昭和39', '1964').replace('昭和40', '1965').replace('昭和41', '1966').replace('昭和42',
          '1967').replace('昭和43', '1968').replace('昭和44', '1969').replace('昭和45', '1970').replace('昭和46', '1971')
      .replace('昭和47', '1972').replace('昭和48', '1973').replace('昭和49', '1974').replace('昭和50', '1975').replace('昭和51',
          '1976').replace('昭和52', '1977').replace('昭和53', '1978').replace('昭和54', '1979').replace('昭和55', '1980')
      .replace('昭和56', '1981').replace('昭和57', '1982').replace('昭和58', '1983').replace('昭和59', '1984').replace('昭和60',
          '1985').replace('昭和61', '1986').replace('昭和62', '1987').replace('昭和63', '1988').replace('昭和64', '1989')
      .replace('昭和01', '1926').replace('昭和02', '1927').replace('昭和03', '1928').replace('昭和04', '1929').replace('昭和05',
          '1930').replace('昭和06', '1931').replace('昭和07', '1932').replace('昭和08', '1933').replace('昭和09', '1934')
      .replace('平成10', '1998').replace('平成11', '1999').replace('平成12', '2000').replace('平成13', '2001').replace('平成14',
          '2002').replace('平成15', '2003').replace('平成16', '2004').replace('平成17', '2005').replace('平成18', '2006')
      .replace('平成19', '2007').replace('平成20', '2008').replace('平成21', '2009').replace('平成22', '2010').replace('平成23',
          '2011').replace('平成24', '2012').replace('平成25', '2013').replace('平成26', '2014').replace('平成27', '2015')
      .replace('平成28', '2016').replace('平成29', '2017').replace('平成30', '2018').replace('平成31', '2019').replace('平成32',
          '2020').replace('平成33', '2021').replace('平成34', '2022').replace('平成35', '2023').replace('平成36', '2024')
      .replace('平成37', '2025').replace('平成38', '2026').replace('平成39', '2027').replace('平成40', '2028').replace('平成41',
          '2029').replace('平成42', '2030').replace('平成43', '2031').replace('平成44', '2032').replace('平成45', '2033')
      .replace('平成46', '2034').replace('平成01', '1989').replace('平成02', '1990').replace('平成03', '1991').replace('平成04',
          '1992').replace('平成05', '1993').replace('平成06', '1994').replace('平成07', '1995').replace('平成08', '1996')
      .replace('平成09', '1997')
      + ''
      + (dateStr.substr(4));
}

function convertJpFormatYearFromYear(val) {
  return val.replace('1924', '大正13').replace('1925', '大正14').replace('1926', '大正15').replace('1935', '昭和10').replace(
      '1936', '昭和11').replace('1937', '昭和12').replace('1938', '昭和13').replace('1939', '昭和14').replace('1940', '昭和15')
      .replace('1941', '昭和16').replace('1942', '昭和17').replace('1943', '昭和18').replace('1944', '昭和19').replace('1945',
          '昭和20').replace('1946', '昭和21').replace('1947', '昭和22').replace('1948', '昭和23').replace('1949', '昭和24')
      .replace('1950', '昭和25').replace('1951', '昭和26').replace('1952', '昭和27').replace('1953', '昭和28').replace('1954',
          '昭和29').replace('1955', '昭和30').replace('1956', '昭和31').replace('1957', '昭和32').replace('1958', '昭和33')
      .replace('1959', '昭和34').replace('1960', '昭和35').replace('1961', '昭和36').replace('1962', '昭和37').replace('1963',
          '昭和38').replace('1964', '昭和39').replace('1965', '昭和40').replace('1966', '昭和41').replace('1967', '昭和42')
      .replace('1968', '昭和43').replace('1969', '昭和44').replace('1970', '昭和45').replace('1971', '昭和46').replace('1972',
          '昭和47').replace('1973', '昭和48').replace('1974', '昭和49').replace('1975', '昭和50').replace('1976', '昭和51')
      .replace('1977', '昭和52').replace('1978', '昭和53').replace('1979', '昭和54').replace('1980', '昭和55').replace('1981',
          '昭和56').replace('1982', '昭和57').replace('1983', '昭和58').replace('1984', '昭和59').replace('1985', '昭和60')
      .replace('1986', '昭和61').replace('1987', '昭和62').replace('1988', '昭和63').replace('1926', '昭和01').replace('1927',
          '昭和02').replace('1928', '昭和03').replace('1929', '昭和04').replace('1930', '昭和05').replace('1931', '昭和06')
      .replace('1932', '昭和07').replace('1933', '昭和08').replace('1934', '昭和09').replace('1998', '平成10').replace('1999',
          '平成11').replace('2000', '平成12').replace('2001', '平成13').replace('2002', '平成14').replace('2003', '平成15')
      .replace('2004', '平成16').replace('2005', '平成17').replace('2006', '平成18').replace('2007', '平成19').replace('2008',
          '平成20').replace('2009', '平成21').replace('2010', '平成22').replace('2011', '平成23').replace('2012', '平成24')
      .replace('2013', '平成25').replace('2014', '平成26').replace('2015', '平成27').replace('2016', '平成28').replace('2017',
          '平成29').replace('2018', '平成30').replace('2019', '平成31').replace('2020', '平成32').replace('2021', '平成33')
      .replace('2022', '平成34').replace('2023', '平成35').replace('2024', '平成36').replace('2025', '平成37').replace('2026',
          '平成38').replace('2027', '平成39').replace('2028', '平成40').replace('2029', '平成41').replace('2030', '平成42')
      .replace('2031', '平成43').replace('2032', '平成44').replace('2033', '平成45').replace('2034', '平成46').replace('1989',
          '平成01').replace('1990', '平成02').replace('1991', '平成03').replace('1992', '平成04').replace('1993', '平成05')
      .replace('1994', '平成06').replace('1995', '平成07').replace('1996', '平成08').replace('1997', '平成09').replace('1924',
          'T13').replace('1925', 'T14').replace('1935', 'S10').replace('1936', 'S11').replace('1937', 'S12').replace(
          '1938', 'S13').replace('1939', 'S14').replace('1940', 'S15').replace('1941', 'S16').replace('1942', 'S17')
      .replace('1943', 'S18').replace('1944', 'S19').replace('1945', 'S20').replace('1946', 'S21').replace('1947',
          'S22').replace('1948', 'S23').replace('1949', 'S24').replace('1950', 'S25').replace('1951', 'S26').replace(
          '1952', 'S27').replace('1953', 'S28').replace('1954', 'S29').replace('1955', 'S30').replace('1956', 'S31')
      .replace('1957', 'S32').replace('1958', 'S33').replace('1959', 'S34').replace('1960', 'S35').replace('1961',
          'S36').replace('1962', 'S37').replace('1963', 'S38').replace('1964', 'S39').replace('1965', 'S40').replace(
          '1966', 'S41').replace('1967', 'S42').replace('1968', 'S43').replace('1969', 'S44').replace('1970', 'S45')
      .replace('1971', 'S46').replace('1972', 'S47').replace('1973', 'S48').replace('1974', 'S49').replace('1975',
          'S50').replace('1976', 'S51').replace('1977', 'S52').replace('1978', 'S53').replace('1979', 'S54').replace(
          '1980', 'S55').replace('1981', 'S56').replace('1982', 'S57').replace('1983', 'S58').replace('1984', 'S59')
      .replace('1985', 'S60').replace('1986', 'S61').replace('1987', 'S62').replace('1988', 'S63').replace('1926',
          'S01').replace('1927', 'S02').replace('1928', 'S03').replace('1929', 'S04').replace('1930', 'S05').replace(
          '1931', 'S06').replace('1932', 'S07').replace('1933', 'S08').replace('1934', 'S09').replace('1998', 'H10')
      .replace('1999', 'H11').replace('2000', 'H12').replace('2001', 'H13').replace('2002', 'H14').replace('2003',
          'H15').replace('2004', 'H16').replace('2005', 'H17').replace('2006', 'H18').replace('2007', 'H19').replace(
          '2008', 'H20').replace('2009', 'H21').replace('2010', 'H22').replace('2011', 'H23').replace('2012', 'H24')
      .replace('2013', 'H25').replace('2014', 'H26').replace('2015', 'H27').replace('2016', 'H28').replace('2017',
          'H29').replace('2018', 'H30').replace('2019', 'H31').replace('2020', 'H32').replace('2021', 'H33').replace(
          '2022', 'H34').replace('2023', 'H35').replace('2024', 'H36').replace('2025', 'H37').replace('2026', 'H38')
      .replace('2027', 'H39').replace('2028', 'H40').replace('2029', 'H41').replace('2030', 'H42').replace('2031',
          'H43').replace('2032', 'H44').replace('2033', 'H45').replace('2034', 'H46').replace('1989', 'H01').replace(
          '1990', 'H02').replace('1991', 'H03').replace('1992', 'H04').replace('1993', 'H05').replace('1994', 'H06')
      .replace('1995', 'H07').replace('1996', 'H08').replace('1997', 'H09').replace('1989', 'H1').replace('1990', 'H2')
      .replace('1991', 'H3').replace('1992', 'H4').replace('1993', 'H5').replace('1994', 'H6').replace('1995', 'H7')
      .replace('1996', 'H8').replace('1997', 'H9');
}

function convertJpYearFromYear(val) {
  return (val.substr(0, 4)).replace('1924', '大正13').replace('1925', '大正14').replace('1935', '昭和10').replace('1936',
      '昭和11').replace('1937', '昭和12').replace('1938', '昭和13').replace('1939', '昭和14').replace('1940', '昭和15').replace(
      '1941', '昭和16').replace('1942', '昭和17').replace('1943', '昭和18').replace('1944', '昭和19').replace('1945', '昭和20')
      .replace('1946', '昭和21').replace('1947', '昭和22').replace('1948', '昭和23').replace('1949', '昭和24').replace('1950',
          '昭和25').replace('1951', '昭和26').replace('1952', '昭和27').replace('1953', '昭和28').replace('1954', '昭和29')
      .replace('1955', '昭和30').replace('1956', '昭和31').replace('1957', '昭和32').replace('1958', '昭和33').replace('1959',
          '昭和34').replace('1960', '昭和35').replace('1961', '昭和36').replace('1962', '昭和37').replace('1963', '昭和38')
      .replace('1964', '昭和39').replace('1965', '昭和40').replace('1966', '昭和41').replace('1967', '昭和42').replace('1968',
          '昭和43').replace('1969', '昭和44').replace('1970', '昭和45').replace('1971', '昭和46').replace('1972', '昭和47')
      .replace('1973', '昭和48').replace('1974', '昭和49').replace('1975', '昭和50').replace('1976', '昭和51').replace('1977',
          '昭和52').replace('1978', '昭和53').replace('1979', '昭和54').replace('1980', '昭和55').replace('1981', '昭和56')
      .replace('1982', '昭和57').replace('1983', '昭和58').replace('1984', '昭和59').replace('1985', '昭和60').replace('1986',
          '昭和61').replace('1987', '昭和62').replace('1988', '昭和63').replace('1926', '昭和01').replace('1927', '昭和02')
      .replace('1928', '昭和03').replace('1929', '昭和04').replace('1930', '昭和05').replace('1931', '昭和06').replace('1932',
          '昭和07').replace('1933', '昭和08').replace('1934', '昭和09').replace('1998', '平成10').replace('1999', '平成11')
      .replace('2000', '平成12').replace('2001', '平成13').replace('2002', '平成14').replace('2003', '平成15').replace('2004',
          '平成16').replace('2005', '平成17').replace('2006', '平成18').replace('2007', '平成19').replace('2008', '平成20')
      .replace('2009', '平成21').replace('2010', '平成22').replace('2011', '平成23').replace('2012', '平成24').replace('2013',
          '平成25').replace('2014', '平成26').replace('2015', '平成27').replace('2016', '平成28').replace('2017', '平成29')
      .replace('2018', '平成30').replace('2019', '平成31').replace('2020', '平成32').replace('2021', '平成33').replace('2022',
          '平成34').replace('2023', '平成35').replace('2024', '平成36').replace('2025', '平成37').replace('2026', '平成38')
      .replace('2027', '平成39').replace('2028', '平成40').replace('2029', '平成41').replace('2030', '平成42').replace('2031',
          '平成43').replace('2032', '平成44').replace('2033', '平成45').replace('2034', '平成46').replace('1989', '平成01')
      .replace('1990', '平成02').replace('1991', '平成03').replace('1992', '平成04').replace('1993', '平成05').replace('1994',
          '平成06').replace('1995', '平成07').replace('1996', '平成08').replace('1997', '平成09')
      + ''
      + (val.substr(4));
}

/**
 * 
 */
(function($) {
  $.widget('wap.wapDatepicker', $.wap.abstractWidget, {
    options : {
      // datepicker properties
      numberOfMonths : 1,
      showButtonPanel : true,
      showOn : 'button',
      showOtherMonths : true,
      selectOtherMonths : true,
      stepMonths : 1,

      // wap-datepicker properties
      wareki : false,
      holidaySelectable : true,
      businessDates : null, // Please refer to defaultBusinessDate
      businessPatterns : null, // Please refer to defaultBusinessPattern
      dateAfterTarget : null,
      dateAfterYear : 0,
      dateAfterMonth : 0,
      dateAfterDate : 0,
      dateBeforeTarget : null,
      dateBeforeYear : 0,
      dateBeforeMonth : 0,
      dateBeforeDate : 0,
      commonlyUsedDate : null,
      commonlyUsedDateTitle : null,
      defaultDate : null,
      minDate : null,
      maxDate : null,
      onlyCountSelectableDate : false, // If true, do not count holidays, Saturday and Sunday
      overMaxMessage : "",
      belowMinMessage : "",
      maxWarningDate : null,
      minWarningDate : null,
      overMaxWarningMessage : "",
      overMaxWarningTitle : "",
      belowMinWarningMessage : "",
      belowMinWarningTitle : "",
      dateTypeErrorMessage : "日付を入力してください。",
      holidayErrorMessage : "土日・祝日以外を入力してください。",
      labeliser : null,
      region : "ja",
      displayFormat : null,

    },
    _wapDatepicker : null,
    _create : function() {
      this._super();
      if (this.element.attr('data-show-button-panel')) {
        this.options.showButtonPanel = this.element.data('showButtonPanel');
      }
      if (this.element.attr('data-show-other-months')) {
        this.options.showOtherMonths = this.element.data('showOtherMonths');
      }
      if (this.element.attr('data-select-other-months')) {
        this.options.selectOtherMonths = this.element.data('selectOtherMonths');
      }
      if (this.element.attr('data-wareki')) {
        this.options.wareki = this.element.data('wareki');
      }
      if (this.element.attr('data-holiday-selectable')) {
        this.options.holidaySelectable = this.element.data('holidaySelectable');
      }
      if (this.element.attr('data-region')) {
        this.options.region = this.element.data('region');
      }
      if (this.element.attr('data-number-of-months')) {
        this.options.numberOfMonths = this.element.data('numberOfMonths');
      }
      this.options.numberOfMonths = Number(this.options.numberOfMonths);
      this.options.stepMonths = Number(this.options.stepMonths);
      this.options.dateAfterYear = Number(this.options.dateAfterYear);
      this.options.dateAfterMonth = Number(this.options.dateAfterMonth);
      this.options.dateAfterDate = Number(this.options.dateAfterDate);
      this.options.dateBeforeYear = Number(this.options.dateBeforeYear);
      this.options.dateBeforeMonth = Number(this.options.dateBeforeMonth);
      this.options.dateBeforeDate = Number(this.options.dateBeforeDate);

      this._wapDatepicker = new WapDatePicker(this.element[0], this.options);
    },
    _destroy : function() {
    },
    _setOption : function(key, value) {
      return this._wapDatepicker.setOption(key, value);
    },
    _setOptions : function(values) {
      return this._wapDatepicker.setOptions(values);
    },
    validate : function() {
      return this._wapDatepicker.validate();
    },
    getDate : function() {
      return this._wapDatepicker.getDate();
    },
    setDate : function(date) {
      return this._wapDatepicker.setDate(date);
    },
    clear : function() {
      return this._wapDatepicker.clear();
    },
  });

  $(function() {
    var autoInstantiationClass = $.wap.wapDatepicker.prototype.widgetFullName;
    // プラグイン外部から既定のクラス名をとるときはこう書きます。
    $('.' + autoInstantiationClass).wapDatepicker();
  });

  var WapDatePicker = function(input, options) {

    /*
     * This goal of this jquery extension is to add popover to datepicker.
     * 
     * The extension is necessary, because when user clicks the datepicker, or changes the month/year of the datepicker,
     * the jquery-ui will replace datepicker content with new generated ones, which makes all initial binding lost. And
     * jquery-ui dont NOT have any parameters allow developers to make this popover extension. So I extend the jquery-ui
     * datepicker prototype. After datepicker get updated, the popovers will be binded to new generated components.
     */

    $.extend($.datepicker, {
      /*
       * Find the business patterns query date belongs to. 
       * Business pattern is the way you can define some business date together as a pattern For example, you can define 7/21 7/22 and 7/23 as summer holiday.
       * 
       * @param {date} date The date need to be judged if it belongs to business patterns. 
       * @param {array.<BusinessPattern>} businessPatterns The array holds all the business patterns. 
       * @return {array.<BusinessPattern>} return the businessPatterns date belongs to. It will be empty array if can't not find.
       */
      _checkBusinessPatterns : function(date, businessPatterns) {
        var resultPatterns = [];
        var businessPatterns = $.makeArray(businessPatterns);
        for (var i = 0; i < businessPatterns.length; ++i) {
          var result = _checkBusinessPattern(date, businessPatterns[i]);
          if (result) {
            resultPatterns.push(result.businessPattern);
          }
        }
        return resultPatterns;
      },
      /*
       * Find the business dates query date belongs to. 
       * @param {date} date The date need to be judged if it belongs to business dates. 
       * @param {array.<BusinessDate>} businessDate The array holds all the business date.
       * @return {array.<BusinessDate>} return the business dates query date belongs to. It will be empty if can't not find.
       */
      _checkBusinessDates : function(date, businessDates) {
        var resultDates = [];
        var businessDates = $.makeArray(businessDates);
        for (var i = 0; i < businessDates.length; ++i) {
          var result = _checkBusinessDate(date, businessDates[i]);
          if (result) {
            resultDates.push(result.businessDate);
          }
        }
        return resultDates;
      },

      /**
       * Find which business days or business patterns that query date belongs to.
       * 
       * @param {date} date The date we need to query.
       * @param {array} settings The datepicker setting stored in jquery-ui.
       * @return {(array.<(BusinessDate|BusinessPattern)>} return the business patterns or business dates query date belongs to. It will be empty array if can't not find.
       *         
       */
      _checkBusinessDayAndPatterns : function(date, settings) {
        var resultBusinessPatterns = this._checkBusinessPatterns(date, settings.businessPatterns);
        var resultBusinessDates = this._checkBusinessDates(date, settings.businessDates);
        return resultBusinessPatterns.concat(resultBusinessDates)
      },
      /*
       * Wrap the label width DIV, the reason for doing this is, if do not use html, sometimes, the popover is not
       * stable. The label will toggle show and show continously.
       */
      _wrapTextIntoDiv : function(data) {
        if (data instanceof Object) {
          if (data.html) {
            return data.description;
          } else {
            return $.proxy(wrapTextIntoHtml, this)(data.description, data.popoverWidth);
          }
        } else {
          return $.proxy(wrapTextIntoHtml, this)(data);
        }

        function wrapTextIntoHtml(htmlString, popoverWidth) {
          htmlString = htmlString || '';
          var width = 0;
          if (popoverWidth) {
            width = popoverWidth;
          } else {
            width = Math.min(200, this._calculateWidthOfText(htmlString));

          }
          /* the text is defined by our developer, it is not necessary to think about XSS.
           * this is a string used by wap-popover, because it is not DOM element, and with dynamic width, so defined
           * like this.
           * Consider about vulnerablity, make a DOM first and use .html to set the content. 
           */
          return $('<div>').append($('<div class="datepicker-popover-content" style="width:'+ width+ 'px' + '">').text(htmlString)).html();
        }

      },

      /*
       * Calculate the real width of the label @param {string} text The text will be put in the label
       */
      _calculateWidthOfText : function(htmlString) {
        var $wrapper = $('<div class="datepicker-popover-label-cal-wrapper">').text(htmlString);
        $wrapper.appendTo($('body'));
        var width = $wrapper.width();
        $wrapper.remove();
        return width;
      },

      /*
       * Add Popover behavior to business date in td 
       * @param {object} $cell The jquery object of <td> 
       * @param {object} instance The instance of current datepicker object.
       */
      _addPopoverForCell : function($cell, instance) {
        var all_ = $cell.closest('.ui-datepicker').find('.ui-datepicker-group');
        var one_ = $cell.closest('.ui-datepicker-group');
        var multiMonthIndex_ = parseInt($(all_).index(one_));
        var myMon = instance.drawMonth;
        if(parseInt($(all_).index(one_))>0){
          myMon = myMon + multiMonthIndex_;
        }
        var myYear = instance.drawYear;
        var myDay = parseInt($cell.text(), 10);
        var row = $cell.parent().parent().children().index($cell.parent());
        var widget = this;

        // the last some day will be shown in next month. This logic handle this case.
        if (row === 0 && myDay > 20) {
          myMon--;
        }
        // the first some day will be shown in the previous month. This logic handle this case.
        if (myDay < 7 && row > 2) {
          myMon++;
        }

        var userSelectDay = new Date(myYear, myMon, myDay);
        var resultBusinessEvents = widget._checkBusinessDayAndPatterns(userSelectDay, instance.settings);
        if (resultBusinessEvents.length == 0) {//No business event, then return directly, otherwise, show the popover. 
          return;
        }

    
        /*
        * The reason for wrapping is: 
        * If we don't define the popover defination to wrapper, the popover will create a <div>, and append it to <tr>
        * which make all the <td> adjust it position, jumping from one side to another side. 
        */
        var $wrapper = $('<div>');
        var $children = $cell.children();
        
        $cell.empty();
        $wrapper.append($children);
        $cell.append($wrapper);

        var options = {'html':true, 'toggle':'popover', 'trigger':'hover'};
        
        /*
         * Find the most series business events 
         */
        function findMostSeriousStyle(businessEvents){
           var EVENST_SERIOUS_MAP = {'Default': 0, 'White': 1, 'Info': 2, 'Warning': 3};
           var mostSeriousOne = 'Default';
           for(var i = 0; i < businessEvents.length; i++){
              if(EVENST_SERIOUS_MAP[mostSeriousOne] < EVENST_SERIOUS_MAP[businessEvents[i].popoverStyle]){
                mostSeriousOne = businessEvents[i].popoverStyle;
              }
           }
           return mostSeriousOne;
        }

        function getPopoverStyle(style){
          switch (style) {
           
            case 'White': {
              return 'popover-white';
            }
            case 'Warning': {
              return 'popover-warning';
            }
            case 'Info': {
              return 'popover-info';
            }
            default:
              return 'popover-default';
          }
        }
      

        if(resultBusinessEvents.length === 1){

          var onlyBusinessEvent = resultBusinessEvents[0];//This is the only event. 
          $wrapper.data('placement', onlyBusinessEvent.position ? onlyBusinessEvent.position : 'bottom'); //special attribute for wap-popover option, define position based on first business event.

          if (!onlyBusinessEvent.title && !onlyBusinessEvent.description) {
            return; 
          } 
          else if (onlyBusinessEvent.title && !onlyBusinessEvent.description) {
            // this attribute is used by popover function. NOT data used by this code itself.
            /* FIXME: Popover may have a bug make data custom attribute can't work.
               After Popover use custom data attribute, please change this code to data custom attribute */
            $wrapper.attr('data-content', this._wrapTextIntoDiv(onlyBusinessEvent.title)); 
          }
          else {
            /* FIXME: Popover may have a bug make data custom attribute can't work.
               After Popover use custom data attribute, please change this code to data custom attribute */
            $wrapper.attr('data-original-title', onlyBusinessEvent.title); 
            $wrapper.attr('data-content', this._wrapTextIntoDiv(onlyBusinessEvent)); 
          }
          $wrapper.addClass(getPopoverStyle(onlyBusinessEvent.popoverStyle));

        }
        else{

          function getEventDomString(businessEvent, i){
           
            var $div = $('<div>');
            
            var text = businessEvent.title || businessEvent.description;

            if(text){
              var $title = $('<label class="date-picker-event popover-title multi-events-title">');
              $title.addClass(getPopoverStyle(businessEvent.popoverStyle));
              $title.text(i + ". " + text);
              $div.append($title);
            }
           
            return $('<div>').append($div).html();

          }
         /*
          * If there is are more than one business event for single day. List them all by html.
          * And the outer wrapper style is info.
          */
          var concatEventTitleHtml = '<div class="datepicker-multi-events-wrapper" >';
          for(var i = 0; i < resultBusinessEvents.length; i++){
             concatEventTitleHtml += getEventDomString(resultBusinessEvents[i], i+1);

          }
          concatEventTitleHtml += '</div>';

          /* FIXME: Popover may have a bug make data custom attribute can't work.
               After Popover use custom data attribute, please change this code to data custom attribute */
          $wrapper.attr('data-content', concatEventTitleHtml); 
          $wrapper.addClass(getPopoverStyle(findMostSeriousStyle(resultBusinessEvents)));//add popover class for date with more than 1 events. 
        }
        
        $wrapper.popover(options);
        $cell.removeAttr('title');

        /*
         * For some disabled date, the $cell will have class ui-state-disabled. That class defined filter and opacity.
         * And the popover is a child of the $cell, therefore the popover is transparent. When mouseenter, remove
         * ui-state-disabled class to make popover show normally. When mouseout, make the ui-state-disabled class
         * back.
         */
        $wrapper.bind('mouseenter', function() {
          var $el = $(this);
          var pop = $($el.next());
          var classes = $el.attr('class');
          $el.parent().find('.multi-events-title').css('display', 'block');
          if (pop && !pop.hasClass(classes)) {
            pop.addClass(classes);
          }
          if ($el.parent().hasClass('ui-state-disabled')) {
            $el.parent().data('wap-disabled', "true");
            $el.parent().removeClass('ui-state-disabled');
          }
        });
        $wrapper.bind('mouseout', function() {
          var $el = $(this);
          if ($el.parent().data('wap-disabled')) {
            $el.parent().removeData('wap-disabled');
            $el.parent().addClass('ui-state-disabled');
          }

        });

        
      },
      /*
       * My function to bind data popover to calendar cells. 
       * @param {object} instance Instance of current datepicker.
       */
      _bindDatePopover : function(instance) {
        var widget = this;
        var dates = $('#ui-datepicker-div td');

        dates.each(function(index, cell) {
          $.proxy(widget._addPopoverForCell, widget)($(cell), instance);
        });
      },

   
    /*
     * @override 
     * This goal of this jquery extension is to add popover to datepicker. The reason is exaplained on the top of the extension.
     *
     * This function will be called after each datepicker updates, that means, after datepicker content is replaced with new generated content. 
     * In this function only first line is written by me. 
     *
     */

      _attachHandlers : function(instance) {
        this._bindDatePopover(instance); // here to bind our popover behavior. other codes are copied from jquery-ui.
        //The extension is done by $.extend, not $.widget so this._super is undefined, use proto to get ancester function instead
        return Object.getPrototypeOf($.datepicker)._attachHandlers.call(this, instance);
      }

    });

    function _init(isUpdate) {
      // datepickerのOption指定（非公開)
      options.closeText = $.datepicker.regional[options.region].closeText;
      options.prevText = $.datepicker.regional[options.region].prevText;
      options.nextText = $.datepicker.regional[options.region].nextText;
      options.currentText = $.datepicker.regional[options.region].currentText;
      options.monthNames = $.datepicker.regional[options.region].monthNames;
      options.monthNamesShort = $.datepicker.regional[options.region].monthNamesShort;
      options.dayNames = $.datepicker.regional[options.region].dayNames;
      options.dayNamesShort = $.datepicker.regional[options.region].dayNamesShort;
      options.dayNamesMin = $.datepicker.regional[options.region].dayNamesMin;
      options.weekHeader = $.datepicker.regional[options.region].weekHeader;
      if (options.displayFormat) {
        options.dateFormat = options.displayFormat;
      } else {
        options.dateFormat = $.datepicker.regional[options.region].dateFormat;
      }
      options.firstDay = $.datepicker.regional[options.region].firstDay;
      options.isRTL = $.datepicker.regional[options.region].isRTL;
      options.showMonthAfterYear = $.datepicker.regional[options.region].showMonthAfterYear;
      options.yearSuffix = $.datepicker.regional[options.region].yearSuffix;

      options.beforeShowDay = _beforeShowDay;
      options.beforeShow = _beforeShow;
      options.onChangeMonthYear = _onChangeMonthYear;
      options.onSelect = _onSelect;
      options.buttonText = "";
      options = _convertPropertiesToDate(options);

      _setDate(options.defaultDate);

      if (isUpdate) {
        $(input).datepicker("option", options);
      } else {
        $(input).datepicker(options);
        _wrapElement();
        _addButtonClass();
        _bindEvents();
      }

      _initRangeIndex(options.dateFormat);

      return input;
    }
    var beSpinningFlg = null;
    // inputエリアでspin実行中のみtrueとなるフラグ

    var dayMinIdx = -1;
    var dayMaxIdx = -1;
    var monthMinIdx = -1;
    var monthMaxIdx = -1;
    var yearMinIdx = -1;
    var yearMaxIdx = -1;
    var allSelectIdx = -1;

    var idxArray = [];
    var dateRange = {};
    var currentRangeIdx = -1;

    function _setDate(date) {
      var value = _convertToDate(date);
      if (!value) {
        return null;
      }
      if (options.wareki) {
        $(input).val(convertJpFormatYearFromYear(_formatDate(value)));
      } else {
        $(input).val($.datepicker.formatDate(options.dateFormat, value, options));
      }
    }

    function _initRangeIndex(format) {
      // format内の文字列をフォーマット後のStringにおけるlengthで計算。
      // yy,mm,dd,M,Dらを想定、要追加。適宜。
      var diff = 0;
      var year = format.indexOf('yy');
      var month = format.indexOf('mm');
      var day = format.indexOf('dd');
      var monthName = format.indexOf('M');
      var dayName = format.indexOf('D');

      if (monthName >= 0) {
        if (options.region == 'en-GB') {
          diff += 2;
          if (monthName < year) {
            year += 2;
          }
          ;
          if (monthName < month) {
            month += 2;
          }
          ;
          if (monthName < day) {
            day += 2;
          }
          ;
        } else {
          diff += 1;
          if (monthName < year) {
            year += 1;
          }
          ;
          if (monthName < month) {
            month += 1;
          }
          ;
          if (monthName < day) {
            day += 1;
          }
          ;
        }
      }

      if (dayName >= 0 && options.region == 'en-GB') {
        diff += 2;
        if (dayName < year) {
          year += 2;
        }
        ;
        if (dayName < month) {
          month += 2;
        }
        ;
        if (dayName < day) {
          day += 2;
        }
        ;
        if (dayName < monthName) {
          monthName += 2;
        }
        ;
      }

      if (year == -1) {
        if (month >= 0) {
          monthMinIdx = month;
          monthMaxIdx = month + 2;
        } else if (monthName >= 0) {
          if (options.region === 'en-GB') {
            monthMinIdx = monthName;
            monthMaxIdx = monthName + 3;
          } else {
            monthMinIdx = monthName;
            monthMaxIdx = monthName + 2;
          }
        }
        ;
        if (day >= 0) {
          dayMinIdx = day;
          dayMaxIdx = day + 2;
        }
        ;
      } else {
        diff += 2;
        yearMinIdx = year;
        yearMaxIdx = year + 4;
        if (month >= 0) {
          if (year < month) {
            monthMinIdx = month + 2;
            monthMaxIdx = month + 4;
          } else {
            monthMinIdx = month;
            monthMaxIdx = month + 2;
          }
        } else if (monthName >= 0) {
          if (year < monthName) {
            monthMinIdx = monthName + 2;
            monthMaxIdx = monthName + 4;
          } else {
            monthMinIdx = monthName;
            monthMaxIdx = monthName + 2;
          }
          if (options.region === 'en-GB') {
            monthMaxIdx++;
          }
          ;
        }
        if (year < day) {
          dayMinIdx = day + 2;
          dayMaxIdx = day + 4;
        } else if (day >= 0) {
          dayMinIdx = day;
          dayMaxIdx = day + 2;
        }
        ;
      }
      ;
      allSelectIdx = format.length + diff;

      idxArray = new Array();
      idxArray.push({
        start : yearMinIdx,
        end : yearMaxIdx
      });
      idxArray.push({
        start : monthMinIdx,
        end : monthMaxIdx
      });
      idxArray.push({
        start : dayMinIdx,
        end : dayMaxIdx
      });
      idxArray.sort(function(a, b) {
        return a.start > b.start;
      });
      dateRange = {
        start : dayMinIdx,
        end : dayMaxIdx
      };
    }

    function _addButtonClass() {
      setTimeout(function() {
        $(".ui-datepicker-trigger").addClass("wap-icon-calendar");
        $(".ui-datepicker-trigger").addClass("wap-datepicker-button");
      }, 1);
    }

    function _wrapElement() {
      setTimeout(function() {
        $button = $(input).next();
        $(input).wrapAll('<div></div>');
        $div = $(input).parent();
        $div.append($button);
        $div.addClass('wap-datePickerArea');
      }, 1);
    }

    function _convertPropertiesToDate(options) {
      options.minDate = _convertToDate(options.minDate, options.onlyCountSelectableDate);
      options.maxDate = _convertToDate(options.maxDate, options.onlyCountSelectableDate);
      options.minWarningDate = _convertToDate(options.minWarningDate, options.onlyCountSelectableDate);
      options.maxWarningDate = _convertToDate(options.maxWarningDate, options.onlyCountSelectableDate);

      if (options.businessDates instanceof Array) {
        for ( var i in options.businessDates) {
          options.businessDates[i].date = _convertToDate(options.businessDates[i].date);
        }
      } else {
        if (options.businessDates != null) {
          options.businessDates.date = _convertToDate(options.businessDates.date);
        }
      }

      for ( var i in options.commonlyUsedDate) {
        if (!options.commonlyUsedDate[i]) {
          continue;
        }
        options.commonlyUsedDate[i].date = _convertToDate(options.commonlyUsedDate[i].date);
      }

      return options;
    }

    function makeLabelisedLabel(_input, val) {
      var $label = options.labeliser(_input, val);
      if (null != $label) {
        $label = $($label);
        return $label.addClass('labelised');
      }
    }

    function _onSelect(dateText, inst) {
      var $input = $(input);
      var value = $input.val();
      if (options.wareki) {
        value = convertYearFromJpFormatYear(value);
      }
      var date = _convertToDateType(value);
      if (date instanceof Date) {
        _changeDate('', date);
      }
      _checkValue();

      if (options.wareki) {
        var dateStr = _formatYYYY_MM_DDFromVariousStr($input.val());
        dateStr = dateStr.replace(/\//g, '');
        dateStr = _formartDateNengetuHiYoubiFromYYYYMMDD(dateStr);
        // 年月日曜日形式に変更
        $input.val(convertJpFormatYearFromYear(dateStr));
      } else {
        $input.val($input.val().replace('_', ''));
      }
      if (null != options.labeliser) {
        var $labelisedLabel = makeLabelisedLabel($input, date);
        if (null != $labelisedLabel) {
          $input.siblings(".labelised").remove();
          $input.after($labelisedLabel);
          $input.hide();
          $labelisedLabel.on('click focus', function(ev) {
            $input.show().focus();
          });
        }
      }
      $input.trigger('afterSelect');
    }

    function _validate() {
      var result = {
        checkResult : 'ok',
        alertMessage : ""
      };
      var date = convertYearFromJpFormatYear($(input).val());

      if (!(date instanceof Date)) {
        // 日付に変換
        date = _convertToDateType(date);
        if (!(date instanceof Date)) {
          result.checkResult = 'error';
          result.alertMessage = options.dateTypeErrorMessage;
          return result;
        }
      }
      // Errorのチェック
      if (_isOverMaxError(date)) {
        result.checkResult = 'error';
        result.alertMessage = options.overMaxMessage;
        return result;
      }
      if (_isBelowMinError(date)) {
        result.checkResult = 'error';
        result.alertMessage = options.belowMinMessage;
        return result;
      }
      var resultBusinessDate = _checkBusinessDates(date);
      if (resultBusinessDate && resultBusinessDate.businessDate.type == 'error') {
        result.checkResult = 'error';
        result.alertMessage = resultBusinessDate.businessDate.alertMessage;
        return result;
      }
      var resultBusinessPattern = _checkBusinessPatterns(date);
      if (resultBusinessPattern && resultBusinessPattern.businessPattern.type == 'error') {
        result.checkResult = 'error';
        result.alertMessage = resultBusinessPattern.businessPattern.alertMessage;
        return result;
      }
      var resultHoliday = _checkHoliday(date);
      if (resultHoliday != null && !options.holidaySelectable) {
        result.checkResult = 'error';
        result.alertMessage = options.holidayErrorMessage;
        return result;
      }

      // Warningのチェック
      if (_isOverMaxWarning(date)) {
        result.checkResult = 'warning';
        result.alertMessage = options.overMaxWarningMessage;
        return result;
      }
      if (_isBelowMinWarning(date)) {
        result.checkResult = 'warning';
        result.alertMessage = options.belowMinWarningMessage;
        return result;
      }
      if (resultBusinessDate && resultBusinessDate.businessDate.type == 'warning') {
        result.checkResult = 'warning';
        result.alertMessage = resultBusinessDate.businessDate.alertMessage;
        return result;
      }
      if (resultBusinessPattern && resultBusinessPattern.businessPattern.type == 'warning') {
        result.checkResult = 'warning';
        result.alertMessage = resultBusinessPattern.businessPattern.alertMessage;
        return result;
      }
      return result;
    }

    function _checkValue() {
      var validationResult = _validate();
      _triggerChangeDate(validationResult.checkResult, validationResult.alertMessage);
    }

    function _isOverMaxError(date) {
      if (!options.maxDate) {
        return false;
      }
      if (date <= options.maxDate) {
        return false;
      }
      return true;
    }

    function _isBelowMinError(date) {
      if (!options.minDate) {
        return false;
      }
      if (date >= options.minDate) {
        return false;
      }
      return true;
    }

    function _isOverMaxWarning(date) {
      if (!options.maxWarningDate) {
        return false;
      }
      if (date <= options.maxWarningDate) {
        return false;
      }
      return true;
    }

    function _isBelowMinWarning(date) {
      if (!options.minWarningDate) {
        return false;
      }
      if (date >= options.minWarningDate) {
        return false;
      }
      return true;
    }

    function _triggerChangeDate(checkResult, alertMessage) {
      var $input = $(input);
      var event = jQuery.Event("changeDate");
      event.checkResult = checkResult;
      event.alertMessage = alertMessage;
      $input.trigger(event);
    }

    function _beforeShow(element, inst) {
      $(input).trigger('beforeShow');
      _addWapClass(inst);
      _writePrevNextImage(inst);
      _overWriteYear(inst);
      _makeTodayWorkable(element.id, options, inst);
      _suggestUsedDay(element.id, options, inst);
    }

    function _onChangeMonthYear(year, month, inst) {
      _addWapClass(inst);
      _writePrevNextImage(inst);
      _overWriteYear(inst);
      _makeTodayWorkable(inst.id, options, inst);
      _suggestUsedDay(inst.id, options, inst);
    }

    function _beforeShowDay(date) {
      var result = [
        true
      ];
      var resultHoliday = _checkHoliday(date);
      if (resultHoliday) {
        result = $.extend(result, resultHoliday);
      }
      var resultBusinessPattern = _checkBusinessPatterns(date);
      if (resultBusinessPattern) {
        result = $.extend(result, resultBusinessPattern.day);
      }
      var resultBusinessDate = _checkBusinessDates(date);
      if (resultBusinessDate) {
        result = $.extend(result, resultBusinessDate.day);
      }

      if (_isOverMaxError(date) || _isBelowMinError(date)) {
        result[1] = result[1] + " " + _getTypeCss("error");
      } else if (_isOverMaxWarning(date)) {
        result[1] = result[1] + " " + _getTypeCss("warning");
        result[2] = result[2] ? result[2] + "\n" + options.overMaxWarningTitle : options.overMaxWarningTitle;
      } else if (_isBelowMinWarning(date)) {
        result[1] = result[1] + " " + _getTypeCss("warning");
        result[2] = result[2] ? result[2] + "\n" + options.belowMinWarningTitle : options.belowMinWarningTitle;
      }

      return result;
    }

    function _overWriteYear(inst) {
      // if (options.wareki) {
      // 和暦を読み取ってCALENDARの表示月を変更する
      var dateForDispCaldr = (convertYearFromJpFormatYear(inst.input.val())).replace('年', '/').replace('月', '/')
          .replace('日', '');
      inst.settings['defaultDate'] = new Date(dateForDispCaldr.substr(0, 10));
      // }

      if (beSpinningFlg) {
        var inputFormVal = inst.input.val();
        if (options.wareki) {
          inputFormVal = convertYearFromJpFormatYear(inst.input.val());
        }
        inst.drawYear = inputFormVal.substr(0, 4) - 0;// 1997
        inst.drawMonth = inputFormVal.substr(5, 2) - 1;// 00-11
        inst.selectedYear = inputFormVal.substr(0, 4) - 0;// 1997
        inst.selectedMonth = inputFormVal.substr(5, 2) - 1;// 00-11
        inst.selectedDay = inputFormVal.substr(8, 2);
        inst.currentYear = inputFormVal.substr(0, 4) - 0;// 1997
        inst.currentMonth = inputFormVal.substr(5, 2) - 1;// 00-11
        inst.currentDay = inputFormVal.substr(8, 2);
        beSpinningFlg = false;
      }

      if (options.wareki) {
        // 描画された後に
        setTimeout(function() {
          var year = $(inst.dpDiv).find('span.ui-datepicker-year').html();
          var wareki = _getWareki(year);
          $(inst.dpDiv).find('span.ui-datepicker-year').html(wareki);

        }, 1);
      }
    }

    function _addWapClass(inst) {
      $(inst.dpDiv).addClass('wap-datepicker');
    }

    function _writePrevNextImage(inst) {
      setTimeout(function() {
        $(inst.dpDiv).find('span.ui-icon-circle-triangle-w').removeClass("ui-icon-circle-triangle-w").removeClass(
            "ui-icon").addClass("wap-icon-arrow-left").html("");
        $(inst.dpDiv).find('span.ui-icon-circle-triangle-e').removeClass("ui-icon-circle-triangle-e").removeClass(
            "ui-icon").addClass("wap-icon-arrow-right").html("");
      }, 1);
    }

    function _checkHoliday(date) {
      var selectable = options.holidaySelectable;
      var typeCss = selectable ? "" : _getTypeCss("error");
      var result = null;
      var dateString = _formatDateYYYYMMDD(date);
      // wap-datepicker-ja.js参照 あくまでmock用なので、祝日はベタ書き
      var holiday = holidays[dateString];
      if (holiday) {
        result = [
          selectable, 'wap-datepicker-holiday' + " " + typeCss, holiday.title
        ];
        return result;
      }
      switch (date.getDay()) {
      case 0:
        result = [
          selectable, 'wap-datepicker-sunday' + " " + typeCss
        ];
        break;
      case 6:
        result = [
          selectable, 'wap-datepicker-saturday' + " " + typeCss
        ];
        break;
      }
      return result;
    }

    ;

    function _checkBusinessPatterns(date) {
      var businessPatterns = options.businessPatterns;
      var result;
      if (!businessPatterns) {
        return null;
      }
      if (businessPatterns instanceof Array) {
        for ( var i in businessPatterns) {
          result = _checkBusinessPattern(date, businessPatterns[i]);
          if (result) {
            break;
          }
        }
      } else {
        result = _checkBusinessPattern(date, businessPatterns);
      }
      return result;
    }

    function _checkBusinessPattern(date, businessPattern) {
      var defaultBusinessPattern = {
        year : "",
        month : "",
        dateOrday : 'date',
        date : "",
        dayNumberOfMonth : "",
        day : "",
        type : 'normal',
        alertMessage : "",
        colorType : null,
        title : "",
      };
      var setting = $.extend(defaultBusinessPattern, businessPattern);
      if (_isMatchPattern(date, setting)) {
        return {
          day : [
            _isSelectable(setting.type), _getColorCss(setting.colorType) + " " + _getTypeCss(setting.type),
            setting.title
          ],
          businessPattern : setting
        };
      }
      return null;
    }

    function _isMatchPattern(date, businessPattern) {
      var toArray = function(target) {
        if (!target) {
          return null;
        }
        return target instanceof Array ? target : target.split(",");
      };
      var years = toArray(businessPattern.year);
      var months = toArray(businessPattern.month);
      if (businessPattern.dateOrday == 'day') {
        var dayNumberOfMonths = toArray(businessPattern.dayNumberOfMonth);
        var days = toArray(businessPattern.day);
        if (_isContainsYear(date, years)
            && _isContainsMonth(date, months)
            && _isContainsDayNumber(date, dayNumberOfMonths)
            && _isContainsDay(date, days)) {
          return true;
        }
      } else {
        var dates = toArray(businessPattern.date);
        if (_isContainsYear(date, years) && _isContainsMonth(date, months) && _isContainsDate(date, dates)) {
          return true;
        }
      }
      return false;
    }

    function _isContainsYear(date, years) {
      if (!years) {
        return true;
      }
      return $.inArray(date.getFullYear().toString(), years) >= 0;
    }

    function _isContainsMonth(date, months) {
      if (!months) {
        return true;
      }
      return $.inArray((date.getMonth() + 1).toString(), months) >= 0;
    }

    function _isContainsDayNumber(date, dayNumberOfMonths) {
      if (!dayNumberOfMonths) {
        return true;
      }
      return $.inArray(_getDayNumberOfMonth(date).toString(), dayNumberOfMonths) >= 0;
    }

    function _isContainsDay(date, days) {
      if (!days) {
        return true;
      }
      return $.inArray(date.getDay().toString(), days) >= 0;
    }

    function _isContainsDate(date, dates) {
      if (!dates) {
        return true;
      }
      return $.inArray(date.getDate().toString(), dates) >= 0;
    }

    function _checkBusinessDates(date) {
      var businessDates = options.businessDates;
      var result;
      if (!businessDates) {
        return null;
      }
      if (businessDates instanceof Array) {
        for ( var i in businessDates) {
          result = _checkBusinessDate(date, businessDates[i]);
          if (result) {
            break;
          }
        }
      } else {
        result = _checkBusinessDate(date, businessDates);
      }
      return result;
    }

    function _checkBusinessDate(date, businessDate) {
      var defaultBusinessDate = {
        date : null,
        type : 'normal',
        alertMessage : "",
        colorType : null,
        title : "",
      };
      var setting = $.extend(defaultBusinessDate, businessDate);
      if (_isBusinessDate(date, setting)) {
        return {
          day : [
            _isSelectable(setting.type), _getColorCss(setting.colorType) + " " + _getTypeCss(setting.type),
            setting.title
          ],
          businessDate : setting
        };
      }
      return null;
    }

    function _isBusinessDate(date, setting) {
      var dateString = _formatDateYYYYMMDD(date);
      var settingDateString = _formatDateYYYYMMDD(setting.date);
      if (settingDateString == dateString) {
        return true;
      }
      return false;
    }

    // yyyyMMddで書かれたStringや、-1（昨日）、+1(明日)とかの表記をDateで返す。
    // 'onlyCountSelectableDate' option used for counting strategy
    function _convertToDate(date, onlyCountSelectableDate) {
      if (!date && date !== 0) {
        return null;
      }
      if (typeof date === "undefined") {
        return null;
      }
      if (date instanceof Date) {
        return new Date(date.getFullYear(), date.getMonth(), date.getDate());
      }
      if (typeof date == "string") {
        return Date.parseExact(date.substring(0, 10), 'yyyy/MM/dd');
      }
      // otherwise use 'date' parameter as integer
      var daysOffset = parseInt(date);
      if (isNaN(daysOffset)) {
        return null;
      }
      var targetDay = new Date();
      if (onlyCountSelectableDate) {
        var count = 0;
        while (count !== daysOffset) {
          targetDay.setDate((daysOffset < 0) ? (targetDay.getDate() - 1) : (targetDay.getDate() + 1));
          var result = _checkHoliday(targetDay);
          if (result == null || result[0]) {
            (daysOffset < 0) ? (count--) : (count++);
          }
        }
      } else {
        targetDay.setDate(targetDay.getDate() + daysOffset);
      }
      return targetDay;
    }

    function _formatDateYYYYMMDD(date) {
      return _formatDate(date, 'yymmdd');
    }

    function _isSelectable(type) {
      if (type == 'error') {
        return false;
      }
      return true;
    }

    function _getColorCss(colortype) {
      var result = "";
      switch (colortype) {
      case "blue":
        result = "wap-datepicker-blue";
        break;
      case "green":
        result = "wap-datepicker-green";
        break;
      case "red":
        result = "wap-datepicker-red";
        break;
      case "yellow":
        result = "wap-datepicker-yellow";
        break;
      default:
        break;
      }
      return result;
    }

    function _getTypeCss(type) {
      var result = "";
      switch (type) {
      case "error":
        result = "wap-datepicker-error";
        break;
      case "warning":
        result = "wap-datepicker-warning";
        break;
      default:
        break;
      }
      return result;
    }

    function _getDayNumberOfMonth(date) {
      return Math.floor((date.getDate() + 6) / 7);
    }

    function _getWareki(year) {
      if (year > 1988) {
        result = year - 1988;
        result = '平成' + result;
        return result;
      } else if (year > 1925) {
        result = year - 1925;
        result = '昭和' + result;
        return result;
      } else if (year > 1911) {
        result = y - 1911;
        result = '大正' + result;
        return result;
      } else if (year > 1867) {
        result = year - 1867;
        result = '明治' + result;
        return result;
      }
    }

    // 日付を指定した形式の文字列に変換する。format未指定なら、$.datepicker.regional['ja'].dateformatの値で行います。
    function _formatDate(date, format) {
      var dateformat = (format !== undefined) ? format : $.datepicker.regional['ja'].dateFormat;
      return ($.datepicker.formatDate(dateformat, date, $.datepicker.regional['ja'])).replace('_', '');
    }

    /**
     * 「今日」ボタンを有効にする
     */
    function _makeTodayWorkable(elementId, options, inst) {
      var nowDate = new Date();
      var html = '<table style="width:0px;height:0px; display:none"><tbody><tr><td id="todayHiddenButton" onmousedown="javascript:$.datepicker._selectDay(\'#'
          + elementId
          + '\',\''
          + nowDate.getMonth()
          + '\',\''
          + nowDate.getFullYear()
          + '\',this);"><a>'
          + nowDate.getDate()
          + '</a></td></tr></tbody></table>';
      setTimeout(function() {
        $(inst.dpDiv).find('button.ui-datepicker-current').after(html);
        $(inst.dpDiv).find('button.ui-datepicker-current').mousedown(function() {
          setTimeout(function() {
            $('#todayHiddenButton').mousedown();
          }, 1);
        });
      }, 1);
    }

    /**
     * よく使われる日付
     */
    function _suggestUsedDay(elementId, options, inst) {
      var commonlyUsedDateTitle = options['commonlyUsedDateTitle'];
      if (commonlyUsedDateTitle == null || commonlyUsedDateTitle.length == 0) {
        commonlyUsedDateTitle = 'Commonly Used Date';
      }
      var commonlyUsedDateOpt = options['commonlyUsedDate'];
      if (commonlyUsedDateOpt == null || commonlyUsedDateOpt.length == 0) {
        return;
      }
      var html = '';
      for (var i = 0; i < commonlyUsedDateOpt.length; i++) {
        var usedDateOpt = commonlyUsedDateOpt[i];

        html = html
            + '<tr style="border-collapse: separate;"><td class="wap-datepicker-suggestDate" style="border-collapse: separate;padding:3px 2px 3px 12px;" onmousedown="javascript:$.datepicker._selectDay(\'#'
            + elementId
            + '\',\''
            + (usedDateOpt['date'].getMonth())
            + '\',\''
            + usedDateOpt['date'].getFullYear()
            + '\',this);"><a style="display:none">'
            + usedDateOpt['date'].getDate()
            + '</a>'
            + usedDateOpt['caption']
            + '</td></tr><tr><td style="padding:2px 2px 2px 12px;"></td></tr>';
      }

      html = '<div style="margin-top:45px;" class="datelistdatepick">'
          + ' <table style="border-collapse: separate;"><tbody>'
          + ' <tr><td style="padding:5px 0px 3px 0px;">'
          + commonlyUsedDateTitle
          + '</td></tr>'
          + html;

      html = html + '</tbody></table></div>';
      setTimeout(function() {
        if ($(inst.dpDiv).find('.datelistdatepick').length == 0) {
          $(inst.dpDiv).find('div.ui-datepicker-buttonpane').after(html);
        }
      }, 1);
    }

    function _bindEvents() {
      var $input = $(input);

      $input.on('keyup', function() {
        var date = _getDate();
        if (date) {
          _changeDate('', date);
        }
        _checkValue();
      });

      $input.on('click', function() {
        _setSelectionRange();
      });

      $input.on('focus', function(ev) {
        if (null != options.labeliser) {
          $input.siblings(".labelised").remove();
          $input.show();
        }
        if (options.wareki) {
          $input.val(($input.val()).replace(/\s/g, ''));
        }
        $input.val(($input.val()).replace('_', ''));
        // 日付窓がタブなどで選択されたときはdateをselectedにする
        var val = $input.val();
        $input.val(val);

        setTimeout(function(){
          var date = _getDate();
          var inst = $.datepicker._getInst(ev.target);
          inst.input.val($.datepicker.formatDate(options.dateFormat, date, options));
          try {
            if (date) {
              $.datepicker._setDateFromField(inst);
              $.datepicker._updateAlternate(inst);
              $.datepicker._updateDatepicker(inst);
            }
          }
          catch (err) {
          }
        },1);

      });

      $input.on('blur', function(ev) {
        // 空欄もしくはスペースのみの場合は空欄として処理
        var val = $input.val();
        if (!val || 0 === val.length) {
          return;
        }

        if (options.wareki) {
          val = convertYearFromJpFormatYear(val);

        }
        // 日付書式が正しければ変換
        try {
          val = _convertToDateType(val);
        } catch (e) {
          val = _formatYYYY_MM_DDFromVariousStr(val);
          val = Date.parseExact(val, 'yyyy/MM/dd');
        }

        if ($.datepicker._datepickerShowing && !$('.ui-datepicker-close').hasClass('ui-state-hover')) {
          // datepicker表示中かつ「閉じるボタン」が選択中でなければ、はinput内部のフォーマットを整形する必要がない
          // 閉じるボタンを選択している場合は、閉じたあとに日付を整形しなければならない
        } else {
          if (val instanceof Date) {
            if (options.wareki) {
              $input.val(_getWareki(val.toString('yyyy')) + '' + val.toString('年MM月dd日(ddd)'));
            } else {
              $input.val($.datepicker.formatDate(options.dateFormat, val, options));
            }
          } else {
            // TODO
          }
        }
        _changeDate(input.id, val);
        if (null != options.labeliser) {
          var $labelisedLabel = makeLabelisedLabel($input, val);
          $input.siblings(".labelised").remove();
          $input.after($labelisedLabel);
          $input.hide();
          $labelisedLabel.on('click focus', function(ev) {
            $input.show().focus();
          });
        }
      });

      $input.on('keydown', function(ev) {
        _onKeyDown(ev);
      });
      if (!deviceInfo.desktop()) {
        $input.get(0).readOnly = true;
        _bindEventsForSmartDevices($input);
      }
    }

    function _bindEventsForSmartDevices($input) {
      $input.on('click', function(e) {
        $(this).datepicker('show');
        // to avoid invisible when input is not aligned to left.
        if(deviceInfo.mobile()){
          $('#ui-datepicker-div').css('left','7px');
        }
      });
      if (!$.data($('#ui-datepicker-div').get(0), 'smartDeviceInitialized')) {
        $('#ui-datepicker-div').on('touchstart', 'td', function(e){
          $(this).find('a').addClass('touched');
        });
        $('#ui-datepicker-div').on('touchend', 'tbody', function(e){
          $(this).find('a.touched').removeClass('touched');
        });
        $('#ui-datepicker-div').on('touchstart', function(e) {
          var touches = e.originalEvent.touches;
          this.startx = touches[0].clientX;
          this.starty = touches[0].clientY;
          if (touches.length > 1) {
            this.gestureStartx = (touches[1].clientX + this.startx) / 2;
            this.gestureStarty = (touches[1].clientY + this.starty) / 2;
          }
        }).on('touchend', function(e) {
          var changedTouches = e.originalEvent.changedTouches;
          this.endx = changedTouches[0].clientX;
          this.endy = changedTouches[0].clientY;
          var xmove = this.endx - this.startx;
          if (Math.abs(xmove) > 20) {
            if (xmove > 0) {
              $(this).find('.ui-datepicker-prev').click();
            } else {
              $(this).find('.ui-datepicker-next').click();
            }
          }
        }).on('touchmove', function(e) {
          e.preventDefault();
        }).addClass(deviceInfo.tablet() ? 'wap-datepicker-for-tablet' : 'wap-datepicker-for-smartphone');
        $.data($('#ui-datepicker-div').get(0), 'smartDeviceInitialized', 'true');
      }
    }

    /**
     * 日付変換ができるかどうかの確認(yyyy/mm/ddのみ対応しています)
     */
    function _convertToDateType(val) {
      var valforlog = val;
      var dateVal = $.datepicker.parseDate(options.dateFormat, val, options);
      if (dateVal) {
        return dateVal;
        // $(this).val(val.toString('yyyy年MM月dd日(ddd)'));
      } else {
        console.error('invalid date format : ' + valforlog);
        return val;
      }
    }

    /**
     * 様々な文字列からYYYY/MM/DDに変換します。
     */
    function _formatYYYY_MM_DDFromVariousStr(str) {
      var val = str;

      function twoDifitReplacer(str) {
        return str.slice(0, 1) + '0' + str.slice(1);
      }
      function warekiReplacer(str) {
        return str.replace('H', '平成').replace('S', '昭和').replace('T', '大正').replace('M', '明治');
      }
      function notDayNameReplacer(str) {
        return str.slice(0, 1);
      }
      // 1998年09月04日など、年月日形式の場合でも変換できるようにする
      val = val.replace(/０/g, '0').replace(/１/g, '1').replace(/２/g, '2').replace(/３/g, '3').replace(/４/g, '4').replace(
          /５/g, '5').replace(/６/g, '6').replace(/７/g, '7').replace(/８/g, '8').replace(/９/g, '9').replace(
          /[HSTM][0-9]{1,2}[^0-9]/, warekiReplacer).replace(/[^0-9][0-9][^0-9]/, twoDifitReplacer).replace('_', '')
          .replace(/年/g, '').replace(/[0-9][月日]{1}/g, notDayNameReplacer).replace(/（.*）/g, '').replace(/-/g, '')
          .replace(/\//g, '').replace(/\s/g, '');

      val = convertYearFromJpFormatYear(val);

      // フォーカスが外れたらあらためて日時データ型にする必要があるため、
      // 不要な曜日部分は一旦落とします。（あとで付きます）
      // val = val.replace(/\(.*\)/g, '');

      // ページ移動前のバリデーション回避のため、「yyyy年MM月dd日(ddd)」をいったん「yyyy/MM/dd」に置換 //修正
      // val = val.replace('平成25年', '').replace(/年/, '/').replace(/月/, '/').replace(/日/, '').replace(/\(.\)/, '');
      // val = val.replace(/\(.\)/, '');
      // 「yyyyMdd」を「yyyyMMdd」に変換 (スラッシュがなくて
      if (val.indexOf('/') == -1) {
        if (val.substr(4, 1) != 0) {
          if (val.substr(4, 1) != 1) {
            val = val.substr(0, 4) + 0 + val.substr(4);
          }
        }
      }
      // 「Mdd」を「yyyyMMdd」に
      if (val.length == 1 || val.length == 2) {
        val = (new Date().toString('yyyyMM')) + val;
      }
      // 「Mdd」を「yyyyMMdd」に
      if (val.length == 3) {
        if (val.indexOf('/') == -1) {
          if (val.substr(0, 2) != 10) {
            if (val.substr(0, 2) != 11) {
              if (val.substr(0, 2) != 12) {
                val = new Date().getFullYear() + '0' + val;
              }
            }
          }
        }
      }
      // 「MMd」を「yyyyMMdd」に
      if (val.length == 3) {
        if (val.indexOf('/') == -1) {
          if ((val.substr(0, 2) == 10) || (val.substr(0, 2) == 11) || (val.substr(0, 2) == 12)) {
            val = new Date().getFullYear() + val.substr(0, 2) + '0' + val.substr(2);
          }
        }
      }
      // 「MMdd」を「yyyyMMdd」に
      if (val.length == 4) {
        if (val.indexOf('/') == -1) {
          val = new Date().getFullYear() + val;
        }
      }
      // 「yyyy/MM/d」を「yyyy/MM/dd」に変換
      if (val.length == 7) {
        val = val.substr(0, 6) + '0' + val.substr(6);
      }
      // date.jsの仕様により「MM/dd」を「MM/yyyy」で判定されてしまう現象の回避
      if (0 <= val.search(/^[0-9]{1,2}\/[0-9]{1,2}$/)) {
        val = (new Date()).toString('yyyy/') + val;
      }
      // date.jsの仕様により「yy/MM/dd」が無効にされてしまう現象の回避
      if (0 <= val.search(/^[0-9]{2}\/[0-9]{1,2}\/[0-9]{1,2}$/)) {
        val = '20' + val;
      }
      // date.jsの仕様により「yyyyMMdd」が無効にされてしまう現象の回避
      if (0 <= val.search(/^[0-9]{8}$/)) {
        val = val.substr(0, 4) + '/' + val.substr(4, 2) + '/' + val.substr(6, 2);
      }
      // date.jsの仕様により「yyMMdd」が無効にされてしまう現象の回避
      if (0 <= val.search(/^[0-9]{6}$/)) {
        val = '20' + val.substr(0, 2) + '/' + val.substr(2, 2) + '/' + val.substr(4, 2);
      }

      return val;
    }

    /**
     * YYYYMMDDをyyyy年mm月dd日(ddd)に変換するメソッド
     */
    function _formartDateNengetuHiYoubiFromYYYYMMDD(yyyymmdd) {
      if (yyyymmdd == null || yyyymmdd.length < 8) {
        return null;
      }
      var date = new Date(yyyymmdd.substr(0, 4), yyyymmdd.substr(4, 2) - 1, yyyymmdd.substr(6, 2));
      var dayNamesShort = [
        '日', '月', '火', '水', '木', '金', '土'
      ];
      var dayShort = dayNamesShort[date.getDay()];
      return yyyymmdd.substr(0, 4) + '年' + yyyymmdd.substr(4, 2) + '月' + yyyymmdd.substr(6, 2) + '日(' + dayShort + ')';
    }

    /**
     * YYYYMMDDをyyyy年mm月dd日に変換するメソッド
     */
    function _formartDateNengetuHiFromYYYYMMDD(yyyymmdd) {
      if (yyyymmdd == null || yyyymmdd.length < 8) {
        return null;
      }
      return yyyymmdd.substr(0, 4) + '年' + yyyymmdd.substr(4, 2) + '月' + yyyymmdd.substr(6, 2) + '日';
    }

    /**
     * 「YYYY年MM月DD日（DDD）をYYYYMMDDに変換するメソッド」
     */
    function _formatDateYYYYMMDDFromNenGetuHi(nenGetuHi) {
      if (nenGetuHi === null || nenGetuHi === "" || nenGetuHi.length < 8) {
        return null;
      }
      return nenGetuHi.replace(/\//g, '').replace(/\(.*\)/, '').replace('年', '').replace('月', '').replace('日', '');
    }

    /**
     * YYYY年MM月DD日（DDD）をYYYY/MM/DDに変換するメソッド
     */
    function _formatDateYYYY_MM_DDFromNenGetuHi(nenGetuHi) {
      var yyyymmdd = _formatDateYYYYMMDDFromNenGetuHi(nenGetuHi);
      if (yyyymmdd === null) {
        return null;
      }
      return yyyymmdd.substr(0, 4) + '/' + yyyymmdd.substr(4, 2) + '/' + yyyymmdd.substr(6, 2);
    }

    /**
     * YYYY年MM月DD日（DDD）をDate形式のデータに変換するメソッド
     */
    function _formatDateFromNenGetuHi(nenGetuHi) {
      var yyyy_mm_dd = _formatDateYYYY_MM_DDFromNenGetuHi(nenGetuHi);
      if (yyyy_mm_dd === null) {
        return null;
      }
      return Date.parse(yyyy_mm_dd);
    }

    function _changeDate(triggerElementId, baseDate) {
      // 自分より前になっているべきカレンダーコンポーネントを検索
      var dateBeforeTarget = $('#' + options['dateBeforeTarget']);
      if (dateBeforeTarget != null && dateBeforeTarget[0] != null && dateBeforeTarget[0].value != null) {
        var beforeTargetDate;
        if (options.wareki) {
          beforeTargetDate = $.datepicker.parseDate(options.dateFormat,
              convertYearFromJpFormatYear(dateBeforeTarget[0].value), options);
        } else {
          beforeTargetDate = $.datepicker.parseDate(options.dateFormat, dateBeforeTarget[0].value, options);
        }
        var newdate = baseDate;
        add = [];
        add.years = options['dateBeforeYear'] * (-1);
        add.months = options['dateBeforeMonth'] * (-1);
        add.days = options['dateBeforeDate'] * (-1);
        newdate.add(add);

        if (beforeTargetDate > newdate) {
          if (dateBeforeTarget.wapDatepicker('option').wareki) {
            dateBeforeTarget[0].value = convertJpFormatYearFromYear($.datepicker.formatDate(options.dateFormat,
                newdate, options));
          } else {
            dateBeforeTarget[0].value = $.datepicker.formatDate(options.dateFormat, newdate, options);
          }
        }
      }

      // 自分よりあとになっているべきカレンダーコンポーネントを検索
      var dateAfterTarget = $('#' + options['dateAfterTarget']);
      if (dateAfterTarget != null && dateAfterTarget[0] != null && dateAfterTarget[0].value != null) {
        var afterTargetDate;
        if (options.wareki) {
          afterTargetDate = $.datepicker.parseDate(options.dateFormat,
              convertYearFromJpFormatYear(dateAfterTarget[0].value), options);
        } else {
          afterTargetDate = $.datepicker.parseDate(options.dateFormat, dateAfterTarget[0].value, options);
        }
        var newdate = baseDate;
        add = [];
        add.years = options['dateAfterYear'] - 0;
        add.months = options['dateAfterMonth'] - 0;
        add.days = options['dateAfterDate'] - 0;
        newdate.add(add);
        if (afterTargetDate < newdate) {
          if (dateAfterTarget.wapDatepicker('option').wareki) {
            dateAfterTarget[0].value = convertJpFormatYearFromYear($.datepicker.formatDate(options.dateFormat, newdate,
                options));
          } else {
            dateAfterTarget[0].value = $.datepicker.formatDate(options.dateFormat, newdate, options);
          }
        }
      }
    }

    function _setSelectionRange(mode) {
      var range;
      if (mode == 'prev') {
        range = _getPrevRange();
      } else if (mode == 'next') {
        range = _getNextRange();
      } else {
        range = _getCurrentRange();
      }
      if (range) {
        input.setSelectionRange(range.start, range.end);
        return true;
      }
      return false;
    }

    // function _getYearRange() {
    // var range = {};
    // if (options.wareki) {
    // range.start = 2;
    // range.end = 4;
    // } else {
    // range.start = yearMinIdx;
    // range.end = yearMaxIdx;
    // }
    // return range;
    // }

    // function _getMonthRange() {
    // var range = {};
    // range.start = monthMinIdx;
    // range.end = monthMaxIdx;
    // return range;
    // }

    function _getDateRange() {
      return dateRange;
    }

    function _isYearSelected() {
      return yearMinIdx <= input.selectionStart && input.selectionEnd <= yearMaxIdx;
    }

    function _isMonthSelected() {
      return monthMinIdx <= input.selectionStart && input.selectionEnd <= monthMaxIdx;
    }
    function _isDateSelected() {
      return dayMinIdx <= input.selectionStart && input.selectionEnd <= dayMaxIdx;
    }
    function _isAllSelected() {
      return 0 == input.selectionStart && input.selectionEnd == allSelectIdx;
    }

    function _getCurrentRange() {
      $input = $(input);
      if (!$input.val() || $input.val().length != allSelectIdx) {
        return null;
      } else if (_isAllSelected()) {
        return _getDateRange();
      }
      var resArr = null;
      idxArray.forEach(function(arr, idx) {
        if (arr.start <= input.selectionStart && input.selectionEnd <= arr.end) {
          currentRangeIdx = idx;
          resArr = arr;
        }
        ;
      });
      if (resArr) {
        return resArr;
      } else {
        return dateRange;
      }
    }

    function _getNextRange() {
      $input = $(input);
      if (!$input.val() || $input.val().length != allSelectIdx) {
        return null;
      } else if (_isAllSelected()) {
        return _getDateRange();
      }
      ;
      if (currentRangeIdx === idxArray.length - 1) {
        currentRangeIdx = 0;
        return idxArray[currentRangeIdx];
      } else {
        currentRangeIdx++;
        return idxArray[currentRangeIdx];
      }
    }
    ;

    function _getPrevRange() {
      $input = $(input);
      if (!$input.val() || $input.val().length != allSelectIdx) {
        return null;
      } else if (_isAllSelected()) {
        return _getDateRange();
      }
      if (currentRangeIdx === 0) {
        currentRangeIdx = idxArray.length - 1;
        return idxArray[currentRangeIdx];
      } else {
        currentRangeIdx--;
        return idxArray[currentRangeIdx];
      }
    }

    function _onKeyDown(e) {
      var $input = $(input);
      var isInputBlank = ($input.val() === '');
      var date;
      var add;
      var range = {
        start : input.selectionStart,
        end : input.selectionEnd
      };
      switch (e.keyCode) {
      // enter:フォーカス選択解除＆カレンダークローズ
      case 13:
        $input.datepicker("hide");
        break;
      // left:選択範囲移動
      case 37:
        if (_setSelectionRange('prev')) {
          e.preventDefault();
        }
        break;
      // up:数値スピン
      case 40:
        e.preventDefault();
        if (options.wareki) {
          date = $.datepicker.parseDate(options.dateFormat, convertYearFromJpYear($input.val()), options.dateFormat);
        } else {
          date = $.datepicker.parseDate(options.dateFormat, $input.val(), options);
        }
        if (date == null) {
          date = new Date();
        }
        add = [];
        if (isInputBlank) {
          add.days = 1;
        } else {
          if (_isYearSelected()) {
            add.years = 1;
          } else if (_isMonthSelected()) {
            add.months = 1;
          } else if (_isDateSelected()) {
            add.days = 1;
          }
        }
        date.add(add);
        if (options.wareki) {
          $input.val(convertJpYearFromYear($.datepicker.formatDate(options.dateFormat, date, options)));
        } else {
          $input.val($.datepicker.formatDate(options.dateFormat, date, options));
        }

        if ($("#ui-datepicker-div .ui-datepicker-next") != null
            && $("#ui-datepicker-div .ui-datepicker-next").length != 0) {
          beSpinningFlg = true;
          $("#ui-datepicker-div .ui-datepicker-next")[0].click();
        }
        if (isInputBlank) {
          input.setSelectionRange(_getDateRange().start, _getDateRange().end);
        } else {
          input.setSelectionRange(range.start, range.end);
        }
        _setSelectionRange();
        break;
      // right:選択範囲移動
      case 39:
        if (_setSelectionRange('next')) {
          e.preventDefault();
        }
        break;
      // down:数値スピン
      case 38:
        e.preventDefault();
        if (options.wareki) {
          date = $.datepicker.parseDate(options.dateFormat, convertYearFromJpYear($input.val()), options.dateFormat);
        } else {
          date = $.datepicker.parseDate(options.dateFormat, $input.val(), options);
        }
        if (date == null) {
          date = new Date();
        }
        add = [];
        if (isInputBlank) {
          add.days = -1;
        } else {
          if (_isYearSelected()) {
            add.years = -1;
          } else if (_isMonthSelected()) {
            add.months = -1;
          } else if (_isDateSelected()) {
            add.days = -1;
          }
        }
        date.add(add);
        if (options.wareki) {
          $input.val(convertJpYearFromYear($.datepicker.formatDate(options.dateFormat, date, options)));
        } else {
          $input.val($.datepicker.formatDate(options.dateFormat, date, options));
        }

        if ($("#ui-datepicker-div .ui-datepicker-next") != null
            && $("#ui-datepicker-div .ui-datepicker-next").length != 0) {
          beSpinningFlg = true;
          $("#ui-datepicker-div .ui-datepicker-next")[0].click();
        }
        if (isInputBlank) {
          input.setSelectionRange(_getDateRange().start, _getDateRange().end);
        } else {
          input.setSelectionRange(range.start, range.end);
        }
        _setSelectionRange();
        break;
      // PageDown :increment more. 7days, 3months, 10years.
      case 34:
        e.preventDefault();
        if (options.wareki) {
          date = $.datepicker.parseDate(options.dateFormat, convertYearFromJpYear($input.val()), options.dateFormat);
        } else {
          date = $.datepicker.parseDate(options.dateFormat, $input.val(), options);
        }
        if (date == null) {
          date = new Date();
        }
        add = [];
        if (isInputBlank) {
          add.days = 7;
        } else {
          if (_isYearSelected()) {
            add.years = 5;
          } else if (_isMonthSelected()) {
            add.months = 3;
          } else if (_isDateSelected()) {
            add.days = 7;
          }
        }
        date.add(add);
        if (options.wareki) {
          $input.val(convertJpYearFromYear($.datepicker.formatDate(options.dateFormat, date, options)));
        } else {
          $input.val($.datepicker.formatDate(options.dateFormat, date, options));
        }

        if ($("#ui-datepicker-div .ui-datepicker-next") != null
            && $("#ui-datepicker-div .ui-datepicker-next").length != 0) {
          beSpinningFlg = true;
          $("#ui-datepicker-div .ui-datepicker-next")[0].click();
        }
        if (isInputBlank) {
          input.setSelectionRange(_getDateRange().start, _getDateRange().end);
        } else {
          input.setSelectionRange(range.start, range.end);
        }
        _setSelectionRange();
        break;
      // PageUown : decrement more. 7days, 3months, 10years.
      case 33:
        e.preventDefault();
        if (options.wareki) {
          date = $.datepicker.parseDate(options.dateFormat, convertYearFromJpYear($input.val()), options.dateFormat);
        } else {
          date = $.datepicker.parseDate(options.dateFormat, $input.val(), options);
        }
        if (date == null) {
          date = new Date();
        }
        add = [];
        if (isInputBlank) {
          add.days = -7;
        } else {
          if (_isYearSelected()) {
            add.years = -5;
          } else if (_isMonthSelected()) {
            add.months = -3;
          } else if (_isDateSelected()) {
            add.days = -7;
          }
        }
        date.add(add);
        if (options.wareki) {
          $input.val(convertJpYearFromYear($.datepicker.formatDate(options.dateFormat, date, options)));
        } else {
          $input.val($.datepicker.formatDate(options.dateFormat, date, options));
        }

        if ($("#ui-datepicker-div .ui-datepicker-next") != null
            && $("#ui-datepicker-div .ui-datepicker-next").length != 0) {
          beSpinningFlg = true;
          $("#ui-datepicker-div .ui-datepicker-next")[0].click();
        }
        if (isInputBlank) {
          input.setSelectionRange(_getDateRange().start, _getDateRange().end);
        } else {
          input.setSelectionRange(range.start, range.end);
        }
        _setSelectionRange();
        break;
      }
    }

    function _setOption(key, value) {
      if (options[key] !== undefined) {
        options[key] = value;
        _init(true);
      }
    }
    function _setOptions(values) {
      $.extend(options, values);
      _init(true);
    }

    function _getDate() {
      var date = _convertToDateType(convertYearFromJpFormatYear($(input).val()));
      if (!(date instanceof Date)) {
        return null;
      }
      return date;
    }

    function _clear() {
      var $input = $(input);
      $input.val('').blur();
    }

    // 公開するMethod
    this.validate = _validate;
    this.setOptions = _setOptions;
    this.setOption = _setOption;
    this.setDate = _setDate;
    this.getDate = _getDate;
    this.clear = _clear;

    _init();
  };
})(jQuery);
(function($) {
  $.widget('wap.fullscreenizer', $.wap.abstractWidget, {

    options : {
      frame : '.main-content'
    },
     /*
     * After Window Resized and already expanded, call this function.
     */
     afterWindowResize : function() {

      if(!this.doing){ //to prevent too fast click, making process too many times.

        this.doing = true; //set flag as true, before finishing other events will not trigger.
        try{
          this.reset(true);
          this.expand(true);
        }
        finally{

          this.doing = false; //revert the flag event exception happens
        }
      }
    },
    /*
     * This event may be triggered by window resize. 
     * @param {boolean} windowResized If this is called by window resize.
     */ 
    expand : function(windowResized) {
      if (this._dummy) {
        return;
      }

      this._dummy = $('<div></div>');
      var cssNames = [
        'width', 'height', 'margin', 'border', 'padding', 'position'
      ];
      this._dummy.css(cssNames.reduce(function(prop, cssName) {
        prop[cssName] = this.element.css(cssName);
        return prop;
      }.bind(this), {}));

      this.element.after(this._dummy);

      var offsetTop = 0;
      var offsetLeft = 0;
      var frame = $(this.options.frame);
      if (frame.length == 0) {
        frame = $(document.body);
      }
      offsetTop = frame.offset().top;
      offsetLeft = frame.offset().left;

      this._lock = $('<div></div>').addClass('wap-fullscreenizer-lock');
      this._lock.css({
        'marginLeft' : -this.element.offset().left + offsetLeft,
        'marginTop' : -this.element.offset().top + offsetTop,
        'width' : $(window).width() - offsetLeft,
        'height' : $(window).height() - offsetTop
      });
      this.element.after(this._lock);

      this._oldStyles = this.element[0].style.cssText;
      this.element.css({
        'marginLeft' : -this.element.offset().left + 10 + offsetLeft,
        'marginTop' : -this.element.offset().top + 10 + offsetTop,
        'width' : $(window).width() - offsetLeft - 10,
        'height' : $(window).height() - offsetTop - 10,
        'position' : 'fixed',
        'zIndex' : this._lock.css('zIndex') + 1
      });

      this.element.trigger('fullscreenizer:expanded', [
        this.element.width(), this.element.height()
      ]);
      /* if this is not triggered by window resize.
       * This means the component is expanded by user manually, so bind the window resize, this means after 
       * window resized, user still want it to be expanded. 
       */      
      if(!windowResized){
        $(window).bind('resize', $.proxy(this.afterWindowResize, this));
      }
    },
    /*
     * This event may be triggered by window resize. 
     * @param {boolean} windowResized If this is called by window resize.
     */ 
    reset : function(windowResized) {
      if (this._dummy) {
        this._dummy.remove();
        delete this._dummy;
        this._lock.remove();
        delete this._lock;
        this.element[0].style.cssText = this._oldStyles;
        this.element.trigger('fullscreenizer:reset');
      }
       //if reset is triggered by user, unbind the resize event.
      if(!windowResized){
        $(window).unbind('resize', $.proxy(this.afterWindowResize, this));
      
      }
    }
  });
  $(function() {
    var autoInstantiationClass = $.wap.fullscreenizer.prototype.widgetFullName;
    $('.' + autoInstantiationClass).fullscreenizer();
  });
}(jQuery));
/**
 * @author zhong_s
 */

(function($) {
  $.widget("wap.inputswitcher", $.wap.abstractWidget, {

    options : {
      autoresize : false,
      width : 150,
      textareaInitialHeight: 50
    },

    _create : function() {
      this._super();
      var that = this;

      if (this.options.autoresize) {
        that.element.find('textarea').autosize();
      }


      that.element.find('input, textarea').css('width',this.options.width+'px');

      that.element.find('.wap-icon-expand,.wap-icon-contract').css('left',this.options.width+'px');

      this._bindEvent();
    },

    _destroy : function() {
      if (this.options.autoresize) {
        this.element.find('textarea').trigger('autosize.destroy');
      }
    },

    setValue : function(value) {
      this.element.find('input,textarea').val(value);
      if (this.options.autoresize) {
        this.resize();
      }
    },

    getValue : function() {
      return this.element.find('input:visible, textarea:visible').val();
    },

    resize : function() {
      if (this.options.autoresize) {
        this.element.find('textarea').trigger('autosize.resize');
      }
    },

    _bindEvent : function() {
        var that = this;

        that.element.find('.wap-icon-expand').on('click',function(){
            var currentInputParent = $(this).parent();
            var anotherInputParent = $(this).parents('.wap-inputswitcher:first').children('.input-parent:not(.input-enabled)');

            var value = currentInputParent.find('input, textarea').val();
            anotherInputParent.find('input, textarea').val(value);

            anotherInputParent.addClass('input-enabled');
            currentInputParent.removeClass('input-enabled');

            anotherInputParent.find('input, textarea').focus();


            $(this).parents('.wap-inputswitcher:first').find('textarea').animate({
                "height" : that.options.textareaInitialHeight + 'px'
            }, "normal", undefined, function(){
                that.element.find('textarea').css('minHeight',that.options.textareaInitialHeight + 'px');
            });
        });

        that.element.find('.wap-icon-contract').on('click',function(){
            var currentInputParent = $(this).parent();
            var anotherInputParent = $(this).parents('.wap-inputswitcher:first').children('.input-parent:not(.input-enabled)');

            var value = currentInputParent.find('input, textarea').val();
            anotherInputParent.find('input, textarea').val(value);

            that.element.find('textarea').css('minHeight','');

            var inputHeight = that.element.find('input').css('height');

            $(this).parents('.wap-inputswitcher:first').find('textarea').animate({
                "height" : inputHeight
            }, "normal", undefined, function() {
                anotherInputParent.addClass('input-enabled');
                currentInputParent.removeClass('input-enabled');

                anotherInputParent.find('input, textarea').focus();
            });
        });
    }
  });
}(jQuery));

/**
 * Manual Widget
 * 
 * @author koyama_y
 */
(function($) {
  $.widget("wap.manual", $.wap.abstractWidget, {

    /** Template */
    switchAreaTmpl : null,
    manualNumberTmpl : null,
    manualAreaTmpl : null,
    arrowTmpl : null,
    descriptionAreaTmpl : null,
    descriptionBlockTmpl : null,

    isShow : false,

    /**
     * Options
     */
    options : {
      switchAreaShowTitle : 'Show the How to Use',// default
      switchAreaHideTitle : 'Hide the How to Use',// default
      closeAreaTitle : 'Can re-show on the top-right icon'// default
    },

    /**
     * Manager Object
     */
    manualManager : [],

    /**
     * create
     */
    _create : function() {
      this._super();
    },

    /**
     * Create Show/Hidden Switch Area
     */
    _createSwitchArea : function() {
      var tmpl = this.switchAreaTmpl.render({
        switchAreaShowTitle : this.options.switchAreaShowTitle,
        closeAreaTitle : this.options.closeAreaTitle
      });
      this.element.append(tmpl);
    },

    /**
     * Compile Hogan Template
     */
    _prepareTemplate : function() {
      var swithAreaTmpl = '<blockquote class="blockquote-info full-help-info">'
          + '                <a class="jsShowFullHelp blue" href="#">{{switchAreaShowTitle}}</a>'
          + '                <a class="full-help-close pull-right" href="#" title="{{closeAreaTitle}}">'
          + '                  <i class="wap-icon-close"></i>'
          + '                </a>'
          + '              </blockquote>';
      this.switchAreaTmpl = Hogan.compile(swithAreaTmpl);

      var manualNumberTmpl = '<div class="manual description-box-number text-white">{{number}}</div>';
      this.manualNumberTmpl = Hogan.compile(manualNumberTmpl);

      var descriptionTmpl = '<div class="manual description-box shown" data-link-target={{targetId}}'
          + '                        style="height:{{height}}px; top:{{top}}px; left:{{left}}px;">'
          + '                  <div class="manual description-area">{{{description}}}</div>'
          + '                  {{{numberArea}}}'
          + '                </div>';
      this.manualAreaTmpl = Hogan.compile(descriptionTmpl);

      var arrowTmpl = '<div class="manual line"'
          + '                style="left:{{left}}px; top:{{top}}px; width:{{width}}px">'
          + '            <div class="manual left-arrow"></div>'
          + '          </div>';
      this.arrowTmpl = Hogan.compile(arrowTmpl);

      var descriptionBlock = '<div class="sub-wrapper">'
          + '                   <div class="sub-title"><i class={{titleIcon}}></i><h4>{{title}}</h4></div>'
          + '                   <div class="sub-body">{{{body}}}</div>'
          + '                 </div>';
      this.descriptionBlockTmpl = Hogan.compile(descriptionBlock);
    },

    /**
     * Change show/hide flg
     */
    _switchShowHide : function() {
      this.isShow = !this.isShow;
    },

    /**
     * Bind Each Events
     */
    _bindEvents : function() {
      this._bindSwitchClose();
      this._bindActShowHiddenManual();
      this._bindActEsc();
      this._bindResize();
      this._bindTextareaResize();
    },

    /**
     * Action of switch close
     */
    _bindSwitchClose : function() {
      var _self = this;
      $('.full-help-close').on('click', function(e) {
        if (_self.isShow) {
          _self._hideManual();
          _self._switchShowHide();
          $('.jsShowFullHelp').text(_self.options.switchAreaShowTitle);
        }
        $('.wap-manual').addClass('hide');
      });
    },

    /**
     * Action of show/hidden manual
     */
    _bindActShowHiddenManual : function() {
      var _self = this;
      $('.jsShowFullHelp').on('click', function(e) {

        if (!_self.isShow) {
          $(e.target).text(_self.options.switchAreaHideTitle);
          _self._showManual();
        } else {
          $(e.target).text(_self.options.switchAreaShowTitle);
          _self._hideManual();
        }

        _self._switchShowHide();
      });
    },

    /**
     * Action of ESC
     */
    _bindActEsc : function() {
      var _self = this;
      $(document).off('.actEscAllClose');
      $(document).on('keydown.actEscAllClose', function(e) {
        $('.jsShowFullHelp').text(_self.options.switchAreaShowTitle);
        _self._hideManual();
        _self._switchShowHide();
      });
    },

    /**
     * Hide manual
     */
    _hideManual : function() {
      $('.manual.target').removeClass('manual target');
      $('.line').remove();
      $('.manual-col').html('');
      $('.description-box-number').remove();
    },

    /**
     * Show Manual
     */
    _showManual : function() {
      if (!this.manualManager || this.manualManager.length === 0) {
        return;
      }

      var renderParams = {
        border : true,
        line : true,
        number : true,
        manual : true
      };

      this.renderManual(renderParams);
    },

    /**
     * get 'target linked manual area' from target id
     * 
     * @param {string} targetId
     * @return {object} jQuery Object
     */
    _getManualArea : function(targetId) {
      return $('[data-link-target=' + targetId + ']');
    },

    /**
     * get number area HTML
     * 
     * @param {integer} number
     * @return {string}
     */
    _getNumberArea : function(number) {
      var numberArea = this.manualNumberTmpl.render({
        number : number
      });
      return numberArea;
    },

    /**
     * get manual HTML
     * 
     * @param {object} $target
     * @param {object} description
     * @param {integer} numberArea
     * @return {string}
     */
    _getManual : function($target, description, numberArea) {
      var position = $target.position();

      var template = this.manualAreaTmpl.render({
        description : this._getDescriptionAreaHtml(description),
        targetId : $target.attr('id'),
        numberArea : numberArea,
        height : $target.outerHeight(),
        top : position.top,
        left : 0
      });

      return template;
    },

    /**
     * get HTML of description area
     * 
     * @param descriptions{object}
     * @return {string} HTML
     */
    _getDescriptionAreaHtml : function(descriptions) {
      var result = '';
      for (var i = 0, n = descriptions.length; i < n; i++) {
        result += this.descriptionBlockTmpl.render(descriptions[i]);
      }
      return result;
    },

    /**
     * get Arrow HTML
     */
    _getArrow : function(arrowStyle) {
      var template = this.arrowTmpl.render({
        left : arrowStyle.left,
        top : arrowStyle.top,
        width : arrowStyle.width
      });
      return template;
    },

    /**
     * get arrow style information
     */
    _getArrowPosition : function($manual, $target) {
      var result = {};

      var targetOffset = $target.offset();
      var manualOffset = $manual.offset();

      // top
      var targetHeight = $target.outerHeight();
      result.top = targetOffset.top + (targetHeight / 2);

      // width
      var targetRight = targetOffset.left + $target.outerWidth();
      var manualLeft = manualOffset.left;
      result.width = manualLeft - targetRight;

      // left
      result.left = targetRight;

      return result;
    },

    /**
     * If height is overflow, this function add extend part for the Element
     */
    _overHeightProc : function($manual) {
      var descriptionHeight = $manual.find('.description-area').outerHeight();
      var areaHeight = $manual.outerHeight();

      if (descriptionHeight <= areaHeight) {
        return;
      }

      $manual.append('<div class="can-open"><i class="wap-icon-angle-down img-16"></i></div>');
      $manual.find('.description-area').addClass('overflow');

      $manual.on('mouseover', function() {
        $manual.addClass('slide open-box').css('height', descriptionHeight);
        setTimeout(function() {
          $manual.find('.can-open').addClass('hide');
        }, 200);
      });

      $manual.on('mouseout', function() {
        $manual.css('height', areaHeight).removeClass('open-box');
        setTimeout(function() {
          $manual.find('.can-open').removeClass('hide');
        }, 200);
      });
    },

    /**
     * bind window resize event
     */
    _bindResize : function() {
      var timer = false;
      var _self = this;

      var renderParams = {
        border : false,
        line : true,
        number : false,
        manual : false
      };

      $(window).resize(function() {
        _self._removeLine();

        if (timer !== false) {
          clearTimeout(timer);
        }
        timer = setTimeout(function() {
          _self.renderManual(renderParams);
        }, 200);
      });
    },

    /**
     * remove line
     */
    _removeLine : function() {
      var $lines = $('.line');
      if ($lines.length === 0) {
        return;
      }
      $lines.remove();
    },

    /**
     * remove number
     */
    _removeNumber : function() {
      var $numbers = $('.description-box-number');
      if ($numbers.length === 0) {
        return;
      }
      $numbers.remove();
    },

    /**
     * remove manual
     */
    _removeManual : function() {
      var $manuals = $('.description-box');
      if ($manuals.length === 0) {
        return;
      }
      $manuals.remove();
    },

    /**
     * bind resize action for all textareas
     */
    _bindTextareaResize : function() {
      for (var i = 0, n = this.manualManager.length; i < n; i++) {
        var each = this.manualManager[i];
        var $target = $('#' + each.id + ' textarea');

        for (var j = 0, m = $target.length; j < m; j++) {
          var $textarea = $target.eq(j);
          this._bindActResizeTextarea($textarea);
        }
      }
    },

    /**
     * bind resize action for textarea
     */
    _bindActResizeTextarea : function($textarea) {
      var _self = this;

      var renderParams = {
        border : false,
        line : true,
        number : false,
        manual : true
      };

      $textarea.on('mouseup', function() {
        if (_self.isShow) {
          _self.renderManual(renderParams);
        }
      });
    },

    // --------------------------------------------------------------------------
    // public methods
    // --------------------------------------------------------------------------
    /**
     * Must call this function
     * 
     * @param data{object}
     */
    init : function(data) {
      this.manualManager = data;
      this._prepareTemplate();
      this._createSwitchArea();
      this._bindEvents();
    },

    /**
     * Render Manual
     * 
     * @param {object} params{number:boolean, line:boolean, manual:boolean, border:boolean}
     */
    renderManual : function(params) {
      if (params.number) {
        this._removeNumber();
      }

      if (params.line) {
        this._removeLine();
      }

      if (params.manual) {
        this._removeManual();
      }

      var $manualArea = $('.manual-col');
      var $arrowArea = $('body');

      for (var i = 0, n = this.manualManager.length; i < n; i++) {

        var each = this.manualManager[i];
        var $target = $('#' + each.id);
        var numberArea = this._getNumberArea(i + 1);

        // border
        if (params.border) {
          $target.addClass('manual target');
        }

        // number
        if (params.number) {
          $target.append(numberArea);
        }

        // manual
        if (params.manual) {
          var manualHtml = this._getManual($target, each.description, numberArea);
          $manualArea.append(manualHtml);
          this._overHeightProc(this._getManualArea(each.id));
        }

        // line
        if (params.line) {
          var arrowHtml = this._getArrow(this._getArrowPosition(this._getManualArea(each.id), $target));
          $arrowArea.append(arrowHtml);
        }
      }
    }
  });

  /**
   * Automatic initialization function.
   */
  $(function() {
    var autoInstantiationClass = $.wap.manual.prototype.widgetFullName;
    $('.' + autoInstantiationClass).manual();
  });
}(jQuery));

(function($) {
  $.widget('wap.abstractMenu', $.wap.abstractWidget, {
    options : {
      type : 'DEFAULT',
      liSize : 'M',
      useBorder : false,
      useBadge : false,
      badgeColorType : '',
    },
    _MENUTYPE : {
      DEFAULT : 'DEFAULT',
      STRONG : 'STRONG'
    },
    _MENUCLASS : {
      BORDER : 'wap-menu-border',
      CAPTION : 'wap-menu-caption',
      DEFAULT : 'wap-menutype-default',
      ICON : 'wap-menu-icon',
      LI : 'wap-menuLi',
      LI_ANCHOR : 'wap-menu-li-anchor',
      MAINCAPTION : 'wap-menu-main-caption',
      RIGHTTEXT : 'wap-menu-right-text',
      STRONG : 'wap-menutype-strong',
      SUPPLEMENTCAPTION : 'wap-menu-supplement-caption',
    },
    _LISIZE : {
      L : 68,
      M : 56,
      S : 48
    },
    _create : function() {
      this._super();
    },

    /**
     * Get ItemValue from active element.<br>
     * If you want to use this function, please set data as following.<br>
     * 
     * 1) Write attribute of 'data-item-value' in the HTML.<br>
     * 2) Set value using 'setItemValue' function.
     * 
     * @return ItemValue. If ItemValue is not exist, this function return null.
     * @public
     * @author koyama_y
     */
    getActiveItemValue : function() {
      var $activeEl = $(this.element).find('.active').first().parent();
      if (!$activeEl.data('itemValue')) {
        return null;
      }
      return $activeEl.data('itemValue');
    },

    _createHint : function(elem, hintText) {
      elem.attr('data-content', hintText).popover({
        delay : {
          show : 300,
          hide : 0
        },
        trigger : 'hover',
        placement : 'right'
      });
    },

    _addRightText : function($captionElem, rightText) {
      var $rightTextElem = $('<div/>').addClass(this._MENUCLASS.RIGHTTEXT);
      $rightTextElem.html(rightText);
      if (!!this.options.useBadge) {
        $rightTextElem.attr('data-type', 'text').attr('data-color-type', this.options.badgeColorType);
        $rightTextElem.badge();
      }
      if (this.options.type === this._MENUTYPE.STRONG) {
        $captionElem.children('h3').append($rightTextElem);
      } else {
        $captionElem.append($rightTextElem);
      }
    },

    _addIconElement : function(contentElement, iconClass, liHeight, fontSize) {
      var iconElement = $('<div/>').addClass(this._MENUCLASS.ICON);
      if (this.options.type === this._MENUTYPE.STRONG) {
        iconElement.height(liHeight).width(liHeight);
        iconElement.css('font-size', fontSize * 2).css('padding', fontSize / 2);
      }
      var icon = $('<i/>').addClass(iconClass);
      iconElement.append(icon);
      contentElement.prepend(iconElement);
    },

    _createCaptionElement : function($spanCaption, supplement, liHeight, fontSize) {
      var $captionElem = $('<div/>').addClass(this._MENUCLASS.CAPTION);
      if (this.options.type === this._MENUTYPE.STRONG) {
        var $mainCaptionElem = $('<h3/>').addClass(this._MENUCLASS.MAINCAPTION);
        $mainCaptionElem.html($spanCaption);
        $mainCaptionElem.css('font-size', fontSize).css('padding-top', fontSize);

        var $subCaptionElem = $('<p/>').addClass(this._MENUCLASS.SUPPLEMENTCAPTION);
        $subCaptionElem.html(supplement);
        $subCaptionElem.css('font-size', fontSize - 3).css('padding-bottom', fontSize - 3);

        $captionElem.prepend($mainCaptionElem).append($subCaptionElem);
        $captionElem.css('margin-left', liHeight).height(liHeight);
      } else {
        $captionElem.html($spanCaption);
      }
      return $captionElem;
    },

  });
}(jQuery));

(function($) {
  $.widget('wap.menu', $.wap.abstractMenu, {
    options : {
      isParentSelectable : false,
    },
    _MENUCLASS : {
      ACCORDIONDIV : 'wap-menu-accordion-div',
      ACCORDIONICON : 'wap-menu-accordion-icon wap-icon-angle-down',
      BLANKICONDIV : 'wap-menu-blank-icon-div',
      SELECTABLEICONDIV : 'selectable-icon-div',
    },

    _create : function() {
      this._super();
      var $childLi = $(this.element).find('li');

      $(this.element).addClass(this._MENUCLASS[this.options.type]);
      $(this.element).find('ul').addClass(this._MENUCLASS[this.options.type]);

      for (var i = 0; i < $childLi.size(); i++) {
        var $elem = $($childLi[i]);
        var options = this._createElemOptions($elem);
        this._decorateElem($elem, options, i === 0);
      }
      this._setFunctionToItems($childLi, this.options.isParentSelectable);
    },

    _setFunctionToItems : function($childLi, isParentSelectable) {
      $childLi.children('a').on('click', function() {
        var $clickedElem = $(this);
        var $parentElem = $clickedElem.parent();
        if (isParentSelectable || $parentElem.children('ul').size() === 0) {
          $childLi.children('a').removeClass('active');
          $clickedElem.addClass('active');
          if (!!$clickedElem[0].attributes['userSetFunction']) {
            $clickedElem[0].attributes['userSetFunction']($parentElem);
          }
        }
      });
    },

    _decorateElem : function($elem, options, isFirstItem) {
      var liHeight = this._LISIZE[this.options.liSize];
      var fontSize = liHeight / 4;
      var $child = $elem.children("ul");

      $elem.addClass(this._MENUCLASS.LI);
      var $contentElem = $('<a/>').addClass(this._MENUCLASS.LI_ANCHOR);

      if (!!options.iconClass || this.options.type === this._MENUTYPE.STRONG) {
        this._addIconElement($contentElem, options.iconClass, liHeight, fontSize);
      }
      var $captionElem = this._createCaptionElementPrivate($elem, options, liHeight, fontSize);
      this._decorateAccordion($child, options, $contentElem, $captionElem);
      $contentElem.attr('href', options.href);

      if (options.rightText !== undefined) {
        this._addRightText($captionElem, options.rightText);
      }

      $contentElem.append($captionElem);
      $elem.prepend($contentElem);

      if (!!this.options.useBorder) {
        $contentElem.after($('<hr/>').addClass(this._MENUCLASS.BORDER));
        if (isFirstItem) {
          $contentElem.before($('<hr/>').addClass(this._MENUCLASS.BORDER));
        }
      }

      if (!!options.hintText) {
        this._createHint($contentElem, options.hintText);
      }
    },

    _createElemOptions : function($elem) {
      var options = {};
      var datas = $elem.data();
      for ( var key in datas) {
        options[key] = datas[key];
      }
      if (options.isAccordion === undefined) {
        options.isAccordion = true;
      }
      if (options.initialExpansion === undefined) {
        options.initialExpansion = true;
      }
      return options;
    },

    _decorateAccordion : function($child, liOptions, $contentElem, $captionElem) {
      var $accordionDivElem = $('<div/>').addClass(this._MENUCLASS.ACCORDIONDIV);
      if ($child.size() > 0 && liOptions.isAccordion) {
        this._addAccordionIconElem($accordionDivElem, liOptions, $contentElem, $child);
      }

      if (this.options.type === this._MENUTYPE.STRONG) {
        $captionElem.children('h3').append($accordionDivElem);
      } else {
        $captionElem.append($accordionDivElem);
      }
    },

    _addAccordionIconElem : function($accordionDivElem, liOptions, $contentElem, $child) {
      var $targetElem = null;
      if (this.options.isParentSelectable) {
        $targetElem = $accordionDivElem;
        $targetElem.addClass(this._MENUCLASS.SELECTABLEICONDIV);
      } else {
        $targetElem = $contentElem;
      }
      $targetElem.attr('href', '#' + $child.attr('id')).attr('data-toggle', 'collapse');
      if (liOptions.initialExpansion) {
        $child.addClass('in');
      } else {
        $targetElem.addClass('collapsed');
        $child.addClass("collapse");
      }

      var $accordionIconElem = $('<i/>').addClass(this._MENUCLASS.ACCORDIONICON);
      $accordionDivElem.append($accordionIconElem);
    },

    _createCaptionElementPrivate : function($elem, options, liHeight, fontSize) {
      var $captionSpan = $elem.children('span');
      var $caption = $captionSpan;
      $captionSpan.remove();
      return this._createCaptionElement($caption, options.supplement, liHeight, fontSize);
    },

    _destroy : function() {
      this.element.find('a').remove();
    },

    setItemClickFunc : function(func) {
      var $menuItems = $(this.element).find('a');
      for (var i = 0; i < $menuItems.size(); i++) {
        $menuItems[i].attributes['userSetFunction'] = func;
      }
      return true;
    },

    addItem : function($parentLi, caption, id, options) {
      var $newItemLi = $('<li/>').addClass(this._MENUCLASS.LI).attr('id', id);
      var $captionElem = $('<span/>').text(caption);
      var elemOptions = options || [];
      $newItemLi.append($captionElem);
      if (elemOptions.isAccordion === undefined) {
        elemOptions.isAccordion = true;
      }
      if (elemOptions.initialExpansion === undefined) {
        elemOptions.initialExpansion = true;
      }
      this._decorateElem($newItemLi, elemOptions, false);
      var $parentUl = this.getParentUl_($parentLi);
      $parentUl.append($newItemLi);
      var func = $parentLi.children('a')[0].attributes['userSetFunction'];
      if (!!func) {
        $newItemLi.children('a')[0].attributes['userSetFunction'] = func;
      }
      this._setFunctionToItems((this.element).find('li'), this.options.isParentSelectable);

      return $newItemLi;
    },

    moveItem : function($targetLi, $destParentLi) {
      var $parentUl = this.getParentUl_($destParentLi);
      $parentUl.append($targetLi);
    },

    removeItem : function($targetLi) {
      if ($targetLi.parent().children('li').size() > 1) {
        $targetLi.remove();
      } else {
        var $parentUl = $targetLi.parent();
        var $parentA = $parentUl.parent().children("a");
        var $parentAccordionIcon = $parentA.find('i.' + this._MENUCLASS.ACCORDIONICON);
        var $accordionIconDiv = $parentA.find('div.' + this._MENUCLASS.ACCORDIONDIV);
        $parentAccordionIcon.remove();
        $accordionIconDiv.empty();
        $parentUl.remove();
        $parentA.removeAttr('href');
        $parentA.removeAttr("data-toggle");
      }
    },

    setRightText : function(id, text) {
      var $rightText = $("#" + id).children('a').find('div.' + this._MENUCLASS.RIGHTTEXT);
      $rightText.html(text);
    },

    setIconClass : function(id, iconClass) {
      var $iconDivElem = $("#" + id).children('a').find('div.' + this._MENUCLASS.ICON);
      $iconDivElem.children('i').removeClass();
      $iconDivElem.children('i').addClass(iconClass);
    },

    getParentUl_ : function($parentLi) {
      var $parentUl = $parentLi.children('ul');
      if ($parentUl.size() === 0) {
        var id = this.getUniqueUlId_();
        $parentUl = $('<ul/>');
        $parentUl.attr('id', id).addClass(this._MENUCLASS[this.options.type] + ' in');
        var $parentHref = $parentLi.children('a');
        $parentHref.attr('href', '#' + id).attr('data-toggle', 'collapse');
        var $accordionIconDiv = $parentHref.find('div.' + this._MENUCLASS.ACCORDIONDIV);
        $accordionIconDiv.append($('<i/>').addClass(this._MENUCLASS.ACCORDIONICON));
        $parentLi.append($parentUl);
      }
      return $parentUl;
    },

    getUniqueUlId_ : function() {
      var tempId = 'wapMenuUl-', //
      index = 0, //
      id = '', //
      isIdUnique = false, //
      ulIdList = this.createUlIdList();
      do {
        id = tempId + index;
        if (ulIdList.indexOf(id) < 0) {
          isIdUnique = true;
        }
        index++;
      } while (!isIdUnique);
      return id;
    },

    createUlIdList : function() {
      ulIdList = [];
      var $menuUl = $('ul.' + this._MENUCLASS[this.options.type]);
      for (var i = 0; i < $menuUl.size(); i++) {
        var existingId = $menuUl[0].id;
        if (!!existingId) {
          ulIdList.push(existingId);
        }
      }
      return ulIdList;
    },

    /**
     * Set ItemValue in the Menu Item <br>
     * (Menu Item has "wap-menuLi" class)
     * 
     * @param $elem MenuItem jQuery Object
     * @param value Object
     * @public
     * @author koyama_y
     */
    setItemValue : function($elem, value) {
      if (!$elem.hasClass(this._MENUCLASS.LI)) {
        return;
      }
      if (!value) {
        return;
      }
      $elem.data('itemValue', value);
    },

    /**
     * Delete ItemValue from MenuItem <br>
     * (Menu Item has "wap-menuLi" class)
     * 
     * @param $elem MenuItem jQuery Object
     * @public
     * @author koyama_y
     */
    deleteItemValue : function($elem) {
      if (!$elem.hasClass(this._MENUCLASS.LI)) {
        return;
      }
      $elem.removeData('itemValue');
      $elem.removeAttr('data-item-value');
    }

  });
  $(function() {
    var autoInstantiationClass = $.wap.menu.prototype.widgetFullName;
    $('.' + autoInstantiationClass).menu();
  });
}(jQuery));

(function($) {
  // ------------------------------------------------------------------------
  // widget definition
  // ------------------------------------------------------------------------
  $.widget('wap.drilldownMenu', $.wap.abstractMenu, {
    options : {
      menuCfgTree : {},
      headerType : 'DEFAULT',
      drilldownBy : 'CLICK_ICON',
      fontSize : 'L',
    },
    _HEADERTYPE : {
      DEFAULT : 'DEFAULT',
      BREADCRUMB : 'BREADCRUMB'
    },
    _DRILLDOWN_TYPE : {
      CLICK_LI : 'CLICK_LI',
      CLICK_ICON : 'CLICK_ICON'
    },
    _FONTSIZECLASS : {
      XL : 'font-size-xl',
      LL : 'font-size-ll',
      L : 'font-size-l',
      M : 'font-size-m',
      S : 'font-size-s',
      SS : 'font-size-ss'
    },
    _ICONSIZECLASS : {
      ICON_SIZE_16 : 'icon-size-16'
    },
    _MENUCLASS : {
      BREADCRUMB_LINK : 'wap-menu-breadcrumb-link',
      DIV_HD : 'wap-menu-div-header',
      DIV_ICON_ANGLE_LEFT : "wap-menu-div-icon-angle-left",
      DIV_ICON_CARET_RIGHT : "wap-menu-div-icon-caret-right",
      DIV_ICON_DRILLABLE : "wap-menu-div-icon-drillable",
      DRILLABLE : "drillable",
      HEADER_BG_COLOR : 'bg-list-title-color',
      HEADER_LI : 'wap-menu-header-li',
      ICON_ANGLE_LEFT : "wap-icon-angle-left",
      ICON_CARET_RIGHT : "wap-icon-caret-right",
      ICON_DRILLABLE : "wap-icon-angle-right",
    },
    _MOTION_TYPE : {
      INITIAL : 1,
      DRILL_DOWN : 2,
      DRILL_UP : 3
    },

    _create : function() {
      this._super();
      $(this.element).addClass(this._MENUCLASS[this.options.type]);
      $(this.element).parent().addClass(this._MENUCLASS[this.options.type]);
      var path = [
        this.options.menuCfgTree
      ];
      this._createListView(path, this._MOTION_TYPE.INITIAL);
    },

    _getPathToMenuByItemValue : function(itemValue, pathToParent) {
      var _self = this;
      var menuCfgParent = pathToParent[pathToParent.length - 1];
      if (menuCfgParent.childItems) {

      } else {
        return null;
      }
      var path = null;
      $.each(menuCfgParent.childItems, function(idx, menuCfg) {
        if (path != null) {
          return;
        }
        if (menuCfg.itemValue === itemValue) {
          path = [].concat(pathToParent);
          path.push(menuCfg);
          return;
        }
      });
      if (path != null) {
        return path;
      }
      $.each(menuCfgParent.childItems, function(idx, menuCfg) {
        if (path != null) {
          return;
        }
        var pathToCurrent = [].concat(pathToParent);
        pathToCurrent.push(menuCfg);
        path = _self._getPathToMenuByItemValue(itemValue, pathToCurrent);
      });
      return path;
    },

    _createListView : function(path, motionType) {
      var _self = this;
      var menuCfg = path[path.length - 1];
      var $ul = $(_self.element);

      $ul.hide();

      $ul.children('li').remove();

      if (this.options.headerType === this._HEADERTYPE.BREADCRUMB) {
        $ul.append(_self._createLiForHeaderTypeBreadcrumbList(path));
      } else {
        $ul.append(_self._createLiForHeaderTypeDefault(path));
      }

      var liHeight = _self._LISIZE[_self.options.liSize];
      var liFontSize = liHeight / 4;
      var sizeOptions = {
        liHeight : liHeight,
        fontSize : liFontSize
      };

      $.each(menuCfg.childItems, function(idx, menuCfgChild) {
        $ul.append(_self._createLiForMenuItem(idx, menuCfgChild, path, sizeOptions));
      });

      switch (motionType) {
      case _self._MOTION_TYPE.INITIAL:
        $ul.show();
        break;
      case _self._MOTION_TYPE.DRILL_DOWN:
        $ul.show('slide', {
          direction : 'right'
        }, 'fast');
        break;
      case _self._MOTION_TYPE.DRILL_UP:
        $ul.show('slide', {
          direction : 'left'
        }, 'fast');
        break;
      }
    },

    _createLiForMenuItem : function(idx, menuCfgChild, path, sizeOptions) {
      var _self = this;
      var $ul = $(this.element);

      var $li = $('<li/>').addClass(_self._MENUCLASS.LI);

      // item value
      if (menuCfgChild.itemValue) {
        $li.attr('data-item-value', menuCfgChild.itemValue);
      }

      var $anchor = $('<a/>').addClass(_self._MENUCLASS.LI_ANCHOR);
      $li.append($anchor);

      if (_self.options.useBorder) {
        $anchor.after($('<hr/>').addClass(_self._MENUCLASS.BORDER));
      }

      // icon
      if (menuCfgChild.iconClass || _self.options.type === this._MENUTYPE.STRONG) {
        _self._addIconElement($anchor, menuCfgChild.iconClass, sizeOptions.liHeight, sizeOptions.fontSize);
      }

      // href
      if (menuCfgChild.href) {
        $anchor.attr('href', menuCfgChild.href);
      }

      // hint
      if (menuCfgChild.hintText) {
        _self._createHint($anchor, menuCfgChild.hintText);
      }

      // caption
      var $captionElem = _self._createCaptionElementPrivate(menuCfgChild, sizeOptions);
      $anchor.append($captionElem);

      // drilldown
      _self._decorateDrilldown(path, menuCfgChild, $captionElem);

      // right text
      if (menuCfgChild.rightText) {
        _self._addRightText($captionElem, menuCfgChild.rightText);
      }

      // click event
      if (this.options.drilldownBy === this._DRILLDOWN_TYPE.CLICK_LI) {
        $anchor.on('click', function() {
          _self._drillDown(path, menuCfgChild);
        });
      } else {
        $anchor.on('click', function() {
          var $clickedElm = $(this);
          $ul.children('li').children('a').removeClass('active');
          $clickedElm.addClass('active');
          if (menuCfgChild.onClick) {
            menuCfgChild.onClick();
          }
        });
      }

      return $li;
    },

    _createCaptionElementPrivate : function(menuCfgChild, sizeOptions) {
      var $spanCaption = $('<span/>', {
        text : menuCfgChild.caption,
        class : this._FONTSIZECLASS[this.options.fontSize]
      });
      var supplement = menuCfgChild.supplement;
      if (!supplement) {
        supplement = '';
      }
      return this._createCaptionElement($spanCaption, supplement, sizeOptions.liHeight, sizeOptions.fontSize);
    },

    _decorateDrilldown : function(path, menuCfgChild, $captionElem) {
      var _self = this;
      var $divDrillIcon = $('<div/>').addClass(_self._MENUCLASS.DIV_ICON_DRILLABLE);
      if (menuCfgChild.childItems && menuCfgChild.childItems.length > 0) {
        $divDrillIcon.addClass(_self._MENUCLASS.DRILLABLE);
        if (_self.options.drilldownBy === _self._DRILLDOWN_TYPE.CLICK_ICON) {
          $divDrillIcon.on('click', function() {
            _self._drillDown(path, menuCfgChild);
          });
        }
        $divDrillIcon.append($('<i/>').addClass(this._MENUCLASS.ICON_DRILLABLE).addClass(
            this._ICONSIZECLASS.ICON_SIZE_16));
      }
      // return $divDrillIcon;
      if (this.options.type === this._MENUTYPE.STRONG) {
        $captionElem.children('h3').append($divDrillIcon);
      } else {
        $captionElem.append($divDrillIcon);
      }
    },

    _createLiForHeaderTypeBreadcrumbList : function(path) {
      var _self = this;

      var $li = $('<li/>').addClass(_self._MENUCLASS.HEADER_LI);

      var $div = $('<div/>').addClass(_self._MENUCLASS.HEADER_BG_COLOR).addClass(_self._MENUCLASS.DIV_HD);
      $li.append($div);

      if (_self.options.useBorder) {
        $div.before($('<hr/>').addClass(this._MENUCLASS.BORDER));
        $div.after($('<hr/>').addClass(this._MENUCLASS.BORDER));
      }

      $.each(path, function(idx, menuCfgInPath) {
        if (idx > 0) {
          var $divIcon = $('<div/>').addClass(_self._MENUCLASS.DIV_ICON_CARET_RIGHT);
          $div.append($divIcon);
          $divIcon.append($('<i/>').addClass(_self._MENUCLASS.ICON_CARET_RIGHT));
        }
        if (idx < path.length - 1) {
          var $a = $('<a/>', {
            text : menuCfgInPath.caption,
          }).addClass(_self._FONTSIZECLASS[_self.options.fontSize]).addClass(_self._MENUCLASS.BREADCRUMB_LINK).on(
              'click', function() {
                path.splice(idx + 1, path.length - idx - 1);
                _self._createListView(path, _self._MOTION_TYPE.DRILL_UP);
              });
          $div.append($a);
        } else {
          var $span = $('<span/>', {
            text : menuCfgInPath.caption,
            class : _self._FONTSIZECLASS[_self.options.fontSize]
          });
          $div.append($span);
        }
      });
      return $li;
    },

    _createLiForHeaderTypeDefault : function(path) {
      var _self = this;

      var $li = $('<li/>').addClass(_self._MENUCLASS.HEADER_LI);

      var $div = $('<div/>').addClass(_self._MENUCLASS.HEADER_BG_COLOR).addClass(_self._MENUCLASS.DIV_HD);
      $li.append($div);

      if (_self.options.useBorder) {
        $div.before($('<hr/>').addClass(this._MENUCLASS.BORDER));
        $div.after($('<hr/>').addClass(this._MENUCLASS.BORDER));
      }

      if (path.length >= 2) {
        var $divIcon = $('<div/>').addClass(_self._MENUCLASS.DIV_ICON_ANGLE_LEFT);
        $div.append($divIcon);
        $divIcon
            .append($('<i/>').addClass(_self._MENUCLASS.ICON_ANGLE_LEFT).addClass(this._ICONSIZECLASS.ICON_SIZE_16));
        $div.on('click', function() {
          path.pop();
          _self._createListView(path, _self._MOTION_TYPE.DRILL_UP);
        });
      }

      var $span = $('<span/>');
      $div.append($span);
      var menuCfg = path[path.length - 1];
      var $spanInside = $('<span/>', {
        text : menuCfg.caption,
        class : _self._FONTSIZECLASS[_self.options.fontSize]
      });
      $span.append($spanInside);

      return $li;
    },

    _drillDown : function(path, menuCfgChild) {
      path.push(menuCfgChild);
      this._createListView(path, this._MOTION_TYPE.DRILL_DOWN);
    },

    openSubmenuByItemValue : function(itemValue) {
      var path = this._getPathToMenuByItemValue(itemValue, [
        this.options.menuCfgTree
      ]);
      if (path != null) {
        var menuCfg = path[path.length - 1];
        if (menuCfg.childItems) {
          this._createListView(path, this._MOTION_TYPE.INITIAL);
        }
      }
    },

    selectMenuByItemValue : function(itemValue) {
      var _self = this;
      var path = _self._getPathToMenuByItemValue(itemValue, [
        this.options.menuCfgTree
      ]);
      if (path != null) {
        if (path.length === 0) {
          // nothing to do
        } else if (path.length === 1) {
          _self._createListView(path, this._MOTION_TYPE.INITIAL);
        } else {
          var menuCfgSelected = path.pop();
          _self._createListView(path, this._MOTION_TYPE.INITIAL);
          $(_self.element).children('li').each(function(idx, li) {
            if (idx === 0) {
              return; // skip header
            }
            if (!$(li).data('itemValue')) {
              return;
            }
            var val = $(li).data('itemValue');
            if (val && val === menuCfgSelected.itemValue) {
              $(li).children('a').addClass('active');
            }
          });
        }
      }
    },
  });

  $(function() {
    var autoInstantiationClass = $.wap.drilldownMenu.prototype.widgetFullName;
    $('.' + autoInstantiationClass).drilldownMenu();
  });
}(jQuery));

/**
 * Hovering on an item will show its submenu. However, if a user wants to move to an item in the submenu, he needs to
 * move right at first and then move up/down. This is inconvenient. wap.megaDropdown widget is itended to solve this
 * problem, so users can move to the item directly.
 * 
 * @author Jason
 */
(function($) {
  /**
   * @const {string} css class of dropdown submenu
   */
  var SUBMENU_CLASS = '.dropdown-submenu';

  /**
   * @const {string} css class of dropdown menu
   */
  var MENU_CLASS = '.dropdown-menu';

  /**
   * @const {string}
   */
  var MOUSE_ENTER_EVENT = 'mouseenter';

  /**
   * @const {string}
   */
  var MOUSE_LEAVE_EVENT = 'mouseleave';

  /**
   * @const {string}
   */
  var MOUSE_MOVE_EVENT = 'mousemove';

  /**
   * @const {string}
   */
  var MOUSE_OVER_EVENT = 'mouseover';

  $.widget('wap.megaDropdown', $.wap.abstractWidget, {
    options : {
      /**
       * @type {number} Ignore the mouse move if either distance of x or y is less than this value
       */
      tolerance : 5,
      /**
       * @type {number} How many milliseconds the submenu should stay when the mouse if out of the whole menu. If the
       *       value is -1, the submenu will stay open.
       */
      timeout : 500,
      /**
       * @type {number} When calculating whether the mouse is moving towards the submenu, assume the bottom of the
       *       submenu to be (bottom + stretch).
       */
      stretch : 300,
    },
    _create : function() {
      this._super();

      this.bindEvents_();
    },
    bindEvents_ : function() {
      var _self = this;

      // indicating whether the user is trying to open a new submenu
      var showNewSubMenu = true;

      // last mouse position
      var lastX = undefined;
      var lastY = undefined;

      // the attributes of currently displayed submenu
      var topOfSubMenu = 0;
      var leftOfSubMenu = 0;
      var bottomOfSubMenu = 0;

      var timeoutKey = null;

      this.element.on(MOUSE_ENTER_EVENT, SUBMENU_CLASS, function(event) {
        clearHideSubMenuTimeout();

        if (showNewSubMenu) {
          showSubMenu($(this));
        }
      }).on(MOUSE_MOVE_EVENT, SUBMENU_CLASS, function(event) {
        var $menuItem = $(this);
        var nowX = event.pageX;
        var nowY = event.pageY;

        if (lastX !== undefined) {
          var diffX = nowX - lastX;
          var diffY = nowY - lastY;
          var width = $menuItem.width();
          var height = $menuItem.height();

          if (_self.ignoreMove_(diffX) && _self.ignoreMove_(diffY))
            return;

          if (diffX < 0 || (diffX * 4 > width) && (diffY == 0 || diffX * height > width * Math.abs(diffY))) {
            // The mouse is moving backward from the submenu, or just in current menuItem
            showNewSubMenu = true;
          } else {
            // Check if the mouse is moving towards the submenu or not
            var ratio = diffX / (leftOfSubMenu - lastX);
            showNewSubMenu = diffY < (ratio * (topOfSubMenu - lastY)) || diffY > (ratio * (bottomOfSubMenu - lastY));
          }

          if (showNewSubMenu) {
            showSubMenu($menuItem);
          }
        }

        lastX = nowX;
        lastY = nowY;
      }).on(MOUSE_ENTER_EVENT, MENU_CLASS, function(event) {
        clearHideSubMenuTimeout();
        event.stopPropagation();
      }).on(MOUSE_LEAVE_EVENT, function(event) {
        var timeout = _self.options.timeout;

        if (timeout != -1) {
          clearHideSubMenuTimeout();

          timeoutKey = setTimeout(function() {
            hideSubMenu(_self.element);
            showNewSubMenu = true;
            timeoutKey = null;
          }, timeout);
        }
      });

      function clearHideSubMenuTimeout() {
        if (timeoutKey) {
          clearTimeout(timeoutKey);
          timeoutKey = null;
        }
      }

      function hideSubMenu($element) {
        $element.find(MENU_CLASS).hide();
      }

      function showSubMenu($menuItem) {
        hideSubMenu($menuItem.parent());
        if ($menuItem.hasClass("ignore-megadropdown")){
          return;
        }

        var $submenu = $menuItem.children(MENU_CLASS).css('display', 'block');
        var offset = $submenu.offset();

        topOfSubMenu = offset.top;
        leftOfSubMenu = offset.left;
        bottomOfSubMenu = topOfSubMenu + $submenu.height() + _self.options.stretch;
      }
    },
    /**
     * Determine whether the mouse move should be ignored.
     * 
     * @param {number} move how many pixels moved
     * @return {boolean} true if ignore the mousemove, otherwise, false.
     */
    ignoreMove_ : function(move) {
      return Math.abs(move) < this.options.tolerance;
    },
  });

  $(function() {
    var autoInstantiationClass = $.wap.megaDropdown.prototype.widgetFullName;
    $('.' + autoInstantiationClass).megaDropdown();
  });
}(jQuery));

/**
 * moneyInput is a simple input-field specialized for money, which provides following features:
 * 
 * (1)Displaying currency-sign ($,€,¥,,,) , accounting-minus(△), or 3-digit-separation without any coding
 * 
 * (2)Methods like getValue/setValue without being bothered by currency-sign
 * 
 * (3)Can be controlled by wap.formController
 * 
 * (4)i18n, l10n
 * 
 * @author kikuchi7
 * 
 * TODO:i18n,l10n,disableIME,INSERT/UPDATE, maxValue
 */
(function($) {
  $.widget('wap.moneyInput', $.wap.abstractWidget, {
    options : {
      minValue : 0,
      maxValue : 100000000, // TODO
      maxLength : 9,
      afterDecimalPointCount : 0,
      currency : "JPY",
      currencySignFixed : false,
      currencyPostHyphen : false,
      currencySignSticky : true,
    },
    _moneyInput : null,
    _create : function() {
      this._super();
      this.element.css({
        'text-align' : 'right'// FIXME LESS
      });
      this._moneyInput = new moneyInput(this.element[0], this.options);
    },
    _destroy : function() {
    },
    validate : function() {
      return this._moneyInput.validate();
    },
    getValue : function() {
      return this._moneyInput.getValue();
    },
    setValue : function(value) {
      return this._moneyInput.setValue(value);
    },
    clear : function() {
      return this._moneyInput.clear();
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.moneyInput.prototype.widgetFullName;
    $('.' + autoInstantiationClass).moneyInput();
  });

  var moneyInput = function(input, options) {
    // 公開するMethod
    this.validate = _validate;
    this.numValue = 0;
    this.setValue = _setValue;
    this.getValue = _getValue;
    this.setText = _setText;
    this.getText = _getText;
    this.clear = _clear;
    var _regexp = /[^0-9.]/g;// this is CONST
    var MAGICAL_STICKY_WIDTH = 2; // this is CONST
    var _currencyFormatter = {
      // new goog.i18n.NumberFormat('#,##0');
      format : function(value) {
        // return Number(Number(value).toFixed(options.afterDecimalPointCount)).toLocaleString();
        return Number(Number(value)).toLocaleString();
      }
    };
    var _currencySign = "¥";// goog.i18n.currency.getLocalCurrencySign('JPY');
    var _defaultValue = 0;
    var _KeyCodes = {
      // TODO goog.KeyCodes
      MAC_ENTER : 3,
      BACKSPACE : 8,
      ENTER : 13,
      END : 35, // also NUM_SOUTH_WEST
      HOME : 36, // also NUM_NORTH_WEST
      LEFT : 37, // also NUM_WEST
      UP : 38, // also NUM_NORTH
      RIGHT : 39, // also NUM_EAST
      DOWN : 40, // also NUM_SOUTH
      INSERT : 45, // also NUM_INSERT
      DELETE : 46, // also NUM_DELETE
      ZERO : 48,
      ONE : 49,
      TWO : 50,
      THREE : 51,
      FOUR : 52,
      FIVE : 53,
      SIX : 54,
      SEVEN : 55,
      EIGHT : 56,
      NINE : 57,
      A : 65,
      V : 86,
      Z : 90,
      NUM_ZERO : 96,
      NUM_ONE : 97,
      NUM_TWO : 98,
      NUM_THREE : 99,
      NUM_FOUR : 100,
      NUM_FIVE : 101,
      NUM_SIX : 102,
      NUM_SEVEN : 103,
      NUM_EIGHT : 104,
      NUM_NINE : 105,
      NUM_MINUS : 109,
      NUM_PERIOD : 110,
      DASH : 189,
      PERIOD : 190,
    };
    _init();

    function _init(isUpdate) {
      // goog.i18n.currency.getLocalCurrencySign('JPY');
      // FIXME
      if (options.currency === "USD") {
        _currencySign = "$";
      } else if (options.currency === "EUR") {
        _currencySign = "€";
      } else if (options.currency === "CNY") {
        _currencySign = "¥";
      } else if (options.currency === "ZZZ") {
        _currencySign = "¤";
      }
      if (options.currencySignFixed) {
        if ($(input).siblings().find('.currencysign').length === 0) {
          $(input).before($('<span>').addClass('currencysign').css({
            'position' : 'absolute',
            'user-select' : 'none',
            'margin-top' : '7px',
            'margin-left' : '10px',
          }).text(_currencySign));
        }
        ;
      }
      ;
      if (options.currencyHyphenBySpan) {
        if ($(input).siblings().find(".currencyhyphen").length === 0) {
          $(input).before($('<span>').addClass('currencyhyphen').css({
            'position' : 'absolute',
            'user-select' : 'none',
            'margin-top' : '7px',
            'right' : '21px',
          }).text('-'));
        }
        ;
      }
      ;
      _bindEvents();
      _setValue(_defaultValue);
      return input;
    }
    function _clear(value) {
      _setValue(0);
    }
    function _setValue(value) {
      value = String(value).replace(_regexp, '');
      if (value.indexOf('.') >= 0) {
        var DPFomRight = value.length - value.indexOf('.') - 1;
        if (DPFomRight > options.afterDecimalPointCount) {
          value = value.slice(0, value.length - 1);
        }
      }
      var valBefore = Math.floor(value);
      var valAfter = '';
      if (options.afterDecimalPointCount > 0) {
        valAfter = value - valBefore;
        valAfter = Number(valAfter).toFixed(options.afterDecimalPointCount);
        valAfter = valAfter.slice(-1 * options.afterDecimalPointCount - 1);// make '12.34' into '.34'
      }
      valBefore = Number(valBefore).toLocaleString();
      value = valBefore + valAfter;

      if (options.currencySignSticky) {
        $(input).val(_currencySign + ' ' + value);
      } else {
        $(input).val(value);
      }
    }
    function _getValue() {
      var value = $(input).val();
      value = value.replace(_regexp, '');
      return value;
    }
    function _getText() {
      return $(input).val();
    }

    function _setText(value) {
      _setValue(value);
    }

    function _treatNumber(numkey) {
      var numValue = '';
      var numValueBefore = '';
      var numValueAfter = '';
      var preText = _getText();
      var _input_selectionStart = input.selectionStart;
      var _input_selectionStartFromRight = input.value.length - input.selectionStart;
      if (_getValue()) {
        numValue = _getText();
        numValueBefore = numValue.substring(0, input.selectionStart);
        numValueAfter = numValue.substring(input.selectionStart);
      }
      numValue = numValueBefore + (numkey) + numValueAfter;
      _setValue(numValue);
      if ((preText.indexOf('.') < 0) && (_getText().indexOf('.') >= 0) && (input.selectionStart && input.value.length)) {
        input.selectionStart = input.value.length - options.afterDecimalPointCount - 1;
        input.selectionEnd = input.value.length - options.afterDecimalPointCount - 1;
      } else {
        if ((_getText().indexOf('.') >= 0) && (_getText().indexOf('.') < _input_selectionStart)) {
          input.selectionStart = input.value.length - _input_selectionStartFromRight + 1;
          input.selectionEnd = input.value.length - _input_selectionStartFromRight + 1;
        } else {
          input.selectionStart = input.value.length - _input_selectionStartFromRight;
          input.selectionEnd = input.value.length - _input_selectionStartFromRight;
        }
      }
    }

    function _treatDelete() {
      var numValue = '';
      var numValueBefore = '';
      var numValueAfter = '';
      var preText = _getText();
      var _input_selectionStart = input.selectionStart;
      var _input_selectionStartFromRight = input.value.length - input.selectionStart;
      if (input.selectionStart === input.selectionEnd) {
        if ((options.afterDecimalPointCount > 0)
            && (_input_selectionStartFromRight === options.afterDecimalPointCount + 1)) {
          return false;
        }
      }
      if (_getValue()) {
        numValue = _getText();
        numValueBefore = numValue.substring(0, input.selectionStart);
        numValueAfter = numValue.substring(input.selectionStart);
        if (numValueAfter.substr(0, 1) === ',') {
          numValueAfter = numValueAfter.substr(2);
        } else {
          numValueAfter = numValueAfter.substr(1);
        }
      }
      numValue = numValueBefore + numValueAfter;
      _setValue(numValue);
      if ((preText.indexOf('.') >= 0) && (preText.indexOf('.') < _input_selectionStart)) {
        input.selectionStart = input.value.length - _input_selectionStartFromRight;
        input.selectionEnd = input.value.length - _input_selectionStartFromRight;
      } else {
        input.selectionStart = input.value.length - _input_selectionStartFromRight + 1;
        input.selectionEnd = input.value.length - _input_selectionStartFromRight + 1;
      }
    }

    function _treatBackSpace() {
      var numValue = '';
      var numValueBefore = '';
      var numValueAfter = '';
      var _input_selectionStart = input.selectionStart;
      var preText = _getText();
      var _input_selectionStartFromRight = input.value.length - input.selectionStart;
      if (input.selectionStart === input.selectionEnd) {
        if ((options.afterDecimalPointCount > 0) && (_input_selectionStartFromRight === options.afterDecimalPointCount)) {
          return false;
        }
      }
      if (_getValue()) {
        numValue = _getText();
        numValueBefore = numValue.substring(0, input.selectionStart);
        numValueAfter = numValue.substring(input.selectionStart);
        if (numValueBefore.slice(-1) === ',') {
          numValueBefore = numValueBefore.substr(0, numValueBefore.length - 2);
        } else {
          numValueBefore = numValueBefore.substr(0, numValueBefore.length - 1);
        }
      }
      numValue = numValueBefore + numValueAfter;
      _setValue(numValue);
      if ((preText.indexOf('.') >= 0) && (preText.indexOf('.') < _input_selectionStart)) {
        input.selectionStart = input.value.length - _input_selectionStartFromRight - 1;
        input.selectionEnd = input.value.length - _input_selectionStartFromRight - 1;
      } else {
        input.selectionStart = input.value.length - _input_selectionStartFromRight;
        input.selectionEnd = input.value.length - _input_selectionStartFromRight;
      }
    }

    function _validate() {
      return true;// TODO
    }

    function _numberizeInputValue() {
      var value = _getText();
      value = value.replace(/[０-９]/g, function(s) {
        return String.fromCharCode(s.charCodeAt(0) - 0xFEE0);
      });
      _setValue(value);
    }
    ;
    function _bindEvents() {
      var $input = $(input);
      $input.on('click', function() {
        if (options.currencySignSticky) {
          if (input.selectionStart <= MAGICAL_STICKY_WIDTH) {
            input.selectionStart = MAGICAL_STICKY_WIDTH;
          }
          if (input.selectionEnd <= MAGICAL_STICKY_WIDTH) {
            input.selectionEnd = MAGICAL_STICKY_WIDTH;
          }
        }
      });

      $input.on('blur', function() {
        // TODO remain selection when shift+-> , something like that
        _numberizeInputValue();
      });

      $input.on('keyup', function(e) {
        var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;
        if (((e.ctrlKey || e.metaKey) && key === _KeyCodes.V) || (e.shiftKey && key === _KeyCodes.INSERT)) {
          // paste
          _numberizeInputValue();
        }
        ;
        if (options.currencySignSticky) {
          if ((input.selectionStart === input.selectionEnd) && (input.selectionStart <= MAGICAL_STICKY_WIDTH)) {
            input.selectionStart = MAGICAL_STICKY_WIDTH;
            input.selectionEnd = MAGICAL_STICKY_WIDTH;
          }
          ;
        }
        ;
      });

      $input.on('keydown', function(e) {

        if (input.selectionStart !== input.selectionEnd) {
          return true;
        } else {
          var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;

          if (_KeyCodes.ZERO <= key && key <= _KeyCodes.NINE) {
            if (_getValue().length !== options.maxLength) {
              _treatNumber(key - _KeyCodes.ZERO);
            }
            return false;
          }
          ;
          if (_KeyCodes.NUM_ZERO <= key && key <= _KeyCodes.NUM_NINE) {
            if (_getValue().length !== options.maxLength) {
              _treatNumber(key - _KeyCodes.NUM_ZERO);
            }
            return false;
          }
          ;
          if (key === _KeyCodes.DELETE) {
            _treatDelete();
            return false;
          }
          ;
          if (key === _KeyCodes.BACKSPACE) {
            _treatBackSpace();
            return false;
          }
          ;
          if (key === _KeyCodes.LEFT) {
            if (options.currencySignSticky && input.selectionStart <= MAGICAL_STICKY_WIDTH) {
              return false;
            } else {
              return true;
            }
          }
          ;
          if (key === _KeyCodes.RIGHT) {
            return true;
          }
          ;
          if (key === _KeyCodes.HOME && options.currencySignSticky) {
            input.selectionStart = MAGICAL_STICKY_WIDTH;
            input.selectionEnd = MAGICAL_STICKY_WIDTH;
            return false;
          }
          ;

          if ((key === _KeyCodes.NUM_PERIOD) || (key === _KeyCodes.PERIOD)) {
            if ((options.afterDecimalPointCount <= 0) || (_getText().indexOf('.') != -1)) {
              if ((input.selectionStart === input.selectionEnd) && (input.selectionStart === _getText().indexOf('.'))) {
                input.selectionStart = input.selectionStart + 1;
                input.selectionEnd = input.selectionEnd + 1;
              }
              return false;
            }
          }

          // else FIXME
          if (_KeyCodes.A <= key && key <= _KeyCodes.Z) {
            if (e.ctrlKey || e.metaKey) {
              return true;
            } else {
              return false;
            }
          }
          return true;
          ;
        }
        ;
      });

    }
    ;
  };
})(jQuery);

/**
 * numericInput provides decimal option. spin by upkey/downkey is provided by html5 inputtype.
 * 
 * @author kikuchi7
 * 
 * TODO:disableIME
 */
(function($) {
  $.widget('wap.numericInput', $.wap.abstractWidget, {
    options : {
      minValue : null,
      maxValue : null,
      integer : false, // deprecated, use decimal = 0 instead.
      decimal : null,
    },
    _numericInput : null,
    _create : function() {
      this._super();
      if (null != $(this.element[0]).attr('max')) {
        this.options.maxValue = $(this.element[0]).attr('max');
      }
      if (null != $(this.element[0]).attr('min')) {
        this.options.minValue = $(this.element[0]).attr('min');
      }
      if (this.options.integer) {
        this.options.decimal = 0;
      }
      this._numericInput = new numericInput(this.element[0], this.options);
    },
    _destroy : function() {
    },
    validate : function() {
      return this._numericInput.validate();
    },
    getValue : function() {
      return this._numericInput.getValue();
    },
    setValue : function(value) {
      return this._numericInput.setValue(value);
    },
    clear : function(value) {
      return this._numericInput.clear();
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.numericInput.prototype.widgetFullName;
    $('.' + autoInstantiationClass).numericInput();
  });

  var numericInput = function(input, options) {
    // 公開するMethod
    this.validate = _validate;
    this.numValue = 0;
    this.setValue = _setValue;
    this.getValue = _getValue;
    this.clear = _clear;
    var _defaultValue = 0;

    _init();

    function _init(isUpdate) {
      _bindEvents();
      _setValue(_defaultValue);
      return input;
    }
    function _setValue(value) {
      $(input).val(_numberizeValue(value));
    }
    function _getValue() {
      var val = $(input).val();
      if(val.indexOf('-') === 0 && val.match(/[-]/g).length > 1){
        val = '-' + val.replace(/[-]/g,'');
      }else if(val.indexOf('-') > 0){
        val = val.replace(/[-]/g,'');
      };
      return Number(val);
    }

    function _validate() {
      return true;// TODO
    }

    function _clear() {
      _setValue(0);
    }

    function _numberizeValue(arg) {
      var value = arg;
      if (null != options.maxValue && (value > Number(options.maxValue))) {
        value = options.maxValue;
      }
      if (null != options.minValue && (value < Number(options.minValue))) {
        value = options.minValue;
      }
      if (null != options.decimal) {
        // Number function is used to discard the trailing 0's.
        value = Number(value.toFixed(options.decimal));
      }

      return value;
    }

    function _bindEvents() {
      var $input = $(input);
      $input.on('keypress', function(e) {
        var key = e.charCode ? e.charCode : e.keyCode ? e.keyCode : 0;

        // allow Ctrl+A
        if ((e.ctrlKey && key == 97 /* firefox */) || (e.ctrlKey && key == 65) /* opera */)
          return true;
        // allow Ctrl+X (cut)
        if ((e.ctrlKey && key == 120 /* firefox */) || (e.ctrlKey && key == 88) /* opera */)
          return true;
        // allow Ctrl+C (copy)
        if ((e.ctrlKey && key == 99 /* firefox */) || (e.ctrlKey && key == 67) /* opera */)
          return true;
        // allow Ctrl+Z (undo)
        if ((e.ctrlKey && key == 122 /* firefox */) || (e.ctrlKey && key == 90) /* opera */)
          return true;
        // allow or deny Ctrl+V (paste), Shift+Ins
        if ((e.ctrlKey && key == 118 /* firefox */) || (e.ctrlKey && key == 86) /* opera */
            || (e.shiftKey && key == 45))
          return true;

        // if a number was not pressed
        if (key < 48 || key > 57) {
          // minus
          if (key == 45 && this.value.indexOf('-') == -1) {
            return true;
          }
          // dot
          if (key == 46 && (0 != options.decimal) && this.value.indexOf('.') == -1) {
            return true;
          }
          return false;
        } else {
          return true;
        }
      });

      $input.on('blur', function() {
        _setValue(_numberizeValue(_getValue()));
      });
    }
    ;
  };
})(jQuery);

/**
 * wap-Slider
 * 
 * @author Hajime Kurakata
 */
(function($) {

  $.widget("wap.wapSlider", $.wap.abstractWidget, {

    // default-option
    options : {
      caption : "wapSlider",
      min : 0,
      max : 100,
      value : 0,
      values : [],
      step : 1,
      range : false, // false or true or max or min
      orientation : "horizontal", // horizontal or vertical
      slide : function(event, ui) {
      },// slide event function
      change : function(event, ui) {
      },// change event function
      stop : function(event, ui) {
      },// stop event function
      popContent : null, // string | function
      popTitle : null, // string | function
      popTrigger : "hover", // click | hover | focus | manual
      popPlacement : "top",// top | bottom | left | right
      popMinWidth : 0, // ZERO is none
      popMaxWidth : 0, // ZERO is none
      showValueLabel : true,
      color : null,
      valueCaptions : null
    },

    _create : function() {

      this._super();
      // createSlider
      _initialize(this.element, this.options);
      this.element.slider(this.options);
      _markUpDom(this.element, this.options);

      // add wap original class
      if (this.option('showValueLabel')) {
        _initialShowLabel(this.element, this.options);
      }

      // setRelationElement
      _setElementVal($(this.element).attr("id"), this.options);
      _bindEvent($(this.element).attr("id"), this.options);

      this.bindPopOver(this.options);

      /**
       * expand defalut setting
       */
      function _initialize(element, options) {
        // addCss
        if (!element.hasClass("wap-wapSlider")) {
          element.addClass("wap-wapSlider");
        }
        var colors = [
          'red', 'blue', 'green', 'yellow'
        ];
        for (var i = 0; i < colors.length; i++) {
          if (options.color === colors[i]) {
            if (!element.hasClass("slider-" + colors[i])) {
              element.addClass("slider-" + colors[i]);
            }
          }
        }

        if ((options.range == true) && (options.values.length == 0)) {
          options.values = [
            options.min, options.max
          ];
        }
        _escapeDefalutOption(options);

        options.slide = function(event, ui) {
          _setElementVal(event.target.id, ui);
          var userSlide = $("#" + event.target.id).slider("option", "userSlide");

          if (options.values.length > 0) {
            if (ui.values[0] === ui.values[1]) {
              // return false;
            }
          }

          if ($("#" + event.target.id).slider("option", "showValueLabel")) {
            var handleCnt = 0;
            $(this).find(".ui-slider-handle").each(function() {
              if ($(this).hasClass('ui-state-last')) {
                $(this).removeClass('ui-state-last');
              }
              if (options.values.length > handleCnt) {
                var caption = ui.values[handleCnt];
                if (_getCaption(ui.values[handleCnt], options)) {
                  caption = _getCaption(ui.values[handleCnt], options);
                }
                $(this).html('<span class="ui-label">' + caption + '</span>');
              } else {
                var caption = ui.value;
                if (_getCaption(ui.value, options)) {
                  caption = _getCaption(ui.value, options);
                }
                $(this).html('<span class="ui-label">' + caption + '</span>');
              }
              handleCnt++;
            });
          }

          userSlide(event, ui);
        };
        options.change = function(event, ui) {
          _setElementVal(event.target.id, ui);
          var userChange = $("#" + event.target.id).slider("option", "userChange");
          if (!$(ui.handle).hasClass('ui-state-last')) {
            $(ui.handle).addClass('ui-state-last');
          }
          userChange(event, ui);
        };
        options.stop = function(event, ui) {
          var userStop = $("#" + event.target.id).slider("option", "userStop");
          userStop(event, ui);
        };
      }

      function _markUpDom(element, options) {
        var $handles = element.children('a');
        if ($handles != null && $handles.length > 1) {
          $($handles[0]).addClass("slider-handle-min");
          $($handles[1]).addClass("slider-handle-max");
          targetEl = element;
          $handles.each(function() {
            $(this).on('mousedown touchstart', function($handles) {
              targetEl.find('.ui-slider-handle').each(function() {
                $(this).removeClass('ui-state-last');
              });
            });
          });
        }
        var scaleNum = (options.max - options.min) / options.step;
        if (options.showScale && scaleNum <= 20) {
          for (var i = 0; i <= scaleNum; i++) {
            var $scaleEl = $('<div style="top:-4px;position:absolute;'
                + 'width:2px;height:18px;background:#aaaaaa;"></div>');
            var leftVal = i * 100 * options.step / (options.max - options.min);
            $scaleEl.css('left', leftVal + '%');

            if (scaleNum <= 10 || i % 2 === 0) {
              var caption = i * options.step;
              if (_getCaption(i * options.step, options)) {
                caption = _getCaption(i * options.step, options);
              }
              $scaleEl.html('<span style="position: absolute;left: -10px;top: -20px;color: #bcbcbc;'
                  + 'margin-left: 5px;white-space: nowrap;">'
                  + caption
                  + '</span>');
            }
            element.append($scaleEl);
          }
        }
      }

      function _initialShowLabel(element, options) {
        var handleCnt = 0;
        $(element).find(".ui-slider-handle").each(function() {
          if (options.values.length > handleCnt) {
            var caption = options.values[handleCnt];
            if (_getCaption(options.values[handleCnt], options)) {
              caption = _getCaption(options.values[handleCnt], options);
            }
            $(this).html('<span class="ui-label">' + caption + '</span>');
          } else {
            var caption = options.value;
            if (_getCaption(options.value, options)) {
              caption = _getCaption(caption, options);
            }
            $(this).html('<span class="ui-label">' + caption + '</span>');
          }
          handleCnt++;
        });
      }

      function _getCaption(value, options) {
        if (options == null || options.valueCaptions == null) {
          return null;
        }
        var valueCaptions = options.valueCaptions;
        if (valueCaptions[value]) {
          return valueCaptions[value];
        }
        return null;
      }

      function _escapeDefalutOption(options) {
        // 初期値を退避し、生成後に呼出を可能とします。
        options.userValue = options.value;
        options.userValues = options.values;
        options.userCreate = options.create;
        options.userSlide = options.slide;
        options.userChange = options.change;
        options.userStop = options.stop;
      }

      function _setElementVal(id, ui) {
        _setElement("val", id, ui.value);
        if (ui.values) {
          _setElement("min", id, ui.values[0]);
          _setElement("max", id, ui.values[1]);
        }

        function _setElement(tag, id, value) {
          // setValue
          $('input[data-wap-slider-' + tag + '="' + id + '"]').val(value);
          $('label[data-wap-slider-' + tag + '="' + id + '"]').text(value);
        }
      }

      function _bindEvent(id, options) {
        _bindOnChange("val", id);
        if (options.values.length) {
          _bindOnChange("min", id);
          _bindOnChange("max", id);
        }

        function _bindOnChange(tag, id) {
          // bind evnet
          $('input[data-wap-slider-' + tag + '="' + id + '"]').on("change", function(ev) {
            switch (tag) {
            case "val":
              $("#" + id).wapSlider("setValue", $(ev.target).val());
              break;
            case "min":
              $("#" + id).wapSlider("setMinValue", $(ev.target).val());
              break;
            case "max":
              $("#" + id).wapSlider("setMaxValue", $(ev.target).val());
              break;
            }
          });
        }
      }
    },

    bindPopOver : function(options) {
      if (options.popContent) {
        var slider = $(this.element).find(".ui-slider-handle");
        slider.popover({
          content : options.popContent,
          title : options.popTitle,
          html : 'true',
          placement : options.popPlacement,
          trigger : options.popTrigger,
          delay : {
            show : 500,
            hide : 0
          }
        });
        slider.popover('show');
        var pop = slider.next();
        var min = convertOptionWidth(options.popMinWidth);
        var max = convertOptionWidth(options.popMaxWidth);
        pop.css({
          "min-width" : min,
          "max-width" : max
        });
        slider.popover('hide');
      }

      function convertOptionWidth(value) {
        var width = null;
        if (value == 0) {
          width = 'none';
        } else {
          width = value + "px";
        }
        return width;
      }
    },

    getValue : function() {
      return $(this.element).slider("value");
    },

    setValue : function(value) {
      $(this.element).slider("value", value);
    },

    getValues : function() {
      return $(this.element).slider("values");
    },

    setValues : function(values) {
      $(this.element).slider("values", values);
    },

    getMinValue : function() {
      return $(this.element).slider("values", 0);
    },

    getMinValueCaption : function() {
      return this.getCaption(this.getMinValue(), this.options);
    },

    setMinValue : function(value) {
      if (this.getMaxValue() < value) {
        value = this.getMaxValue();
      }
      $(this.element).slider("values", 0, value);
    },

    getMaxValue : function() {
      return $(this.element).slider("values", 1);
    },

    getMaxValueCaption : function() {
      return this.getCaption(this.getMaxValue(), this.options);
    },

    setMaxValue : function(value) {
      if (this.getMinValue() > value) {
        value = this.getMinValue();
      }
      $(this.element).slider("values", 1, value);
    },

    clearValue : function() {
      var options = $("#" + $(this.element).attr("id")).slider("option");
      this.setValue(options.userValue);
      this.setValues(options.userValues);
    },

    getCaption : function(value, options) {
      if (options == null || options.valueCaptions == null) {
        return null;
      }
      var valueCaptions = options.valueCaptions;
      if (valueCaptions[value]) {
        return valueCaptions[value];
      }
      return null;
    }

  });

  $(function() {
    var autoInstantiationClass = $.wap.wapSlider.prototype.widgetFullName;
    $('.' + autoInstantiationClass).wapSlider();
  });

}(jQuery));

/**
 * Task Detail Dialog
 *
 * @author zhong_s
 */
(function($) {


    $.widget("wap.taskDetail", $.wap.abstractWidget, {

        /** jQuery Object Cache */
        $dialog : null,

        /**
         * Options
         */
        options : {
            username : '',
            taskId : '',
            templateId : '',
            dialogId : null,
            width : '50%',
            actBeforeShow : null, // function that is action of dialog initial open.
            actOk : null,   // function that is action of OK
            actAfterClose : null, // function that is action of after Close
            isStartTask: true
        },

        /**
         * create widget
         */
        _create : function() {
            this._super();

            this._loadHtmlTmpl();
            this._bindEvents();
        },

        /**
         * Bind Events
         */
        _bindEvents : function() {
            this._bindActClickSelf();
            this._bindActOkBtn();
            this._bindEmotionAct();
        },

        /**
         * Bind action of search button
         *
         * @param event
         */
        _bindActClickSelf : function() {
            var _self = this;
            this.element.on('click', function(e) {
                if (_self.actBeforeShow) {
                    _self.actBeforeShow(_self.options.dialogBodyId, e);
                }
                _self.$dialog.modal('show');
            });
        },

        /**
         * Bind action of dialog OK button
         */
        _bindActOkBtn : function() {
            var _self = this;
            this.$dialog.on('click', '.btn-info', function(e) {
                if (_self.actOk) {
                    _self.actOk();
                }

                _self.$dialog.modal('hide');

                if (_self.actAfterClose) {
                    _self.actAfterClose();
                }
            });
        },

        /**
         * bind emotion item action
         */
        _bindEmotionAct : function() {
            this.$dialog.on('click','.task-comment .emotion-area .item',function(e){
                var item = $(e.currentTarget);
                item.parents('.emotion-area:first').children('.item').removeClass('selected');
                item.addClass('selected');
            });
        },


        /**
         * Load HTML Template from server.
         */
        _loadHtmlTmpl : function() {
            this._beforeLoadHtmlTmpl();

            var buttonName = 'Submit';
            if(this.options.isStartTask){
                buttonName = 'Start';
            }

            var tasks = TaskDataManager.get(this.options.username,'id',this.options.taskId);
            if(tasks.length <= 0){
                throw 'No task data existed in Task Data Manager.';
            }
            var task = tasks[0];


            var dlgHtml = Hogan.compile($('#'+this.options.templateId).text()).render({
                hasDialogId : this.options.dialogId != null && this.options.dialogId != '',
                dialogId : this.options.dialogId,
                title : task.title,
                width : this.options.width,
                okButtonName : buttonName,
                deadline : task.deadline,
                todoHeader : 'TODO:',
                todo : task.todo,
                needLastComment : this.options.isStartTask,
                needNewComment : !this.options.isStartTask,
                comment : task.comment
            });

            this._afterLoadHtmlTmpl(dlgHtml);
        },

        /**
         * Action before load HTML template
         */
        _beforeLoadHtmlTmpl : function() {
            if($('#tmpl-task-detail-dialog').length <= 0){
                var html = '<div id="tmpl-task-detail-dialog"></div>';
                $('body').append(html);
            }
        },

        /**
         * Action after load HTML template
         *
         * @param dlgHtml
         */
        _afterLoadHtmlTmpl : function(dlgHtml) {
            $('#tmpl-task-detail-dialog').append(dlgHtml);
            this.$dialog = $('#tmpl-task-detail-dialog').children('.taskDetailDialog:last');
        }
    });
}(jQuery));
/**
 * @author sakai_k
 */

(function($) {
  $.widget("wap.textarea", $.wap.abstractWidget, {

    options : {
      // XXX: this doesn't work when we zoom page, or change font size:
      // some first lines will be hidden and there is no scroll bar to display.
      autoresize : false,
      autoconvert : false
    },

    _create : function() {
      this._super();
      var that = this;

      if (this.options.autoresize) {
        that.element.autosize();
      }
      if (this.options.autoconvert) {
        this.setAutoConvert();
      }
    },

    _destroy : function() {
      if (this.options.autoresize) {
        this.element.trigger('autosize.destroy');
      }
    },

    setValue : function(value) {
      this.element.val(value);
      if (this.options.autoresize) {
        this.resize();
      }
    },

    clear : function() {
      this.setValue('');
    },

    getValue : function() {
      return this.element.val();
    },

    setAutoConvert : function() {
      var self = this;
      $(this.element).on('focusout', function(event) {
        convertToHalfWidth($(event.currentTarget));
      });
    },

    resize : function() {
      if (this.options.autoresize) {
        this.element.trigger('autosize.resize');
      }
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.textarea.prototype.widgetFullName;
    $('.' + autoInstantiationClass).textarea();
  });

}(jQuery));

/**
 * @author sasaki_yu
 */
(function($) {
  $.widget("wap.switchInput", $.wap.abstractWidget, {

    options : {
      color : 'info',
      checked : false
    },

    _create : function() {
      
      this.element.html('<label class="wap-switch-content">' +
        '  <span class="wap-switch-content-label">' +
        '    <span class="switch-on"></span>' +
        '    <span class="switch-separator"></span>' +
        '    <span class="switch-off"></span>' +
        '  </span>' +
        '</label>');
      
      if (!this.element.hasClass('wap-switch')) {
        this.element.addClass('wap-switch');
      }

      this.element.addClass(this.options.color);
      if (this.options.checked) {
        this.element.addClass('checked');
      }
      this._bindEvents();
    },

    _destroy : function() {
      this.element.off('click');
    },

    _bindEvents: function() {
      this.element.on('click', function() {
        this.toggle();
      }.bind(this));
    },

    setValue : function(bool) {
      if (bool) {
        if (!this.element.hasClass('checked')) {
          this.element.addClass('checked');
          this.element.trigger('change');
        }
      } else {
        if (this.element.hasClass('checked')) {
          this.element.removeClass('checked');
          this.element.trigger('change');
        }
      }
    },

    getValue : function() {
      return this.element.hasClass('checked');
    },

    toggle : function() {
      this.setValue(!this.getValue());
    },

    clear : function() {
      this.setValue(false);
    }
  });

  $(function() {
    var autoInstantiationClass = $.wap.switchInput.prototype.widgetFullName;
    $('.' + autoInstantiationClass).switchInput();
  });

}(jQuery));

/**
 * Tips Widget
 * 
 * @author koyama_y
 */
(function($) {
  $.widget("wap.tips", $.wap.abstractWidget, {

    /**
     * Tips HTML Template
     */
    tipsTmpl : null,
    tipsDetailTmpl : null,
    tipsDetailContentTmpl : null,
    tipsDescriptionTmpl : null,
    descriptionBlockTmpl : null,

    reCreate : true,

    pagination : {
      maxPage : 0,
      currentPage : 0
    },

    /**
     * Options
     */
    options : {
      'useGallery' : false,
      'defColor' : '#f8b00f',
      'defTagCss' : 'label-info'
    },

    /**
     * Tags and Tips data.
     */
    datas : {
      'tags' : null,
      'tips' : null,
    },

    /**
     * create widget
     */
    _create : function() {
      this._super();
      this._prepareTmpl();
    },

    /**
     * Compile template using HOGAN
     */
    _prepareTmpl : function() {
      var tipsTemplate = '<div class="col-md-3 album-wrapper">'
          + '               <article class="album hover-shadow" id="tip-id-{{id}}" data-tip-id={{id}}>'
          + '                 <header class="album-info">'
          + '                   <div>'
          + '                     <h3 class="tips-description text-light">{{title}}</h3>'
          + '                   </div>'
          + '                 </header>'
          + '                 <section class="album-info">'
          + '                   <div class="tags">'
          + '                     {{#tags}}'
          + '                     <span class="label {{cssClass}} g-tag-label">{{name}}</span>'
          + '                     {{/tags}}'
          + '                   </div>'
          + '                 </section>'
          + '                 <footer style="border-bottom-color:{{color}};"></footer>'
          + '               </article>'
          + '             </div>';
      this.tipsTmpl = Hogan.compile(tipsTemplate);

      var tipsDetailTmpl = '<div id="gallery-detail" class="gallery-env">'
          + '             <div class="col-center">'
          + '               <div class="tips-face tips-front" id="tip-detail">'
          + '                 <article class="album" id="tip-id-{{id}}" data-tip-id={{id}}>'
          + '                   <header class="album-info">'
          + '                     <div class="detail-title">'
          + '                       <h1 style="border-left-color:{{color}};" class="tips-description">{{title}}</h1>'
          + '                     </div>'
          + '                   </header>'
          + '                   <section class="album-info">'
          + '                     <div class="tags">'
          + '                       {{#tags}}'
          + '                       <span class="label {{cssClass}} g-tag-label">{{name}}</span>'
          + '                       {{/tags}}'
          + '                     </div>'
          + '                   </section>'
          + '                   <footer style="border-bottom-color:{{color}};"></footer>'
          + '                 </article>'
          + '               </div>'
          + '               <div class="tips-face tips-back">'
          + '                 <article class="album"">'
          + '                   <header class="album-info">'
          + '                     <div class="close-btn">'
          + '                       <i class="wap-icon-close"></i>'
          + '                     </div>'
          + '                     <h2 class=tips-title>'
          + '                       <span style="border-left-color:{{color}}">{{back-title}}</span>'
          + '                     <h2>'
          + '                   </header>'
          + '                   <section class="album-info">'
          + '                     <div id="detail-content" class="detail-content"></div>'
          + '                   </section>'
          + '                   <footer>'
          + '                     <div class="content-page-arrow" style="background-color:{{color}}">'
          + '                       <p class="content-page-count">'
          + '                         <span class="page-count">'
          + '                           <span id="page-ordinal">0</span>'
          + '                           <span>/</span>'
          + '                           <span id="page-total">0</span>'
          + '                         </span>'
          + '                       </p>'
          + '                       <i class="wap-icon-backward content-page content-page-prev"></i>'
          + '                       <i class="wap-icon-forward content-page content-page-next"></i>'
          + '                     </div>'
          + '                   </footer>'
          + '                 </article>'
          + '               </div>'
          + '             </div>'
          + '           </div>';
      this.tipsDetailTmpl = Hogan.compile(tipsDetailTmpl);

      var tipsDetailContentTmpl = '<li class="each-page-content offSlide">'
          + '                        <div class="content-left">'
          + '                          <div class="content-left-dtl">{{{description}}}</div>'
          + '                        </div>'
          + '                        <div class="content-right">'
          + '                          <img src="{{img}}">'
          + '                        </div>'
          + '                      </li>';
      this.tipsDetailContentTmpl = Hogan.compile(tipsDetailContentTmpl);

      var descriptionTmpl = '<div class="description-wrapper">'
          + '                  <div class="main-title">'
          + '                    <i class={{titleIcon}}></i>'
          + '                    <h3>{{title}}</h3>'
          + '                  </div>'
          + '                  <div class="root">{{root}}</div>'
          + '                  <div class="area-wrapper">{{{area}}}</div>'
          + '                </div>';
      this.tipsDescriptionTmpl = Hogan.compile(descriptionTmpl);

      var descriptionBlock = '<div class="sub-wrapper">'
          + '                   <div class="sub-title"><i class={{titleIcon}}></i><h4>{{title}}</h4></div>'
          + '                   <div class="sub-body">{{{body}}}</div>'
          + '                 </div>';
      this.descriptionBlockTmpl = Hogan.compile(descriptionBlock);
    },

    /**
     * parameter analyze function
     * 
     * @param {object} params
     */
    _parseParams : function(params) {
      if (params.options) {
        this._parseOptions(params.options);
      }

      if (params.datas) {
        this._parseData(params.datas);
      }
    },

    /**
     * analyze parameter's option
     * 
     * @param {object} paramOptions
     */
    _parseOptions : function(paramOptions) {
      if (paramOptions.useGallery) {
        this.options.useGallery = paramOptions.useGallery;
      }
    },

    /**
     * analyze parameter's data
     * 
     * @param {object} paramDatas
     */
    _parseData : function(paramDatas) {
      if (paramDatas.tags) {
        this.datas.tags = paramDatas.tags;
      }
      if (paramDatas.tips) {
        this.datas.tips = paramDatas.tips;
      }
    },

    /**
     * Create Background
     */
    _createBackground : function() {
      $('body').append('<div id="tips-modal" class="modal-backdrop fade in"></div>');
    },

    /**
     * Create Tips
     */
    _createTips : function() {
      if (this.reCreate) {
        if (this.options.useGallery) {
          this._complementDatas();
        } else {
          this._complementData(this.datas.tips);
        }
        this.reCreate = false;
      }

      if (this.options.useGallery) {
        this._drawTips();
        this._bindEvents();
      } else {
        this._showDetailTips(this.datas.tips);
        this._hideEl($('.close-btn'));
      }

      this._bindCloseEvent();
    },

    /**
     * Show Element
     * 
     * @param {object} $el
     */
    _showEl : function($el) {
      $el.removeClass('hide').addClass('show');
    },

    /**
     * Hide Element
     * 
     * @param {object} $el
     */
    _hideEl : function($el) {
      $el.removeClass('show').addClass('hide');
    },

    /**
     * Complement All Data information
     */
    _complementDatas : function() {
      var _self = this;
      $.map(this.datas.tips, function(tip) {
        return _self._complementData(tip);
      });
    },

    /**
     * Complement Data information
     * 
     * @param {object} tip
     * @return {object}
     */
    _complementData : function(tip) {
      if (!tip.color) {
        tip.color = this.options.defColor;
      }
      if (this.datas.tags && this.options.useGallery) {
        __complementTagData(this, tip);
      }
      return tip;

      function __complementTagData(_self, tip) {
        tip.tags = $.map(tip.tags, function(tag) {
          return newTag = {
            name : _self.datas.tags[tag].name,
            cssClass : _self.datas.tags[tag].cssClass ? _self.datas.tags[tag].cssClass : _self.options.defTagCss
          };
        });
      }
    },

    /**
     * Append tips using Tips Template
     */
    _drawTips : function() {
      var _self = this;
      this.datas.tips.forEach(function(tip) {
        _self.element.append(_self.tipsTmpl.render(tip));
      });
    },

    /**
     * Bind each event
     */
    _bindEvents : function() {
      var _self = this;

      $('.album').on('click', function() {
        $('.album').removeClass('hover-shadow').addClass('puffOut');
        var tipId = $(this).data('tipId');

        setTimeout(function() {
          $('.album').removeClass('puffOut show').addClass('hide');
          _self._showDetailTips(_self._getTipData(tipId));
        }, 350);
      });
    },

    /**
     * get tip data
     */
    _getTipData : function(tipId) {
      for (var i = 0, n = this.datas.tips.length; i < n; i++) {
        if (this.datas.tips[i].id == tipId) {
          return this.datas.tips[i];
        }
      }
      return null;
    },

    /**
     * Bind close event
     */
    _bindCloseEvent : function() {
      var _self = this;

      $(document).off('.actAllClose').off('.actEscAllClose');
      $(document).on('click.actAllClose', actAllClose);
      $(document).on('keydown.actEscAllClose', actEscAllClose);

      function actAllClose(e) {
        if (!$.contains(_self.element[0], e.target)) {
          _self._allCloseAction();
        }
      }

      function actEscAllClose(e) {
        if (e.keyCode == 27) {
          _self._allCloseAction();
        }
      }
    },

    /**
     * all tips close action
     */
    _allCloseAction : function() {
      this.element.html('').removeClass('show').addClass('hide');
      $('#tips-modal').remove();
    },

    /**
     * Show detail tips
     * 
     * @param tipData
     */
    _showDetailTips : function(tipData) {
      var _self = this;
      var detailContent = tipData.detail;

      this._detailInit(detailContent.length - 1);

      var tipsDtlTemplate = this.tipsDetailTmpl.render(tipData);
      this.element.append(tipsDtlTemplate);

      this._changePagination();

      setTimeout(function() {
        _self._drawTipsContents(detailContent);
        _self._bindTipsContentEvents();
        $('.col-center').addClass('flipped');
      }, 500);
    },

    /**
     * Initialize process
     * 
     * @param size
     */
    _detailInit : function(size) {
      this.pagination.maxPage = size;
      this.pagination.currentPage = 0;
    },

    /**
     * Draw Contents
     * 
     * @param detailContent
     */
    _drawTipsContents : function(detailContent) {
      for (var i = 0, n = detailContent.length; i < n; i++) {
        var content = detailContent[i];

        var descriptionArea = this._getDescriptionAreaHtml(content.description.area);

        var description = content.description;
        var descriptionHtml = this.tipsDescriptionTmpl.render({
          'title' : description.title,
          'titleIcon' : description.titleIcon,
          'root' : description.root,
          'area' : descriptionArea
        });

        $('#detail-content').append(this.tipsDetailContentTmpl.render({
          'description' : descriptionHtml,
          'img' : content.img
        }));
      }
      $('.offSlide').first().removeClass('offSlide').addClass('slide');
      this._actChkPagination();
    },

    /**
     * Get Description area HTML
     */
    _getDescriptionAreaHtml : function(descriptionData) {
      var result = '';
      for (var i = 0, n = descriptionData.length; i < n; i++) {
        var each = descriptionData[i];
        result += this.descriptionBlockTmpl.render(each);
      }
      return result;
    },

    /**
     * Bind Content of Events
     */
    _bindTipsContentEvents : function() {
      var _self = this;

      // action of close button
      $('.close-btn').on('click', function() {
        _self._detailCloseAction();
      });

      // action of previous content page
      $('.content-page-prev').on('click', function() {
        _self._slideAction(false);
      });

      // action of next content page
      $('.content-page-next').on('click', function() {
        _self._slideAction(true);
      });
    },

    /**
     * Detail Close Action
     */
    _detailCloseAction : function() {
      $('#gallery-detail').addClass('puffOut');
      setTimeout(function() {
        $('#gallery-detail').remove();
        $('.album').addClass('show hover-shadow');
      }, 350);
    },

    /**
     * Content slide action
     * 
     * @param {boolean} isNext
     */
    _slideAction : function(isNext) {
      var $li = $('#detail-content li');

      var currentPage = this.pagination.currentPage;

      if (isNext) {
        this.pagination.currentPage += 1;
      } else {
        this.pagination.currentPage -= 1;
      }

      var newPage = this.pagination.currentPage;

      if (isNext) {
        this._actSlide($li, currentPage, newPage, 'slide--offleft', 'from-right-in');
      } else {
        this._actSlide($li, currentPage, newPage, 'slide--offright', 'from-left-in');
      }
    },

    /**
     * Slide Action
     * 
     * @param $li
     * @param currentPage
     * @param newPage
     * @param actionCss(slide--offright or slide--offleft)
     */
    _actSlide : function($li, currentPage, newPage, actionCss, moveCss) {
      var $currentEl = $li.eq(currentPage);
      var $moveEl = $li.eq(newPage);

      $('body').addClass('overflow-hidden');
      $currentEl.addClass(actionCss);
      $moveEl.removeClass('offSlide').addClass(moveCss);

      this._actChkPagination();
      this._changePagination();

      setTimeout(function() {
        $moveEl.addClass('slide').removeClass(moveCss);
        $currentEl.addClass('offSlide').removeClass('slide').removeClass(actionCss);
        $('body').removeClass('overflow-hidden');
      }, 300);
    },

    /**
     * Check Page
     */
    _actChkPagination : function() {
      if (this.pagination.currentPage === 0) {
        $('.content-page-arrow').addClass('first');
      } else if (this.pagination.currentPage === this.pagination.maxPage) {
        $('.content-page-arrow').addClass('last');
      } else {
        $('.content-page-arrow').removeClass('last first');
      }
    },

    /**
     * Change pagination number
     */
    _changePagination : function() {
      $('#page-ordinal').html(this.pagination.currentPage + 1);
      $('#page-total').html(this.pagination.maxPage + 1);
    },

    // --------------------------------------------------------------------------
    // public methods
    // --------------------------------------------------------------------------
    /**
     * tips show action
     * 
     * @param {object} params
     */
    show : function(params) {
      this._parseParams(params);
      this._createBackground();
      this._showEl(this.element);
      this._createTips();
    },

    /**
     * set data
     */
    setParams : function(params) {
      this._parseParams(params);
      this.reCreate = true;
    }
  });

  /**
   * Automatic initialization function.
   */
  $(function() {
    var autoInstantiationClass = $.wap.tips.prototype.widgetFullName;
    $('.' + autoInstantiationClass).tips().addClass('gallery-env');
  });
}(jQuery));
/**
 * wap-toaster
 */

(function($) {
  $.widget("wap.toaster", $.wap.abstractWidget, {

    // default-option
    options : {
      caption : 'wap-toaster',
      type : 'info',
      title : null,
      message : null,
      position : null,// top-right,top-left,top-full-width,bottom-right,bottom-left,bottom-full-width
      erase : null, // boolean
    },

    _create : function() {

      this._super();
      this._setOnClickFunction();
    },

    _setOnClickFunction : function() {

      var that = this;
      this.element.on('click', function(ev) {

        var toastrOpt = wapToaster.getOptions(that.type, that.options);
        wapToaster.display(that.options.type, that.options.message, that.options.title, toastrOpt);

        that._trigger('click');
      });
    },
  });

  $(function() {
    var autoInstantiationClass = $.wap.toaster.prototype.widgetFullName;
    $('.' + autoInstantiationClass).toaster();
  });

}(jQuery));

(function($) {

  wapToaster = (function() {

    return {
      info : _info,
      success : _success,
      warning : _warning,
      error : _error,
      display : _display,
      getOptions : _getToasterOpt,
    };

    function _info(message, title, opts) {
      var options = _getToasterOpt("info", opts);
      return _display("info", message, title, options);
    }

    function _success(message, title, opts) {
      var options = _getToasterOpt("success", opts);
      return _display("success", message, title, options);
    }

    function _warning(message, title, opts) {
      var options = _getToasterOpt("warning", opts);
      return _display("warning", message, title, options);
    }
    function _error(message, title, opts) {
      var options = _getToasterOpt("error", opts);
      return _display("error", message, title, options);
    }

    function _getToasterOpt(type, opts) {

      if (!opts) {
        opts = _getWapSliderDefault();
      }
      if (!opts.position) {
        if (type == "error") {
          opts.position = "top-full-width";
        } else {
          opts.position = "top-right";
        }
      }
      if (opts.erase == null) {
        if (type == "error") {
          opts.erase = false;
        } else {
          opts.erase = true;
        }
      }

      var toasterOpt = _getToasterDefalut();
      toasterOpt.positionClass = "toast-" + opts.position;
      if (opts.erase == false) {
        toasterOpt.timeOut = 0;
        toasterOpt.extendedTimeOut = 0;
      }
      if ('function' == typeof opts.onShown) {
        toasterOpt.onShown = opts.onShown;
      }
      if ('function' == typeof opts.onHidden) {
        toasterOpt.onHidden = opts.onHidden;
      }

      return toasterOpt;
    }

    function _display(type, message, title, opts) {

      switch (type) {
      case 'info':
        // check needs no nessesary
        return toastr.info(message, title, opts);

      case 'success':
        // check needs no nessesary
        return toastr.success(message, title, opts);

      case 'warning':
        return toastr.warning(message, title, opts);

      case 'error':
        return toastr.error(message, title, opts);

      }
    }

    function _getWapSliderDefault() {
      // wap-toaster defalut
      var opts = {
        position : null,
        erase : null,
      };
      return opts;
    }

    function _getToasterDefalut() {
      var opts = {
        "closeButton" : false,
        "debug" : false,
        "positionClass" : "toast-top-right",
        "onclick" : null,
        "showDuration" : "300",
        "hideDuration" : "1000",
        "timeOut" : "5000",
        "extendedTimeOut" : "5000",
        "showEasing" : "swing",
        "hideEasing" : "linear",
        "showMethod" : "fadeIn",
        "hideMethod" : "fadeOut",
      };
      return opts;
    }
  })();

})(jQuery);
